{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230\u6211\u7684Python\u5b66\u4e60\u7a7a\u95f4 \u00b6 \u672c\u7f51\u7ad9\u4e3b\u8981\u7528\u6765\u8bb0\u5f55\u4e2a\u4eba\u5bf9python\u7684\u5b66\u4e60\uff0c\u65b9\u4fbf\u5728\u4ee5\u540e\u7684\u5de5\u4f5c\u3001\u5b66\u4e60\u4e2d\u67e5\u8be2\u3002","title":"\u7b80\u4ecb"},{"location":"#python","text":"\u672c\u7f51\u7ad9\u4e3b\u8981\u7528\u6765\u8bb0\u5f55\u4e2a\u4eba\u5bf9python\u7684\u5b66\u4e60\uff0c\u65b9\u4fbf\u5728\u4ee5\u540e\u7684\u5de5\u4f5c\u3001\u5b66\u4e60\u4e2d\u67e5\u8be2\u3002","title":"\u6b22\u8fce\u6765\u5230\u6211\u7684Python\u5b66\u4e60\u7a7a\u95f4"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0/","text":"\u51fd\u6570 \u00b6 1.1 \u5b9a\u4e49\u51fd\u6570 \u00b6 Python\u9664\u4e86\u63d0\u4f9b\u8bb8\u591a\u5185\u7f6e\u51fd\u6570\u5916\uff0c\u8fd8\u5141\u8bb8\u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570\uff1b\u81ea\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u57fa\u672c\u8bed\u6cd5\uff1a def \u51fd\u6570\u540d ( \u53c2\u6570 ): \u51fd\u6570\u4f53 \u51fd\u6570\u4ee3\u7801\u5757\u4ee5 def \u5173\u952e\u8bcd\u5f00\u5934\uff0c\u540e\u63a5\u51fd\u6570\u6807\u8bc6\u7b26\u540d\u79f0\u548c\u5706\u62ec\u53f7 () \u3002 \u4efb\u4f55\u4f20\u5165\u53c2\u6570\u548c\u81ea\u53d8\u91cf\u5fc5\u987b\u653e\u5728\u5706\u62ec\u53f7\u4e2d\u95f4\uff0c\u5706\u62ec\u53f7\u4e4b\u95f4\u53ef\u4ee5\u7528\u4e8e\u5b9a\u4e49\u53c2\u6570\u3002 \u51fd\u6570\u5185\u5bb9\u4ee5\u5192\u53f7 : \u8d77\u59cb\uff0c\u5e76\u4e14\u7f29\u8fdb\u3002 \u51fd\u6570\u5185\u7684\u7b2c\u4e00\u6761\u8bed\u53e5\u662f\u5b57\u7b26\u4e32\u65f6\uff0c\u8be5\u5b57\u7b26\u4e32\u5c31\u662f\u6587\u6863\u5b57\u7b26\u4e32\uff0c\u4e5f\u79f0\u4e3a docstring \uff0c\u8be6\u89c1 \u6587\u6863\u5b57\u7b26\u4e32 \u3002\u5229\u7528\u6587\u6863\u5b57\u7b26\u4e32\u53ef\u4ee5\u81ea\u52a8\u751f\u6210\u5728\u7ebf\u6587\u6863\u6216\u6253\u5370\u7248\u6587\u6863\uff0c\u8fd8\u53ef\u4ee5\u8ba9\u5f00\u53d1\u8005\u5728\u6d4f\u89c8\u4ee3\u7801\u65f6\u76f4\u63a5\u67e5\u9605\u6587\u6863\uff1bPython \u5f00\u53d1\u8005\u6700\u597d\u517b\u6210\u5728\u4ee3\u7801\u4e2d\u52a0\u5165\u6587\u6863\u5b57\u7b26\u4e32\u7684\u597d\u4e60\u60ef\u3002 \u51fd\u6570\u5728 \u6267\u884c \u65f6\u4f7f\u7528\u51fd\u6570\u5c40\u90e8\u53d8\u91cf\u7b26\u53f7\u8868\uff0c\u6240\u6709\u51fd\u6570\u53d8\u91cf\u8d4b\u503c\u90fd\u5b58\u5728\u5c40\u90e8\u7b26\u53f7\u8868\u4e2d\uff1b\u5f15\u7528\u53d8\u91cf\u65f6\uff0c\u9996\u5148\uff0c\u5728\u5c40\u90e8\u7b26\u53f7\u8868\u91cc\u67e5\u627e\u53d8\u91cf\uff0c\u7136\u540e\uff0c\u662f\u5916\u5c42\u51fd\u6570\u5c40\u90e8\u7b26\u53f7\u8868\uff0c\u518d\u662f\u5168\u5c40\u7b26\u53f7\u8868\uff0c\u6700\u540e\u662f\u5185\u7f6e\u540d\u79f0\u7b26\u53f7\u8868\u3002\u56e0\u6b64\uff0c\u5c3d\u7ba1\u53ef\u4ee5\u5f15\u7528\u5168\u5c40\u53d8\u91cf\u548c\u5916\u5c42\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u4f46\u6700\u597d\u4e0d\u8981\u5728\u51fd\u6570\u5185\u76f4\u63a5\u8d4b\u503c\uff08\u9664\u975e\u662f global \u8bed\u53e5\u5b9a\u4e49\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u6216 nonlocal \u8bed\u53e5\u5b9a\u4e49\u7684\u5916\u5c42\u51fd\u6570\u53d8\u91cf\uff09\u3002 return [\u8868\u8fbe\u5f0f] \u7ed3\u675f\u51fd\u6570\uff0c\u9009\u62e9\u6027\u5730\u8fd4\u56de\u4e00\u4e2a\u503c\u7ed9\u8c03\u7528\u65b9\uff0c\u4e0d\u5e26\u8868\u8fbe\u5f0f\u7684 return \u76f8\u5f53\u4e8e\u8fd4\u56de None\u3002 1.2 \u51fd\u6570\u5b9a\u4e49\u8be6\u89e3 \u00b6 \u51fd\u6570\u5b9a\u4e49\u652f\u6301\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\u3002 1.2.1 \u9ed8\u8ba4\u53c2\u6570 \u00b6 \u9ed8\u8ba4\u53c2\u6570\uff1a\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u4f20\u9012\u53c2\u6570\uff0c\u5219\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u3002 def studentinfo ( name , age , address = '\u9655\u897f' ): '''\u53ea\u662f\u6253\u5370\u4e0b\u5b66\u751f\u7684\u76f8\u5173\u4fe1\u606f''' print ( f '\u6211\u662f { name } \uff0c { age } \u5c81\u4e86,\u6765\u81ea { address } \u3002' ) # \u8c03\u7528\u51fd\u6570 studentinfo ( '\u5c0f\u738b' , 18 , '\u4e0a\u6d77' ) # \u66f4\u6539\u9ed8\u8ba4\u503c studentinfo ( '\u5c0f\u5f20' , 20 ) # \u4f7f\u7528\u9ed8\u8ba4\u503c # \u8f93\u51fa\u7ed3\u679c # \u6211\u662f\u5c0f\u738b\uff0c18\u5c81\u4e86,\u6765\u81ea\u4e0a\u6d77\u3002 # \u6211\u662f\u5c0f\u5f20\uff0c20\u5c81\u4e86,\u6765\u81ea\u9655\u897f\u3002 \u91cd\u8981\u8b66\u544a\uff1a \u9ed8\u8ba4\u503c\u53ea\u8ba1\u7b97\u4e00\u6b21\u3002\u9ed8\u8ba4\u503c\u4e3a\u5217\u8868\u3001\u5b57\u5178\u6216\u7c7b\u5b9e\u4f8b\u7b49\u53ef\u53d8\u5bf9\u8c61\u65f6\uff0c\u4f1a\u4ea7\u751f\u4e0e\u8be5\u89c4\u5219\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u51fd\u6570\u4f1a\u7d2f\u79ef\u540e\u7eed\u8c03\u7528\u65f6\u4f20\u9012\u7684\u53c2\u6570\uff1a def f ( a , L = []): L . append ( a ) return L # \u8c03\u7528\u51fd\u6570\u53ca\u8f93\u51fa\u7ed3\u679c f ( 1 ) # [1] f ( 2 ) # [1,2] f ( 3 ) # [1,2,3] \u4e0d\u60f3\u5728\u540e\u7eed\u8c03\u7528\u4e4b\u95f4\u5171\u4eab\u9ed8\u8ba4\u503c\u65f6\uff0c\u5e94\u4ee5\u5982\u4e0b\u65b9\u5f0f\u7f16\u5199\u51fd\u6570\uff1a def f ( a , L = None ): if L is None : L = [] L . append ( a ) return L 1.2.2 \u5173\u952e\u5b57\u53c2\u6570 \u00b6 kwarg=value \u5f62\u5f0f\u7684 \u5173\u952e\u5b57\u53c2\u6570 \u4e5f\u53ef\u4ee5\u7528\u4e8e\u8c03\u7528\u51fd\u6570\u3002\u51fd\u6570\u793a\u4f8b\u5982\u4e0b\uff1a def parrot ( voltage , state = 'a stiff' , action = 'voom' , type = 'Norwegian Blue' ): print ( \"-- This parrot wouldn't\" , action , end = ' ' ) print ( \"if you put\" , voltage , \"volts through it.\" ) print ( \"-- Lovely plumage, the\" , type ) print ( \"-- It's\" , state , \"!\" ) \u8be5\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u5fc5\u9009\u53c2\u6570\uff08 voltage \uff09\u548c\u4e09\u4e2a\u53ef\u9009\u53c2\u6570\uff08 state , action \u548c type \uff09\u3002\u8be5\u51fd\u6570\u53ef\u7528\u4e0b\u5217\u65b9\u5f0f\u8c03\u7528\uff1a parrot ( 1000 ) # 1 positional argument parrot ( voltage = 1000 ) # 1 keyword argument parrot ( voltage = 1000000 , action = 'VOOOOOM' ) # 2 keyword arguments parrot ( action = 'VOOOOOM' , voltage = 1000000 ) # 2 keyword arguments parrot ( 'a million' , 'bereft of life' , 'jump' ) # 3 positional arguments parrot ( 'a thousand' , state = 'pushing up the daisies' ) # 1 positional, 1 keyword \u4ee5\u4e0b\u8c03\u7528\u51fd\u6570\u7684\u65b9\u5f0f\u90fd\u65e0\u6548\uff1a parrot () # required argument missing parrot ( voltage = 5.0 , 'dead' ) # non-keyword argument after a keyword argument parrot ( 110 , voltage = 220 ) # duplicate value for the same argument parrot ( actor = 'John Cleese' ) # unknown keyword argument \u51fd\u6570\u8c03\u7528\u65f6\uff0c \u5173\u952e\u5b57\u53c2\u6570\u5fc5\u987b\u8ddf\u5728\u4f4d\u7f6e\u53c2\u6570\u540e\u9762 \u3002\u6240\u6709\u4f20\u9012\u7684\u5173\u952e\u5b57\u53c2\u6570\u90fd\u5fc5\u987b\u5339\u914d\u4e00\u4e2a\u51fd\u6570\u63a5\u53d7\u7684\u53c2\u6570\uff08\u6bd4\u5982\uff0c actor \u4e0d\u662f\u51fd\u6570 parrot \u7684\u6709\u6548\u53c2\u6570\uff09\uff0c \u5173\u952e\u5b57\u53c2\u6570\u7684\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981 \u3002 1.2.3 \u4e0d\u5b9a\u957f\u53c2\u6570 \u00b6 \u4f60\u53ef\u80fd\u9700\u8981\u4e00\u4e2a\u51fd\u6570\u80fd\u5904\u7406\u6bd4\u5f53\u521d\u58f0\u660e\u65f6\u66f4\u591a\u7684\u53c2\u6570\u3002\u8fd9\u4e9b\u53c2\u6570\u53eb\u505a\u4e0d\u5b9a\u957f\u53c2\u6570\uff0c\u548c\u4e0a\u8ff0 2 \u79cd\u53c2\u6570\u4e0d\u540c\uff0c\u58f0\u660e\u65f6\u4e0d\u4f1a\u547d\u540d\u3002 \u5f62\u53c2\u4e3a **name \u5f62\u5f0f\u65f6\uff0c\u63a5\u6536\u4e00\u4e2a\u5b57\u5178\uff08\u8be6\u89c1 \u6620\u5c04\u7c7b\u578b --- dict \uff09\uff0c\u8be5\u5b57\u5178\u5305\u542b\u4e0e\u51fd\u6570\u4e2d\u5df2\u5b9a\u4e49\u5f62\u53c2\u5bf9\u5e94\u4e4b\u5916\u7684\u6240\u6709\u5173\u952e\u5b57\u53c2\u6570\u3002 *name \u5f62\u53c2\u63a5\u6536\u4e00\u4e2a \u5143\u7ec4 \uff0c\u8be5\u5143\u7ec4\u5305\u542b\u5f62\u53c2\u5217\u8868\u4e4b\u5916\u7684\u4f4d\u7f6e\u53c2\u6570\u3002 **name \u5f62\u53c2\u53ef\u4ee5\u4e0e *name \u5f62\u53c2\u7ec4\u5408\u4f7f\u7528\uff08 *name \u5fc5\u987b\u5728 **name \u524d\u9762\uff09\uff0c \u4f8b\u5982\uff0c\u53ef\u4ee5\u5b9a\u4e49\u4e0b\u9762\u8fd9\u6837\u7684\u51fd\u6570\uff1a def cheeseshop ( kind , * arguments , ** keywords ): print ( \"-- Do you have any\" , kind , \"?\" ) print ( \"-- I'm sorry, we're all out of\" , kind ) for arg in arguments : print ( arg ) print ( \"-\" * 40 ) for kw in keywords : print ( kw , \":\" , keywords [ kw ]) # \u8be5\u51fd\u6570\u53ef\u4ee5\u7528\u5982\u4e0b\u65b9\u5f0f\u8c03\u7528 cheeseshop ( \"Limburger\" , \"It's very runny, sir.\" , \"It's really very, VERY runny, sir.\" , shopkeeper = \"Michael Palin\" , client = \"John Cleese\" , sketch = \"Cheese Shop Sketch\" ) \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a -- Do you have any Limburger ? -- I 'm sorry, we' re all out of Limburger It 's very runny, sir. It 's really very, VERY runny, sir. ---------------------------------------- shopkeeper : Michael Palin client : John Cleese sketch : Cheese Shop Sketch # \u6ce8\u610f\uff0c\u5173\u952e\u5b57\u53c2\u6570\u5728\u8f93\u51fa\u7ed3\u679c\u4e2d\u7684\u987a\u5e8f\u4e0e\u8c03\u7528\u51fd\u6570\u65f6\u7684\u987a\u5e8f\u4e00\u81f4\u3002 1.2.4 \u7279\u6b8a\u53c2\u6570 \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53c2\u6570\u53ef\u4ee5\u6309\u4f4d\u7f6e\u6216\u663e\u5f0f\u5173\u952e\u5b57\u4f20\u9012\u7ed9 Python \u51fd\u6570\u3002\u4e3a\u4e86\u8ba9\u4ee3\u7801\u6613\u8bfb\u3001\u9ad8\u6548\uff0c\u6700\u597d\u9650\u5236\u53c2\u6570\u7684\u4f20\u9012\u65b9\u5f0f\uff0c\u8fd9\u6837\uff0c\u5f00\u53d1\u8005\u53ea\u9700\u67e5\u770b\u51fd\u6570\u5b9a\u4e49\uff0c\u5373\u53ef\u786e\u5b9a\u53c2\u6570\u9879\u662f\u4ec5\u6309\u4f4d\u7f6e\u3001\u6309\u4f4d\u7f6e\u6216\u5173\u952e\u5b57\uff0c\u8fd8\u662f\u4ec5\u6309\u5173\u952e\u5b57\u4f20\u9012\u3002 \u51fd\u6570\u5b9a\u4e49\u5982\u4e0b\uff1a def f ( pos1 , pos2 , / , pos_or_kwd , * , kwd1 , kwd2 ): ----------- ---------- ---------- | | | | Positional or keyword | | - Keyword only -- Positional only / \u548c * \u662f\u53ef\u9009\u7684\u3002\u8fd9\u4e9b\u7b26\u53f7\u8868\u660e\u5f62\u53c2\u5982\u4f55\u628a\u53c2\u6570\u503c\u4f20\u9012\u7ed9\u51fd\u6570\uff1a\u4f4d\u7f6e\u3001\u4f4d\u7f6e\u6216\u5173\u952e\u5b57\u3001\u5173\u952e\u5b57\u3002\u5173\u952e\u5b57\u5f62\u53c2\u4e5f\u53eb\u4f5c\u547d\u540d\u5f62\u53c2\u3002 \u51fd\u6570\u5b9a\u4e49\u4e2d\u672a\u4f7f\u7528 / \u548c * \u65f6\uff0c\u53c2\u6570\u53ef\u4ee5\u6309\u4f4d\u7f6e\u6216\u5173\u952e\u5b57\u4f20\u9012\u7ed9\u51fd\u6570\u3002 \u4ec5\u9650\u4f4d\u7f6e \u65f6\uff0c\u5f62\u53c2\u7684\u987a\u5e8f\u5f88\u91cd\u8981\uff0c\u4e14\u8fd9\u4e9b\u5f62\u53c2\u4e0d\u80fd\u7528\u5173\u952e\u5b57\u4f20\u9012\u3002 \u4ec5\u9650\u4f4d\u7f6e\u5f62\u53c2\u5e94\u653e\u5728 / \uff08\u6b63\u659c\u6760\uff09\u524d \u3002 / \u7528\u4e8e\u5728\u903b\u8f91\u4e0a\u5206\u5272\u4ec5\u9650\u4f4d\u7f6e\u5f62\u53c2\u4e0e\u5176\u5b83\u5f62\u53c2\u3002\u5982\u679c\u51fd\u6570\u5b9a\u4e49\u4e2d\u6ca1\u6709 / \uff0c\u5219\u8868\u793a\u6ca1\u6709\u4ec5\u9650\u4f4d\u7f6e\u5f62\u53c2\u3002 / \u540e\u53ef\u4ee5\u662f \u4f4d\u7f6e\u6216\u5173\u952e\u5b57 \u6216 \u4ec5\u9650\u5173\u952e\u5b57 \u5f62\u53c2 \u3002 \u628a\u5f62\u53c2\u6807\u8bb0\u4e3a \u4ec5\u9650\u5173\u952e\u5b57 \uff0c\u8868\u660e\u5fc5\u987b\u4ee5\u5173\u952e\u5b57\u53c2\u6570\u5f62\u5f0f\u4f20\u9012\u8be5\u5f62\u53c2\uff0c\u5e94\u5728\u53c2\u6570\u5217\u8868\u4e2d\u7b2c\u4e00\u4e2a \u4ec5\u9650\u5173\u952e\u5b57 \u5f62\u53c2\u524d\u6dfb\u52a0 * \u3002 \u51fd\u6570\u5b9e\u4f8b\uff1a \u4ee5\u4e0b\u5b9a\u4e49\u7684 standard_arg \u51fd\u6570\u662f\u6700\u5e38\u89c1\u7684\u5f62\u5f0f\uff0c\u5bf9\u8c03\u7528\u65b9\u5f0f\u6ca1\u6709\u4efb\u4f55\u9650\u5236\uff0c\u53ef\u4ee5\u6309\u4f4d\u7f6e\u4e5f\u53ef\u4ee5\u6309\u5173\u952e\u5b57\u4f20\u9012\u53c2\u6570\uff1a def standard_arg ( arg ): print ( arg ) # \u8c03\u7528\u51fd\u6570 standard_arg ( 2 ) # 2 standard_arg ( arg = 2 ) # 2 \u5b9a\u4e49\u7684\u51fd\u6570 pos_only_arg \u4e2d\u6709 / \uff0c\u4ec5\u9650\u4f7f\u7528\u4f4d\u7f6e\u5f62\u53c2\uff1a def pos_only_arg ( arg , / ): print ( arg ) # \u8c03\u7528\u51fd\u6570 pos_only_arg ( 1 ) # 1 pos_only_arg ( arg = 1 ) # \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a ''' Traceback (most recent call last): File \"<pyshell#16>\", line 1, in <module> s(arg=1) TypeError: pos_only_arg() got some positional-only arguments passed as keyword arguments: 'arg' ''' \u51fd\u6570 kwd_only_args \u7684\u51fd\u6570\u5b9a\u4e49\u901a\u8fc7 * \u8868\u660e\u4ec5\u9650\u5173\u952e\u5b57\u53c2\u6570\uff1a def kwd_only_arg ( * , arg ): print ( arg ) # \u8c03\u7528\u51fd\u6570 kwd_only_arg ( arg = 3 ) # 3 kwd_only_arg ( 3 ) # \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a ''' Traceback (most recent call last): File \"<pyshell#21>\", line 1, in <module> kwd_only_arg(3) TypeError: kwd_only_arg() takes 0 positional arguments but 1 was given''' ' \u5b9a\u4e49\u7684\u51fd\u6570 combined_example \u4f7f\u7528\u4e86\u5168\u90e8\u4e09\u79cd\u8c03\u7528\u65b9\u5f0f\uff1a def combined_example ( pos_only , / , standard , * , kwd_only ): print ( pos_only , standard , kwd_only ) # \u8c03\u7528\u51fd\u6570 combined_example ( 1 , 2 , 3 ) # \u62a5\u9519\uff1atakes 2 positional arguments but 3 were given combined_example ( 1 , 2 , kwd_only = 3 ) # 1 2 3 combined_example ( 1 , standard = 2 , kwd_only = 3 ) # 1 2 3 combined_example ( pos_only = 1 , standard = 2 , kwd_only = 3 ) # \u62a5\u9519\uff1apos_only\u5173\u952e\u5b57\u53c2\u6570\u65e0\u6cd5\u8bc6\u522b 1.2.5 \u5c0f\u7ed3 \u00b6 \u4ee5\u4e0b\u7528\u4f8b\u51b3\u5b9a\u54ea\u4e9b\u5f62\u53c2\u53ef\u4ee5\u7528\u4e8e\u51fd\u6570\u5b9a\u4e49\uff1a def f ( pos1 , pos2 , / , pos_or_kwd , * , kwd1 , kwd2 ): \u8bf4\u660e\uff1a \u4f7f\u7528\u4ec5\u9650\u4f4d\u7f6e\u5f62\u53c2\uff0c\u53ef\u4ee5\u8ba9\u7528\u6237\u65e0\u6cd5\u4f7f\u7528\u5f62\u53c2\u540d\u3002\u5f62\u53c2\u540d\u6ca1\u6709\u5b9e\u9645\u610f\u4e49\u65f6\uff0c\u5f3a\u5236\u8c03\u7528\u51fd\u6570\u7684\u5b9e\u53c2\u987a\u5e8f\u65f6\uff0c\u6216\u540c\u65f6\u63a5\u6536\u4f4d\u7f6e\u5f62\u53c2\u548c\u5173\u952e\u5b57\u65f6\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5f88\u6709\u7528\u3002 \u5f53\u5f62\u53c2\u540d\u6709\u5b9e\u9645\u610f\u4e49\uff0c\u4e14\u663e\u5f0f\u540d\u79f0\u53ef\u4ee5\u8ba9\u51fd\u6570\u5b9a\u4e49\u66f4\u6613\u7406\u89e3\u65f6\uff0c\u963b\u6b62\u7528\u6237\u4f9d\u8d56\u4f20\u9012\u5b9e\u53c2\u7684\u4f4d\u7f6e\u65f6\uff0c\u624d\u4f7f\u7528\u5173\u952e\u5b57\u3002 \u5bf9\u4e8e API\uff0c\u4f7f\u7528\u4ec5\u9650\u4f4d\u7f6e\u5f62\u53c2\uff0c\u53ef\u4ee5\u9632\u6b62\u672a\u6765\u4fee\u6539\u5f62\u53c2\u540d\u65f6\u9020\u6210\u7834\u574f\u6027\u7684 API \u53d8\u52a8\u3002 1.2.6 \u4efb\u610f\u5b9e\u53c2\u5217\u8868 \u00b6 \u8c03\u7528\u51fd\u6570\u65f6\uff0c\u4f7f\u7528\u4efb\u610f\u6570\u91cf\u7684\u5b9e\u53c2\u662f\u6700\u5c11\u89c1\u7684\u9009\u9879\u3002\u8fd9\u4e9b\u5b9e\u53c2\u5305\u542b\u5728\u5143\u7ec4\u4e2d\uff08\u8be6\u89c1 \u5143\u7ec4\u548c\u5e8f\u5217 \uff09\u3002\u5728\u53ef\u53d8\u6570\u91cf\u7684\u5b9e\u53c2\u4e4b\u524d\uff0c\u53ef\u80fd\u6709\u82e5\u5e72\u4e2a\u666e\u901a\u53c2\u6570\uff1a def write_multiple_items ( file , separator , * args ): file . write ( separator . join ( args )) variadic \u5b9e\u53c2\u7528\u4e8e\u91c7\u96c6\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u6240\u6709\u5269\u4f59\u5b9e\u53c2\uff0c\u56e0\u6b64\uff0c\u5b83\u4eec\u901a\u5e38\u5728\u5f62\u53c2\u5217\u8868\u7684\u672b\u5c3e\u3002 *args \u5f62\u53c2\u540e\u7684\u4efb\u4f55\u5f62\u5f0f\u53c2\u6570\u53ea\u80fd\u662f\u4ec5\u9650\u5173\u952e\u5b57\u53c2\u6570\uff0c\u5373\u53ea\u80fd\u7528\u4f5c\u5173\u952e\u5b57\u53c2\u6570\uff0c\u4e0d\u80fd\u7528\u4f5c\u4f4d\u7f6e\u53c2\u6570\uff1a def concat ( * args , sep = \"/\" ): return sep . join ( args ) # \u8c03\u7528\u51fd\u6570 concat ( \"earth\" , \"mars\" , \"venus\" ) # 'earth/mars/venus' concat ( \"earth\" , \"mars\" , \"venus\" , sep = \".\" ) # 'earth.mars.venus' 1.2.7 \u89e3\u5305\u5b9e\u53c2\u5217\u8868 \u00b6 \u51fd\u6570\u8c03\u7528\u8981\u6c42\u72ec\u7acb\u7684\u4f4d\u7f6e\u53c2\u6570\uff0c\u4f46\u5b9e\u53c2\u5728\u5217\u8868\u6216\u5143\u7ec4\u91cc\u65f6\uff0c\u8981\u6267\u884c\u76f8\u53cd\u7684\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u5185\u7f6e\u7684 range() \u51fd\u6570\u8981\u6c42\u72ec\u7acb\u7684 start \u548c stop \u5b9e\u53c2\u3002\u5982\u679c\u8fd9\u4e9b\u53c2\u6570\u4e0d\u662f\u72ec\u7acb\u7684\uff0c\u5219\u8981\u5728\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u7528 * \u64cd\u4f5c\u7b26\u628a\u5b9e\u53c2\u4ece\u5217\u8868\u6216\u5143\u7ec4\u89e3\u5305\u51fa\u6765\uff1a list ( range ( 3 , 6 )) # normal call with separate arguments [3, 4, 5] args = [ 3 , 6 ] list ( range ( * args )) # call with arguments unpacked from a list [3, 4, 5] \u540c\u6837\uff0c\u5b57\u5178\u53ef\u4ee5\u7528 ** \u64cd\u4f5c\u7b26\u4f20\u9012\u5173\u952e\u5b57\u53c2\u6570\uff1a def parrot ( voltage , state = 'a stiff' , action = 'voom' ): print ( \"-- This parrot wouldn't\" , action , end = ' ' ) print ( \"if you put\" , voltage , \"volts through it.\" , end = ' ' ) print ( \"E's\" , state , \"!\" ) d = { \"voltage\" : \"four million\" , \"state\" : \"bleedin' demised\" , \"action\" : \"VOOM\" } # \u8c03\u7528\u51fd\u6570 parrot ( ** d ) ''' -- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !''' 1.2.8 Lambda \u8868\u8fbe\u5f0f \u00b6 lambda \u5173\u952e\u5b57\u7528\u4e8e\u521b\u5efa\u5c0f\u5de7\u7684\u533f\u540d\u51fd\u6570\u3002 lambda a, b: a+b \u51fd\u6570\u8fd4\u56de\u4e24\u4e2a\u53c2\u6570\u7684\u548c\u3002Lambda \u51fd\u6570\u53ef\u7528\u4e8e\u4efb\u4f55\u9700\u8981\u51fd\u6570\u5bf9\u8c61\u7684\u5730\u65b9\u3002\u5728\u8bed\u6cd5\u4e0a\uff0c\u533f\u540d\u51fd\u6570\u53ea\u80fd\u662f\u5355\u4e2a\u8868\u8fbe\u5f0f\u3002\u5728\u8bed\u4e49\u4e0a\uff0c\u5b83\u53ea\u662f\u5e38\u89c4\u51fd\u6570\u5b9a\u4e49\u7684\u8bed\u6cd5\u7cd6\u3002\u4e0e\u5d4c\u5957\u51fd\u6570\u5b9a\u4e49\u4e00\u6837\uff0clambda \u51fd\u6570\u53ef\u4ee5\u5f15\u7528\u5305\u542b\u4f5c\u7528\u57df\u4e2d\u7684\u53d8\u91cf\uff1a def make_incrementor ( n ): return lambda x : x + n f = make_incrementor ( 42 ) f ( 0 ) # 42 f ( 1 ) # 43 \u4e0a\u4f8b\u7528 lambda \u8868\u8fbe\u5f0f\u8fd4\u56de\u51fd\u6570\u3002\u8fd8\u53ef\u4ee5\u628a\u533f\u540d\u51fd\u6570\u7528\u4f5c\u4f20\u9012\u7684\u5b9e\u53c2\uff1a pairs = [( 1 , 'one' ), ( 2 , 'two' ), ( 3 , 'three' ), ( 4 , 'four' )] pairs . sort ( key = lambda pair : pair [ 1 ]) pairs # [(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')] 1.2.9 \u6587\u6863\u5b57\u7b26\u4e32 \u00b6 \u4ee5\u4e0b\u662f\u6587\u6863\u5b57\u7b26\u4e32\u5185\u5bb9\u548c\u683c\u5f0f\u7684\u7ea6\u5b9a\u3002 \u7b2c\u4e00\u884c\u5e94\u4e3a\u5bf9\u8c61\u7528\u9014\u7684\u7b80\u77ed\u6458\u8981\u3002\u4e3a\u4fdd\u6301\u7b80\u6d01\uff0c\u4e0d\u8981\u5728\u8fd9\u91cc\u663e\u5f0f\u8bf4\u660e\u5bf9\u8c61\u540d\u6216\u7c7b\u578b\uff0c\u56e0\u4e3a\u53ef\u901a\u8fc7\u5176\u4ed6\u65b9\u5f0f\u83b7\u53d6\u8fd9\u4e9b\u4fe1\u606f\uff08\u9664\u975e\u8be5\u540d\u79f0\u78b0\u5de7\u662f\u63cf\u8ff0\u51fd\u6570\u64cd\u4f5c\u7684\u52a8\u8bcd\uff09\u3002\u8fd9\u4e00\u884c\u5e94\u4ee5\u5927\u5199\u5b57\u6bcd\u5f00\u5934\uff0c\u4ee5\u53e5\u70b9\u7ed3\u5c3e\u3002 \u6587\u6863\u5b57\u7b26\u4e32\u4e3a\u591a\u884c\u65f6\uff0c\u7b2c\u4e8c\u884c\u5e94\u4e3a\u7a7a\u767d\u884c\uff0c\u5728\u89c6\u89c9\u4e0a\u5c06\u6458\u8981\u4e0e\u5176\u4f59\u63cf\u8ff0\u5206\u5f00\u3002\u540e\u9762\u7684\u884c\u53ef\u5305\u542b\u82e5\u5e72\u6bb5\u843d\uff0c\u63cf\u8ff0\u5bf9\u8c61\u7684\u8c03\u7528\u7ea6\u5b9a\u3001\u526f\u4f5c\u7528\u7b49\u3002 Python \u89e3\u6790\u5668\u4e0d\u4f1a\u5220\u9664 Python \u4e2d\u591a\u884c\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u7684\u7f29\u8fdb\uff0c\u56e0\u6b64\uff0c\u6587\u6863\u5904\u7406\u5de5\u5177\u5e94\u5728\u5fc5\u8981\u65f6\u5220\u9664\u7f29\u8fdb\u3002\u8fd9\u9879\u64cd\u4f5c\u9075\u5faa\u4ee5\u4e0b\u7ea6\u5b9a\uff1a \u6587\u6863\u5b57\u7b26\u4e32\u7b2c\u4e00\u884c \u4e4b\u540e \u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u884c\u51b3\u5b9a\u4e86\u6574\u4e2a\u6587\u6863\u5b57\u7b26\u4e32\u7684\u7f29\u8fdb\u91cf\uff08\u7b2c\u4e00\u884c\u901a\u5e38\u4e0e\u5b57\u7b26\u4e32\u5f00\u5934\u7684\u5f15\u53f7\u76f8\u90bb\uff0c\u5176\u7f29\u8fdb\u5728\u5b57\u7b26\u4e32\u4e2d\u5e76\u4e0d\u660e\u663e\uff0c\u56e0\u6b64\uff0c\u4e0d\u80fd\u7528\u7b2c\u4e00\u884c\u7684\u7f29\u8fdb\uff09\uff0c\u7136\u540e\uff0c\u5220\u9664\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u884c\u5f00\u5934\u5904\u4e0e\u6b64\u7f29\u8fdb\u201c\u7b49\u4ef7\u201d\u7684\u7a7a\u767d\u7b26 \u3002\u4e0d\u80fd\u6709\u6bd4\u6b64\u7f29\u8fdb\u66f4\u5c11\u7684\u884c\uff0c\u4f46\u5982\u679c\u51fa\u73b0\u4e86\u7f29\u8fdb\u66f4\u5c11\u7684\u884c\uff0c\u5e94\u5220\u9664\u8fd9\u4e9b\u884c\u7684\u6240\u6709\u524d\u5bfc\u7a7a\u767d\u7b26\u3002\u8f6c\u5316\u5236\u8868\u7b26\u540e\uff08\u901a\u5e38\u4e3a 8 \u4e2a\u7a7a\u683c\uff09\uff0c\u5e94\u6d4b\u8bd5\u7a7a\u767d\u7b26\u7684\u7b49\u6548\u6027\u3002 \u4e0b\u9762\u662f\u591a\u884c\u6587\u6863\u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a def my_function (): \"\"\"Do nothing, but document it. No, really, it doesn't do anything. \"\"\" pass print ( my_function . __doc__ ) # Do nothing, but document it. # No, really, it doesn't do anything. 1.2.10 \u51fd\u6570\u6ce8\u89e3 \u00b6 \u51fd\u6570\u6ce8\u89e3 \u662f\u53ef\u9009\u7684\u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570\u7c7b\u578b\u7684\u5143\u6570\u636e\u5b8c\u6574\u4fe1\u606f\uff08\u8be6\u89c1 PEP 3107 \u548c PEP 484 \uff09\u3002 \u6807\u6ce8 \u4ee5\u5b57\u5178\u7684\u5f62\u5f0f\u5b58\u653e\u5728\u51fd\u6570\u7684 __annotations__ \u5c5e\u6027\u4e2d\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5f71\u54cd\u51fd\u6570\u7684\u4efb\u4f55\u5176\u4ed6\u90e8\u5206\u3002 \u5f62\u53c2\u6807\u6ce8\u7684\u5b9a\u4e49\u65b9\u5f0f\u662f\u5728\u5f62\u53c2\u540d\u540e\u52a0\u5192\u53f7\uff0c\u540e\u9762\u8ddf\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u8be5\u8868\u8fbe\u5f0f\u4f1a\u88ab\u6c42\u503c\u4e3a\u6807\u6ce8\u7684\u503c\u3002 \u8fd4\u56de\u503c\u6807\u6ce8\u7684\u5b9a\u4e49\u65b9\u5f0f\u662f\u52a0\u7ec4\u5408\u7b26\u53f7 -> \uff0c\u540e\u9762\u8ddf\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u8be5\u6807\u6ce8\u4f4d\u4e8e\u5f62\u53c2\u5217\u8868\u548c\u8868\u793a def \u8bed\u53e5\u7ed3\u675f\u7684\u5192\u53f7\u4e4b\u95f4\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u6709\u4e00\u4e2a\u5fc5\u987b\u7684\u53c2\u6570\uff0c\u4e00\u4e2a\u53ef\u9009\u7684\u5173\u952e\u5b57\u53c2\u6570\u4ee5\u53ca\u8fd4\u56de\u503c\u90fd\u5e26\u6709\u76f8\u5e94\u7684\u6807\u6ce8: def f ( ham : str , eggs : str = 'eggs' ) -> str : print ( \"Annotations:\" , f . __annotations__ ) print ( \"Arguments:\" , ham , eggs ) return ham + ' and ' + eggs f ( 'spam' ) ''' Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>} Arguments: spam eggs 'spam and eggs' ''' \u51fd\u6570\u6807\u6ce8\u901a\u5e38\u7528\u4e8e \u7c7b\u578b\u63d0\u793a \uff1a\u4f8b\u5982\u4ee5\u4e0b\u51fd\u6570\u9884\u671f\u63a5\u53d7\u4e24\u4e2a int \u53c2\u6570\u5e76\u9884\u671f\u8fd4\u56de\u4e00\u4e2a int \u503c: def sum_two_numbers ( a : int , b : int ) -> int : return a + b 1.3 \u7f16\u7801\u98ce\u683c \u00b6 Python \u9879\u76ee\u5927\u591a\u90fd\u9075\u5faa PEP 8 \u7684\u98ce\u683c\u6307\u5357\uff1b\u5b83\u63a8\u884c\u7684\u7f16\u7801\u98ce\u683c\u6613\u4e8e\u9605\u8bfb\u3001\u8d4f\u5fc3\u60a6\u76ee\u3002Python \u5f00\u53d1\u8005\u5747\u5e94\u62bd\u65f6\u95f4\u6089\u5fc3\u7814\u8bfb\uff1b\u4ee5\u4e0b\u662f\u8be5\u63d0\u6848\u4e2d\u7684\u6838\u5fc3\u8981\u70b9\uff1a \u7f29\u8fdb\uff0c\u7528 4 \u4e2a\u7a7a\u683c\uff0c\u4e0d\u8981\u7528\u5236\u8868\u7b26\u3002 4 \u4e2a\u7a7a\u683c\u662f\u5c0f\u7f29\u8fdb\uff08\u66f4\u6df1\u5d4c\u5957\uff09\u548c\u5927\u7f29\u8fdb\uff08\u66f4\u6613\u9605\u8bfb\uff09\u4e4b\u95f4\u7684\u6298\u4e2d\u65b9\u6848\u3002\u5236\u8868\u7b26\u4f1a\u5f15\u8d77\u6df7\u4e71\uff0c\u6700\u597d\u522b\u7528\u3002 \u6362\u884c\uff0c\u4e00\u884c\u4e0d\u8d85\u8fc7 79 \u4e2a\u5b57\u7b26\u3002 \u8fd9\u6837\u6362\u884c\u7684\u5c0f\u5c4f\u9605\u8bfb\u4f53\u9a8c\u66f4\u597d\uff0c\u8fd8\u4fbf\u4e8e\u5728\u5927\u5c4f\u663e\u793a\u5668\u4e0a\u5e76\u6392\u9605\u8bfb\u591a\u4e2a\u4ee3\u7801\u6587\u4ef6\u3002 \u7528\u7a7a\u884c\u5206\u9694\u51fd\u6570\u548c\u7c7b\uff0c\u53ca\u51fd\u6570\u5185\u8f83\u5927\u7684\u4ee3\u7801\u5757\u3002 \u6700\u597d\u628a\u6ce8\u91ca\u653e\u5230\u5355\u72ec\u4e00\u884c\u3002 \u4f7f\u7528\u6587\u6863\u5b57\u7b26\u4e32\u3002 \u8fd0\u7b97\u7b26\u524d\u540e\u3001\u9017\u53f7\u540e\u8981\u7528\u7a7a\u683c\uff0c\u4f46\u4e0d\u8981\u76f4\u63a5\u5728\u62ec\u53f7\u5185\u4f7f\u7528\uff1a a = f(1, 2) + g(3, 4) \u3002 \u7c7b\u548c\u51fd\u6570\u7684\u547d\u540d\u8981\u4e00\u81f4\uff1b\u6309\u60ef\u4f8b\uff0c\u547d\u540d\u7c7b\u7528 UpperCamelCase \uff0c\u547d\u540d\u51fd\u6570\u4e0e\u65b9\u6cd5\u7528 lowercase_with_underscores \u3002\u547d\u540d\u65b9\u6cd5\u4e2d\u7b2c\u4e00\u4e2a\u53c2\u6570\u603b\u662f\u7528 self (\u7c7b\u548c\u65b9\u6cd5\u8be6\u89c1 \u521d\u63a2\u7c7b )\u3002 \u7f16\u5199\u7528\u4e8e\u56fd\u9645\u591a\u8bed\u73af\u5883\u7684\u4ee3\u7801\u65f6\uff0c\u4e0d\u8981\u7528\u751f\u50fb\u7684\u7f16\u7801\u3002Python \u9ed8\u8ba4\u7684 UTF-8 \u6216\u7eaf ASCII \u53ef\u4ee5\u80dc\u4efb\u5404\u79cd\u60c5\u51b5\u3002 \u540c\u7406\uff0c\u5c31\u7b97\u591a\u8bed\u9605\u8bfb\u3001\u7ef4\u62a4\u4ee3\u7801\u7684\u53ef\u80fd\u518d\u5c0f\uff0c\u4e5f\u4e0d\u8981\u5728\u6807\u8bc6\u7b26\u4e2d\u4f7f\u7528\u975e ASCII \u5b57\u7b26\u3002","title":"\u51fd\u6570"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0/#_1","text":"","title":"\u51fd\u6570"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0/#11","text":"Python\u9664\u4e86\u63d0\u4f9b\u8bb8\u591a\u5185\u7f6e\u51fd\u6570\u5916\uff0c\u8fd8\u5141\u8bb8\u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570\uff1b\u81ea\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u57fa\u672c\u8bed\u6cd5\uff1a def \u51fd\u6570\u540d ( \u53c2\u6570 ): \u51fd\u6570\u4f53 \u51fd\u6570\u4ee3\u7801\u5757\u4ee5 def \u5173\u952e\u8bcd\u5f00\u5934\uff0c\u540e\u63a5\u51fd\u6570\u6807\u8bc6\u7b26\u540d\u79f0\u548c\u5706\u62ec\u53f7 () \u3002 \u4efb\u4f55\u4f20\u5165\u53c2\u6570\u548c\u81ea\u53d8\u91cf\u5fc5\u987b\u653e\u5728\u5706\u62ec\u53f7\u4e2d\u95f4\uff0c\u5706\u62ec\u53f7\u4e4b\u95f4\u53ef\u4ee5\u7528\u4e8e\u5b9a\u4e49\u53c2\u6570\u3002 \u51fd\u6570\u5185\u5bb9\u4ee5\u5192\u53f7 : \u8d77\u59cb\uff0c\u5e76\u4e14\u7f29\u8fdb\u3002 \u51fd\u6570\u5185\u7684\u7b2c\u4e00\u6761\u8bed\u53e5\u662f\u5b57\u7b26\u4e32\u65f6\uff0c\u8be5\u5b57\u7b26\u4e32\u5c31\u662f\u6587\u6863\u5b57\u7b26\u4e32\uff0c\u4e5f\u79f0\u4e3a docstring \uff0c\u8be6\u89c1 \u6587\u6863\u5b57\u7b26\u4e32 \u3002\u5229\u7528\u6587\u6863\u5b57\u7b26\u4e32\u53ef\u4ee5\u81ea\u52a8\u751f\u6210\u5728\u7ebf\u6587\u6863\u6216\u6253\u5370\u7248\u6587\u6863\uff0c\u8fd8\u53ef\u4ee5\u8ba9\u5f00\u53d1\u8005\u5728\u6d4f\u89c8\u4ee3\u7801\u65f6\u76f4\u63a5\u67e5\u9605\u6587\u6863\uff1bPython \u5f00\u53d1\u8005\u6700\u597d\u517b\u6210\u5728\u4ee3\u7801\u4e2d\u52a0\u5165\u6587\u6863\u5b57\u7b26\u4e32\u7684\u597d\u4e60\u60ef\u3002 \u51fd\u6570\u5728 \u6267\u884c \u65f6\u4f7f\u7528\u51fd\u6570\u5c40\u90e8\u53d8\u91cf\u7b26\u53f7\u8868\uff0c\u6240\u6709\u51fd\u6570\u53d8\u91cf\u8d4b\u503c\u90fd\u5b58\u5728\u5c40\u90e8\u7b26\u53f7\u8868\u4e2d\uff1b\u5f15\u7528\u53d8\u91cf\u65f6\uff0c\u9996\u5148\uff0c\u5728\u5c40\u90e8\u7b26\u53f7\u8868\u91cc\u67e5\u627e\u53d8\u91cf\uff0c\u7136\u540e\uff0c\u662f\u5916\u5c42\u51fd\u6570\u5c40\u90e8\u7b26\u53f7\u8868\uff0c\u518d\u662f\u5168\u5c40\u7b26\u53f7\u8868\uff0c\u6700\u540e\u662f\u5185\u7f6e\u540d\u79f0\u7b26\u53f7\u8868\u3002\u56e0\u6b64\uff0c\u5c3d\u7ba1\u53ef\u4ee5\u5f15\u7528\u5168\u5c40\u53d8\u91cf\u548c\u5916\u5c42\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u4f46\u6700\u597d\u4e0d\u8981\u5728\u51fd\u6570\u5185\u76f4\u63a5\u8d4b\u503c\uff08\u9664\u975e\u662f global \u8bed\u53e5\u5b9a\u4e49\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u6216 nonlocal \u8bed\u53e5\u5b9a\u4e49\u7684\u5916\u5c42\u51fd\u6570\u53d8\u91cf\uff09\u3002 return [\u8868\u8fbe\u5f0f] \u7ed3\u675f\u51fd\u6570\uff0c\u9009\u62e9\u6027\u5730\u8fd4\u56de\u4e00\u4e2a\u503c\u7ed9\u8c03\u7528\u65b9\uff0c\u4e0d\u5e26\u8868\u8fbe\u5f0f\u7684 return \u76f8\u5f53\u4e8e\u8fd4\u56de None\u3002","title":"1.1 \u5b9a\u4e49\u51fd\u6570"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0/#12","text":"\u51fd\u6570\u5b9a\u4e49\u652f\u6301\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\u3002","title":"1.2 \u51fd\u6570\u5b9a\u4e49\u8be6\u89e3"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0/#121","text":"\u9ed8\u8ba4\u53c2\u6570\uff1a\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u4f20\u9012\u53c2\u6570\uff0c\u5219\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u3002 def studentinfo ( name , age , address = '\u9655\u897f' ): '''\u53ea\u662f\u6253\u5370\u4e0b\u5b66\u751f\u7684\u76f8\u5173\u4fe1\u606f''' print ( f '\u6211\u662f { name } \uff0c { age } \u5c81\u4e86,\u6765\u81ea { address } \u3002' ) # \u8c03\u7528\u51fd\u6570 studentinfo ( '\u5c0f\u738b' , 18 , '\u4e0a\u6d77' ) # \u66f4\u6539\u9ed8\u8ba4\u503c studentinfo ( '\u5c0f\u5f20' , 20 ) # \u4f7f\u7528\u9ed8\u8ba4\u503c # \u8f93\u51fa\u7ed3\u679c # \u6211\u662f\u5c0f\u738b\uff0c18\u5c81\u4e86,\u6765\u81ea\u4e0a\u6d77\u3002 # \u6211\u662f\u5c0f\u5f20\uff0c20\u5c81\u4e86,\u6765\u81ea\u9655\u897f\u3002 \u91cd\u8981\u8b66\u544a\uff1a \u9ed8\u8ba4\u503c\u53ea\u8ba1\u7b97\u4e00\u6b21\u3002\u9ed8\u8ba4\u503c\u4e3a\u5217\u8868\u3001\u5b57\u5178\u6216\u7c7b\u5b9e\u4f8b\u7b49\u53ef\u53d8\u5bf9\u8c61\u65f6\uff0c\u4f1a\u4ea7\u751f\u4e0e\u8be5\u89c4\u5219\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u51fd\u6570\u4f1a\u7d2f\u79ef\u540e\u7eed\u8c03\u7528\u65f6\u4f20\u9012\u7684\u53c2\u6570\uff1a def f ( a , L = []): L . append ( a ) return L # \u8c03\u7528\u51fd\u6570\u53ca\u8f93\u51fa\u7ed3\u679c f ( 1 ) # [1] f ( 2 ) # [1,2] f ( 3 ) # [1,2,3] \u4e0d\u60f3\u5728\u540e\u7eed\u8c03\u7528\u4e4b\u95f4\u5171\u4eab\u9ed8\u8ba4\u503c\u65f6\uff0c\u5e94\u4ee5\u5982\u4e0b\u65b9\u5f0f\u7f16\u5199\u51fd\u6570\uff1a def f ( a , L = None ): if L is None : L = [] L . append ( a ) return L","title":"1.2.1 \u9ed8\u8ba4\u53c2\u6570"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0/#122","text":"kwarg=value \u5f62\u5f0f\u7684 \u5173\u952e\u5b57\u53c2\u6570 \u4e5f\u53ef\u4ee5\u7528\u4e8e\u8c03\u7528\u51fd\u6570\u3002\u51fd\u6570\u793a\u4f8b\u5982\u4e0b\uff1a def parrot ( voltage , state = 'a stiff' , action = 'voom' , type = 'Norwegian Blue' ): print ( \"-- This parrot wouldn't\" , action , end = ' ' ) print ( \"if you put\" , voltage , \"volts through it.\" ) print ( \"-- Lovely plumage, the\" , type ) print ( \"-- It's\" , state , \"!\" ) \u8be5\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u5fc5\u9009\u53c2\u6570\uff08 voltage \uff09\u548c\u4e09\u4e2a\u53ef\u9009\u53c2\u6570\uff08 state , action \u548c type \uff09\u3002\u8be5\u51fd\u6570\u53ef\u7528\u4e0b\u5217\u65b9\u5f0f\u8c03\u7528\uff1a parrot ( 1000 ) # 1 positional argument parrot ( voltage = 1000 ) # 1 keyword argument parrot ( voltage = 1000000 , action = 'VOOOOOM' ) # 2 keyword arguments parrot ( action = 'VOOOOOM' , voltage = 1000000 ) # 2 keyword arguments parrot ( 'a million' , 'bereft of life' , 'jump' ) # 3 positional arguments parrot ( 'a thousand' , state = 'pushing up the daisies' ) # 1 positional, 1 keyword \u4ee5\u4e0b\u8c03\u7528\u51fd\u6570\u7684\u65b9\u5f0f\u90fd\u65e0\u6548\uff1a parrot () # required argument missing parrot ( voltage = 5.0 , 'dead' ) # non-keyword argument after a keyword argument parrot ( 110 , voltage = 220 ) # duplicate value for the same argument parrot ( actor = 'John Cleese' ) # unknown keyword argument \u51fd\u6570\u8c03\u7528\u65f6\uff0c \u5173\u952e\u5b57\u53c2\u6570\u5fc5\u987b\u8ddf\u5728\u4f4d\u7f6e\u53c2\u6570\u540e\u9762 \u3002\u6240\u6709\u4f20\u9012\u7684\u5173\u952e\u5b57\u53c2\u6570\u90fd\u5fc5\u987b\u5339\u914d\u4e00\u4e2a\u51fd\u6570\u63a5\u53d7\u7684\u53c2\u6570\uff08\u6bd4\u5982\uff0c actor \u4e0d\u662f\u51fd\u6570 parrot \u7684\u6709\u6548\u53c2\u6570\uff09\uff0c \u5173\u952e\u5b57\u53c2\u6570\u7684\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981 \u3002","title":"1.2.2 \u5173\u952e\u5b57\u53c2\u6570"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0/#123","text":"\u4f60\u53ef\u80fd\u9700\u8981\u4e00\u4e2a\u51fd\u6570\u80fd\u5904\u7406\u6bd4\u5f53\u521d\u58f0\u660e\u65f6\u66f4\u591a\u7684\u53c2\u6570\u3002\u8fd9\u4e9b\u53c2\u6570\u53eb\u505a\u4e0d\u5b9a\u957f\u53c2\u6570\uff0c\u548c\u4e0a\u8ff0 2 \u79cd\u53c2\u6570\u4e0d\u540c\uff0c\u58f0\u660e\u65f6\u4e0d\u4f1a\u547d\u540d\u3002 \u5f62\u53c2\u4e3a **name \u5f62\u5f0f\u65f6\uff0c\u63a5\u6536\u4e00\u4e2a\u5b57\u5178\uff08\u8be6\u89c1 \u6620\u5c04\u7c7b\u578b --- dict \uff09\uff0c\u8be5\u5b57\u5178\u5305\u542b\u4e0e\u51fd\u6570\u4e2d\u5df2\u5b9a\u4e49\u5f62\u53c2\u5bf9\u5e94\u4e4b\u5916\u7684\u6240\u6709\u5173\u952e\u5b57\u53c2\u6570\u3002 *name \u5f62\u53c2\u63a5\u6536\u4e00\u4e2a \u5143\u7ec4 \uff0c\u8be5\u5143\u7ec4\u5305\u542b\u5f62\u53c2\u5217\u8868\u4e4b\u5916\u7684\u4f4d\u7f6e\u53c2\u6570\u3002 **name \u5f62\u53c2\u53ef\u4ee5\u4e0e *name \u5f62\u53c2\u7ec4\u5408\u4f7f\u7528\uff08 *name \u5fc5\u987b\u5728 **name \u524d\u9762\uff09\uff0c \u4f8b\u5982\uff0c\u53ef\u4ee5\u5b9a\u4e49\u4e0b\u9762\u8fd9\u6837\u7684\u51fd\u6570\uff1a def cheeseshop ( kind , * arguments , ** keywords ): print ( \"-- Do you have any\" , kind , \"?\" ) print ( \"-- I'm sorry, we're all out of\" , kind ) for arg in arguments : print ( arg ) print ( \"-\" * 40 ) for kw in keywords : print ( kw , \":\" , keywords [ kw ]) # \u8be5\u51fd\u6570\u53ef\u4ee5\u7528\u5982\u4e0b\u65b9\u5f0f\u8c03\u7528 cheeseshop ( \"Limburger\" , \"It's very runny, sir.\" , \"It's really very, VERY runny, sir.\" , shopkeeper = \"Michael Palin\" , client = \"John Cleese\" , sketch = \"Cheese Shop Sketch\" ) \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a -- Do you have any Limburger ? -- I 'm sorry, we' re all out of Limburger It 's very runny, sir. It 's really very, VERY runny, sir. ---------------------------------------- shopkeeper : Michael Palin client : John Cleese sketch : Cheese Shop Sketch # \u6ce8\u610f\uff0c\u5173\u952e\u5b57\u53c2\u6570\u5728\u8f93\u51fa\u7ed3\u679c\u4e2d\u7684\u987a\u5e8f\u4e0e\u8c03\u7528\u51fd\u6570\u65f6\u7684\u987a\u5e8f\u4e00\u81f4\u3002","title":"1.2.3 \u4e0d\u5b9a\u957f\u53c2\u6570"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0/#124","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53c2\u6570\u53ef\u4ee5\u6309\u4f4d\u7f6e\u6216\u663e\u5f0f\u5173\u952e\u5b57\u4f20\u9012\u7ed9 Python \u51fd\u6570\u3002\u4e3a\u4e86\u8ba9\u4ee3\u7801\u6613\u8bfb\u3001\u9ad8\u6548\uff0c\u6700\u597d\u9650\u5236\u53c2\u6570\u7684\u4f20\u9012\u65b9\u5f0f\uff0c\u8fd9\u6837\uff0c\u5f00\u53d1\u8005\u53ea\u9700\u67e5\u770b\u51fd\u6570\u5b9a\u4e49\uff0c\u5373\u53ef\u786e\u5b9a\u53c2\u6570\u9879\u662f\u4ec5\u6309\u4f4d\u7f6e\u3001\u6309\u4f4d\u7f6e\u6216\u5173\u952e\u5b57\uff0c\u8fd8\u662f\u4ec5\u6309\u5173\u952e\u5b57\u4f20\u9012\u3002 \u51fd\u6570\u5b9a\u4e49\u5982\u4e0b\uff1a def f ( pos1 , pos2 , / , pos_or_kwd , * , kwd1 , kwd2 ): ----------- ---------- ---------- | | | | Positional or keyword | | - Keyword only -- Positional only / \u548c * \u662f\u53ef\u9009\u7684\u3002\u8fd9\u4e9b\u7b26\u53f7\u8868\u660e\u5f62\u53c2\u5982\u4f55\u628a\u53c2\u6570\u503c\u4f20\u9012\u7ed9\u51fd\u6570\uff1a\u4f4d\u7f6e\u3001\u4f4d\u7f6e\u6216\u5173\u952e\u5b57\u3001\u5173\u952e\u5b57\u3002\u5173\u952e\u5b57\u5f62\u53c2\u4e5f\u53eb\u4f5c\u547d\u540d\u5f62\u53c2\u3002 \u51fd\u6570\u5b9a\u4e49\u4e2d\u672a\u4f7f\u7528 / \u548c * \u65f6\uff0c\u53c2\u6570\u53ef\u4ee5\u6309\u4f4d\u7f6e\u6216\u5173\u952e\u5b57\u4f20\u9012\u7ed9\u51fd\u6570\u3002 \u4ec5\u9650\u4f4d\u7f6e \u65f6\uff0c\u5f62\u53c2\u7684\u987a\u5e8f\u5f88\u91cd\u8981\uff0c\u4e14\u8fd9\u4e9b\u5f62\u53c2\u4e0d\u80fd\u7528\u5173\u952e\u5b57\u4f20\u9012\u3002 \u4ec5\u9650\u4f4d\u7f6e\u5f62\u53c2\u5e94\u653e\u5728 / \uff08\u6b63\u659c\u6760\uff09\u524d \u3002 / \u7528\u4e8e\u5728\u903b\u8f91\u4e0a\u5206\u5272\u4ec5\u9650\u4f4d\u7f6e\u5f62\u53c2\u4e0e\u5176\u5b83\u5f62\u53c2\u3002\u5982\u679c\u51fd\u6570\u5b9a\u4e49\u4e2d\u6ca1\u6709 / \uff0c\u5219\u8868\u793a\u6ca1\u6709\u4ec5\u9650\u4f4d\u7f6e\u5f62\u53c2\u3002 / \u540e\u53ef\u4ee5\u662f \u4f4d\u7f6e\u6216\u5173\u952e\u5b57 \u6216 \u4ec5\u9650\u5173\u952e\u5b57 \u5f62\u53c2 \u3002 \u628a\u5f62\u53c2\u6807\u8bb0\u4e3a \u4ec5\u9650\u5173\u952e\u5b57 \uff0c\u8868\u660e\u5fc5\u987b\u4ee5\u5173\u952e\u5b57\u53c2\u6570\u5f62\u5f0f\u4f20\u9012\u8be5\u5f62\u53c2\uff0c\u5e94\u5728\u53c2\u6570\u5217\u8868\u4e2d\u7b2c\u4e00\u4e2a \u4ec5\u9650\u5173\u952e\u5b57 \u5f62\u53c2\u524d\u6dfb\u52a0 * \u3002 \u51fd\u6570\u5b9e\u4f8b\uff1a \u4ee5\u4e0b\u5b9a\u4e49\u7684 standard_arg \u51fd\u6570\u662f\u6700\u5e38\u89c1\u7684\u5f62\u5f0f\uff0c\u5bf9\u8c03\u7528\u65b9\u5f0f\u6ca1\u6709\u4efb\u4f55\u9650\u5236\uff0c\u53ef\u4ee5\u6309\u4f4d\u7f6e\u4e5f\u53ef\u4ee5\u6309\u5173\u952e\u5b57\u4f20\u9012\u53c2\u6570\uff1a def standard_arg ( arg ): print ( arg ) # \u8c03\u7528\u51fd\u6570 standard_arg ( 2 ) # 2 standard_arg ( arg = 2 ) # 2 \u5b9a\u4e49\u7684\u51fd\u6570 pos_only_arg \u4e2d\u6709 / \uff0c\u4ec5\u9650\u4f7f\u7528\u4f4d\u7f6e\u5f62\u53c2\uff1a def pos_only_arg ( arg , / ): print ( arg ) # \u8c03\u7528\u51fd\u6570 pos_only_arg ( 1 ) # 1 pos_only_arg ( arg = 1 ) # \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a ''' Traceback (most recent call last): File \"<pyshell#16>\", line 1, in <module> s(arg=1) TypeError: pos_only_arg() got some positional-only arguments passed as keyword arguments: 'arg' ''' \u51fd\u6570 kwd_only_args \u7684\u51fd\u6570\u5b9a\u4e49\u901a\u8fc7 * \u8868\u660e\u4ec5\u9650\u5173\u952e\u5b57\u53c2\u6570\uff1a def kwd_only_arg ( * , arg ): print ( arg ) # \u8c03\u7528\u51fd\u6570 kwd_only_arg ( arg = 3 ) # 3 kwd_only_arg ( 3 ) # \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a ''' Traceback (most recent call last): File \"<pyshell#21>\", line 1, in <module> kwd_only_arg(3) TypeError: kwd_only_arg() takes 0 positional arguments but 1 was given''' ' \u5b9a\u4e49\u7684\u51fd\u6570 combined_example \u4f7f\u7528\u4e86\u5168\u90e8\u4e09\u79cd\u8c03\u7528\u65b9\u5f0f\uff1a def combined_example ( pos_only , / , standard , * , kwd_only ): print ( pos_only , standard , kwd_only ) # \u8c03\u7528\u51fd\u6570 combined_example ( 1 , 2 , 3 ) # \u62a5\u9519\uff1atakes 2 positional arguments but 3 were given combined_example ( 1 , 2 , kwd_only = 3 ) # 1 2 3 combined_example ( 1 , standard = 2 , kwd_only = 3 ) # 1 2 3 combined_example ( pos_only = 1 , standard = 2 , kwd_only = 3 ) # \u62a5\u9519\uff1apos_only\u5173\u952e\u5b57\u53c2\u6570\u65e0\u6cd5\u8bc6\u522b","title":"1.2.4 \u7279\u6b8a\u53c2\u6570"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0/#125","text":"\u4ee5\u4e0b\u7528\u4f8b\u51b3\u5b9a\u54ea\u4e9b\u5f62\u53c2\u53ef\u4ee5\u7528\u4e8e\u51fd\u6570\u5b9a\u4e49\uff1a def f ( pos1 , pos2 , / , pos_or_kwd , * , kwd1 , kwd2 ): \u8bf4\u660e\uff1a \u4f7f\u7528\u4ec5\u9650\u4f4d\u7f6e\u5f62\u53c2\uff0c\u53ef\u4ee5\u8ba9\u7528\u6237\u65e0\u6cd5\u4f7f\u7528\u5f62\u53c2\u540d\u3002\u5f62\u53c2\u540d\u6ca1\u6709\u5b9e\u9645\u610f\u4e49\u65f6\uff0c\u5f3a\u5236\u8c03\u7528\u51fd\u6570\u7684\u5b9e\u53c2\u987a\u5e8f\u65f6\uff0c\u6216\u540c\u65f6\u63a5\u6536\u4f4d\u7f6e\u5f62\u53c2\u548c\u5173\u952e\u5b57\u65f6\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5f88\u6709\u7528\u3002 \u5f53\u5f62\u53c2\u540d\u6709\u5b9e\u9645\u610f\u4e49\uff0c\u4e14\u663e\u5f0f\u540d\u79f0\u53ef\u4ee5\u8ba9\u51fd\u6570\u5b9a\u4e49\u66f4\u6613\u7406\u89e3\u65f6\uff0c\u963b\u6b62\u7528\u6237\u4f9d\u8d56\u4f20\u9012\u5b9e\u53c2\u7684\u4f4d\u7f6e\u65f6\uff0c\u624d\u4f7f\u7528\u5173\u952e\u5b57\u3002 \u5bf9\u4e8e API\uff0c\u4f7f\u7528\u4ec5\u9650\u4f4d\u7f6e\u5f62\u53c2\uff0c\u53ef\u4ee5\u9632\u6b62\u672a\u6765\u4fee\u6539\u5f62\u53c2\u540d\u65f6\u9020\u6210\u7834\u574f\u6027\u7684 API \u53d8\u52a8\u3002","title":"1.2.5 \u5c0f\u7ed3"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0/#126","text":"\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u4f7f\u7528\u4efb\u610f\u6570\u91cf\u7684\u5b9e\u53c2\u662f\u6700\u5c11\u89c1\u7684\u9009\u9879\u3002\u8fd9\u4e9b\u5b9e\u53c2\u5305\u542b\u5728\u5143\u7ec4\u4e2d\uff08\u8be6\u89c1 \u5143\u7ec4\u548c\u5e8f\u5217 \uff09\u3002\u5728\u53ef\u53d8\u6570\u91cf\u7684\u5b9e\u53c2\u4e4b\u524d\uff0c\u53ef\u80fd\u6709\u82e5\u5e72\u4e2a\u666e\u901a\u53c2\u6570\uff1a def write_multiple_items ( file , separator , * args ): file . write ( separator . join ( args )) variadic \u5b9e\u53c2\u7528\u4e8e\u91c7\u96c6\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u6240\u6709\u5269\u4f59\u5b9e\u53c2\uff0c\u56e0\u6b64\uff0c\u5b83\u4eec\u901a\u5e38\u5728\u5f62\u53c2\u5217\u8868\u7684\u672b\u5c3e\u3002 *args \u5f62\u53c2\u540e\u7684\u4efb\u4f55\u5f62\u5f0f\u53c2\u6570\u53ea\u80fd\u662f\u4ec5\u9650\u5173\u952e\u5b57\u53c2\u6570\uff0c\u5373\u53ea\u80fd\u7528\u4f5c\u5173\u952e\u5b57\u53c2\u6570\uff0c\u4e0d\u80fd\u7528\u4f5c\u4f4d\u7f6e\u53c2\u6570\uff1a def concat ( * args , sep = \"/\" ): return sep . join ( args ) # \u8c03\u7528\u51fd\u6570 concat ( \"earth\" , \"mars\" , \"venus\" ) # 'earth/mars/venus' concat ( \"earth\" , \"mars\" , \"venus\" , sep = \".\" ) # 'earth.mars.venus'","title":"1.2.6 \u4efb\u610f\u5b9e\u53c2\u5217\u8868"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0/#127","text":"\u51fd\u6570\u8c03\u7528\u8981\u6c42\u72ec\u7acb\u7684\u4f4d\u7f6e\u53c2\u6570\uff0c\u4f46\u5b9e\u53c2\u5728\u5217\u8868\u6216\u5143\u7ec4\u91cc\u65f6\uff0c\u8981\u6267\u884c\u76f8\u53cd\u7684\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u5185\u7f6e\u7684 range() \u51fd\u6570\u8981\u6c42\u72ec\u7acb\u7684 start \u548c stop \u5b9e\u53c2\u3002\u5982\u679c\u8fd9\u4e9b\u53c2\u6570\u4e0d\u662f\u72ec\u7acb\u7684\uff0c\u5219\u8981\u5728\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u7528 * \u64cd\u4f5c\u7b26\u628a\u5b9e\u53c2\u4ece\u5217\u8868\u6216\u5143\u7ec4\u89e3\u5305\u51fa\u6765\uff1a list ( range ( 3 , 6 )) # normal call with separate arguments [3, 4, 5] args = [ 3 , 6 ] list ( range ( * args )) # call with arguments unpacked from a list [3, 4, 5] \u540c\u6837\uff0c\u5b57\u5178\u53ef\u4ee5\u7528 ** \u64cd\u4f5c\u7b26\u4f20\u9012\u5173\u952e\u5b57\u53c2\u6570\uff1a def parrot ( voltage , state = 'a stiff' , action = 'voom' ): print ( \"-- This parrot wouldn't\" , action , end = ' ' ) print ( \"if you put\" , voltage , \"volts through it.\" , end = ' ' ) print ( \"E's\" , state , \"!\" ) d = { \"voltage\" : \"four million\" , \"state\" : \"bleedin' demised\" , \"action\" : \"VOOM\" } # \u8c03\u7528\u51fd\u6570 parrot ( ** d ) ''' -- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !'''","title":"1.2.7 \u89e3\u5305\u5b9e\u53c2\u5217\u8868"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0/#128-lambda","text":"lambda \u5173\u952e\u5b57\u7528\u4e8e\u521b\u5efa\u5c0f\u5de7\u7684\u533f\u540d\u51fd\u6570\u3002 lambda a, b: a+b \u51fd\u6570\u8fd4\u56de\u4e24\u4e2a\u53c2\u6570\u7684\u548c\u3002Lambda \u51fd\u6570\u53ef\u7528\u4e8e\u4efb\u4f55\u9700\u8981\u51fd\u6570\u5bf9\u8c61\u7684\u5730\u65b9\u3002\u5728\u8bed\u6cd5\u4e0a\uff0c\u533f\u540d\u51fd\u6570\u53ea\u80fd\u662f\u5355\u4e2a\u8868\u8fbe\u5f0f\u3002\u5728\u8bed\u4e49\u4e0a\uff0c\u5b83\u53ea\u662f\u5e38\u89c4\u51fd\u6570\u5b9a\u4e49\u7684\u8bed\u6cd5\u7cd6\u3002\u4e0e\u5d4c\u5957\u51fd\u6570\u5b9a\u4e49\u4e00\u6837\uff0clambda \u51fd\u6570\u53ef\u4ee5\u5f15\u7528\u5305\u542b\u4f5c\u7528\u57df\u4e2d\u7684\u53d8\u91cf\uff1a def make_incrementor ( n ): return lambda x : x + n f = make_incrementor ( 42 ) f ( 0 ) # 42 f ( 1 ) # 43 \u4e0a\u4f8b\u7528 lambda \u8868\u8fbe\u5f0f\u8fd4\u56de\u51fd\u6570\u3002\u8fd8\u53ef\u4ee5\u628a\u533f\u540d\u51fd\u6570\u7528\u4f5c\u4f20\u9012\u7684\u5b9e\u53c2\uff1a pairs = [( 1 , 'one' ), ( 2 , 'two' ), ( 3 , 'three' ), ( 4 , 'four' )] pairs . sort ( key = lambda pair : pair [ 1 ]) pairs # [(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]","title":"1.2.8 Lambda \u8868\u8fbe\u5f0f"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0/#129","text":"\u4ee5\u4e0b\u662f\u6587\u6863\u5b57\u7b26\u4e32\u5185\u5bb9\u548c\u683c\u5f0f\u7684\u7ea6\u5b9a\u3002 \u7b2c\u4e00\u884c\u5e94\u4e3a\u5bf9\u8c61\u7528\u9014\u7684\u7b80\u77ed\u6458\u8981\u3002\u4e3a\u4fdd\u6301\u7b80\u6d01\uff0c\u4e0d\u8981\u5728\u8fd9\u91cc\u663e\u5f0f\u8bf4\u660e\u5bf9\u8c61\u540d\u6216\u7c7b\u578b\uff0c\u56e0\u4e3a\u53ef\u901a\u8fc7\u5176\u4ed6\u65b9\u5f0f\u83b7\u53d6\u8fd9\u4e9b\u4fe1\u606f\uff08\u9664\u975e\u8be5\u540d\u79f0\u78b0\u5de7\u662f\u63cf\u8ff0\u51fd\u6570\u64cd\u4f5c\u7684\u52a8\u8bcd\uff09\u3002\u8fd9\u4e00\u884c\u5e94\u4ee5\u5927\u5199\u5b57\u6bcd\u5f00\u5934\uff0c\u4ee5\u53e5\u70b9\u7ed3\u5c3e\u3002 \u6587\u6863\u5b57\u7b26\u4e32\u4e3a\u591a\u884c\u65f6\uff0c\u7b2c\u4e8c\u884c\u5e94\u4e3a\u7a7a\u767d\u884c\uff0c\u5728\u89c6\u89c9\u4e0a\u5c06\u6458\u8981\u4e0e\u5176\u4f59\u63cf\u8ff0\u5206\u5f00\u3002\u540e\u9762\u7684\u884c\u53ef\u5305\u542b\u82e5\u5e72\u6bb5\u843d\uff0c\u63cf\u8ff0\u5bf9\u8c61\u7684\u8c03\u7528\u7ea6\u5b9a\u3001\u526f\u4f5c\u7528\u7b49\u3002 Python \u89e3\u6790\u5668\u4e0d\u4f1a\u5220\u9664 Python \u4e2d\u591a\u884c\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u7684\u7f29\u8fdb\uff0c\u56e0\u6b64\uff0c\u6587\u6863\u5904\u7406\u5de5\u5177\u5e94\u5728\u5fc5\u8981\u65f6\u5220\u9664\u7f29\u8fdb\u3002\u8fd9\u9879\u64cd\u4f5c\u9075\u5faa\u4ee5\u4e0b\u7ea6\u5b9a\uff1a \u6587\u6863\u5b57\u7b26\u4e32\u7b2c\u4e00\u884c \u4e4b\u540e \u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u884c\u51b3\u5b9a\u4e86\u6574\u4e2a\u6587\u6863\u5b57\u7b26\u4e32\u7684\u7f29\u8fdb\u91cf\uff08\u7b2c\u4e00\u884c\u901a\u5e38\u4e0e\u5b57\u7b26\u4e32\u5f00\u5934\u7684\u5f15\u53f7\u76f8\u90bb\uff0c\u5176\u7f29\u8fdb\u5728\u5b57\u7b26\u4e32\u4e2d\u5e76\u4e0d\u660e\u663e\uff0c\u56e0\u6b64\uff0c\u4e0d\u80fd\u7528\u7b2c\u4e00\u884c\u7684\u7f29\u8fdb\uff09\uff0c\u7136\u540e\uff0c\u5220\u9664\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u884c\u5f00\u5934\u5904\u4e0e\u6b64\u7f29\u8fdb\u201c\u7b49\u4ef7\u201d\u7684\u7a7a\u767d\u7b26 \u3002\u4e0d\u80fd\u6709\u6bd4\u6b64\u7f29\u8fdb\u66f4\u5c11\u7684\u884c\uff0c\u4f46\u5982\u679c\u51fa\u73b0\u4e86\u7f29\u8fdb\u66f4\u5c11\u7684\u884c\uff0c\u5e94\u5220\u9664\u8fd9\u4e9b\u884c\u7684\u6240\u6709\u524d\u5bfc\u7a7a\u767d\u7b26\u3002\u8f6c\u5316\u5236\u8868\u7b26\u540e\uff08\u901a\u5e38\u4e3a 8 \u4e2a\u7a7a\u683c\uff09\uff0c\u5e94\u6d4b\u8bd5\u7a7a\u767d\u7b26\u7684\u7b49\u6548\u6027\u3002 \u4e0b\u9762\u662f\u591a\u884c\u6587\u6863\u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a def my_function (): \"\"\"Do nothing, but document it. No, really, it doesn't do anything. \"\"\" pass print ( my_function . __doc__ ) # Do nothing, but document it. # No, really, it doesn't do anything.","title":"1.2.9 \u6587\u6863\u5b57\u7b26\u4e32"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0/#1210","text":"\u51fd\u6570\u6ce8\u89e3 \u662f\u53ef\u9009\u7684\u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570\u7c7b\u578b\u7684\u5143\u6570\u636e\u5b8c\u6574\u4fe1\u606f\uff08\u8be6\u89c1 PEP 3107 \u548c PEP 484 \uff09\u3002 \u6807\u6ce8 \u4ee5\u5b57\u5178\u7684\u5f62\u5f0f\u5b58\u653e\u5728\u51fd\u6570\u7684 __annotations__ \u5c5e\u6027\u4e2d\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5f71\u54cd\u51fd\u6570\u7684\u4efb\u4f55\u5176\u4ed6\u90e8\u5206\u3002 \u5f62\u53c2\u6807\u6ce8\u7684\u5b9a\u4e49\u65b9\u5f0f\u662f\u5728\u5f62\u53c2\u540d\u540e\u52a0\u5192\u53f7\uff0c\u540e\u9762\u8ddf\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u8be5\u8868\u8fbe\u5f0f\u4f1a\u88ab\u6c42\u503c\u4e3a\u6807\u6ce8\u7684\u503c\u3002 \u8fd4\u56de\u503c\u6807\u6ce8\u7684\u5b9a\u4e49\u65b9\u5f0f\u662f\u52a0\u7ec4\u5408\u7b26\u53f7 -> \uff0c\u540e\u9762\u8ddf\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u8be5\u6807\u6ce8\u4f4d\u4e8e\u5f62\u53c2\u5217\u8868\u548c\u8868\u793a def \u8bed\u53e5\u7ed3\u675f\u7684\u5192\u53f7\u4e4b\u95f4\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u6709\u4e00\u4e2a\u5fc5\u987b\u7684\u53c2\u6570\uff0c\u4e00\u4e2a\u53ef\u9009\u7684\u5173\u952e\u5b57\u53c2\u6570\u4ee5\u53ca\u8fd4\u56de\u503c\u90fd\u5e26\u6709\u76f8\u5e94\u7684\u6807\u6ce8: def f ( ham : str , eggs : str = 'eggs' ) -> str : print ( \"Annotations:\" , f . __annotations__ ) print ( \"Arguments:\" , ham , eggs ) return ham + ' and ' + eggs f ( 'spam' ) ''' Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>} Arguments: spam eggs 'spam and eggs' ''' \u51fd\u6570\u6807\u6ce8\u901a\u5e38\u7528\u4e8e \u7c7b\u578b\u63d0\u793a \uff1a\u4f8b\u5982\u4ee5\u4e0b\u51fd\u6570\u9884\u671f\u63a5\u53d7\u4e24\u4e2a int \u53c2\u6570\u5e76\u9884\u671f\u8fd4\u56de\u4e00\u4e2a int \u503c: def sum_two_numbers ( a : int , b : int ) -> int : return a + b","title":"1.2.10 \u51fd\u6570\u6ce8\u89e3"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0/#13","text":"Python \u9879\u76ee\u5927\u591a\u90fd\u9075\u5faa PEP 8 \u7684\u98ce\u683c\u6307\u5357\uff1b\u5b83\u63a8\u884c\u7684\u7f16\u7801\u98ce\u683c\u6613\u4e8e\u9605\u8bfb\u3001\u8d4f\u5fc3\u60a6\u76ee\u3002Python \u5f00\u53d1\u8005\u5747\u5e94\u62bd\u65f6\u95f4\u6089\u5fc3\u7814\u8bfb\uff1b\u4ee5\u4e0b\u662f\u8be5\u63d0\u6848\u4e2d\u7684\u6838\u5fc3\u8981\u70b9\uff1a \u7f29\u8fdb\uff0c\u7528 4 \u4e2a\u7a7a\u683c\uff0c\u4e0d\u8981\u7528\u5236\u8868\u7b26\u3002 4 \u4e2a\u7a7a\u683c\u662f\u5c0f\u7f29\u8fdb\uff08\u66f4\u6df1\u5d4c\u5957\uff09\u548c\u5927\u7f29\u8fdb\uff08\u66f4\u6613\u9605\u8bfb\uff09\u4e4b\u95f4\u7684\u6298\u4e2d\u65b9\u6848\u3002\u5236\u8868\u7b26\u4f1a\u5f15\u8d77\u6df7\u4e71\uff0c\u6700\u597d\u522b\u7528\u3002 \u6362\u884c\uff0c\u4e00\u884c\u4e0d\u8d85\u8fc7 79 \u4e2a\u5b57\u7b26\u3002 \u8fd9\u6837\u6362\u884c\u7684\u5c0f\u5c4f\u9605\u8bfb\u4f53\u9a8c\u66f4\u597d\uff0c\u8fd8\u4fbf\u4e8e\u5728\u5927\u5c4f\u663e\u793a\u5668\u4e0a\u5e76\u6392\u9605\u8bfb\u591a\u4e2a\u4ee3\u7801\u6587\u4ef6\u3002 \u7528\u7a7a\u884c\u5206\u9694\u51fd\u6570\u548c\u7c7b\uff0c\u53ca\u51fd\u6570\u5185\u8f83\u5927\u7684\u4ee3\u7801\u5757\u3002 \u6700\u597d\u628a\u6ce8\u91ca\u653e\u5230\u5355\u72ec\u4e00\u884c\u3002 \u4f7f\u7528\u6587\u6863\u5b57\u7b26\u4e32\u3002 \u8fd0\u7b97\u7b26\u524d\u540e\u3001\u9017\u53f7\u540e\u8981\u7528\u7a7a\u683c\uff0c\u4f46\u4e0d\u8981\u76f4\u63a5\u5728\u62ec\u53f7\u5185\u4f7f\u7528\uff1a a = f(1, 2) + g(3, 4) \u3002 \u7c7b\u548c\u51fd\u6570\u7684\u547d\u540d\u8981\u4e00\u81f4\uff1b\u6309\u60ef\u4f8b\uff0c\u547d\u540d\u7c7b\u7528 UpperCamelCase \uff0c\u547d\u540d\u51fd\u6570\u4e0e\u65b9\u6cd5\u7528 lowercase_with_underscores \u3002\u547d\u540d\u65b9\u6cd5\u4e2d\u7b2c\u4e00\u4e2a\u53c2\u6570\u603b\u662f\u7528 self (\u7c7b\u548c\u65b9\u6cd5\u8be6\u89c1 \u521d\u63a2\u7c7b )\u3002 \u7f16\u5199\u7528\u4e8e\u56fd\u9645\u591a\u8bed\u73af\u5883\u7684\u4ee3\u7801\u65f6\uff0c\u4e0d\u8981\u7528\u751f\u50fb\u7684\u7f16\u7801\u3002Python \u9ed8\u8ba4\u7684 UTF-8 \u6216\u7eaf ASCII \u53ef\u4ee5\u80dc\u4efb\u5404\u79cd\u60c5\u51b5\u3002 \u540c\u7406\uff0c\u5c31\u7b97\u591a\u8bed\u9605\u8bfb\u3001\u7ef4\u62a4\u4ee3\u7801\u7684\u53ef\u80fd\u518d\u5c0f\uff0c\u4e5f\u4e0d\u8981\u5728\u6807\u8bc6\u7b26\u4e2d\u4f7f\u7528\u975e ASCII \u5b57\u7b26\u3002","title":"1.3 \u7f16\u7801\u98ce\u683c"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","text":"\u57fa\u672c\u8bed\u6cd5 \u00b6 1.1 \u7f16\u7801\u58f0\u660e \u00b6 Python \u811a\u672c\u7b2c\u4e00\u6216\u7b2c\u4e8c\u884c\u7684\u6ce8\u91ca\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f coding[=:]\\s*([-\\w.]+) \u65f6\uff0c\u8be5\u6ce8\u91ca\u4f1a\u88ab\u5f53\u4f5c\u7f16\u7801\u58f0\u660e\uff1b\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u7b2c\u4e00\u7ec4\u6307\u5b9a\u4e86\u6e90\u7801\u6587\u4ef6\u7684\u7f16\u7801\u3002 \u7f16\u7801\u58f0\u660e\u5fc5\u987b\u72ec\u5360\u4e00\u884c\uff0c\u5728\u7b2c\u4e8c\u884c\u65f6\uff0c\u5219\u7b2c\u4e00\u884c\u5fc5\u987b\u4e5f\u662f\u6ce8\u91ca \u3002\u7f16\u7801\u8868\u8fbe\u5f0f\u7684\u5f62\u5f0f\u5982\u4e0b\uff1a # -*- coding: <encoding-name> -*- \u8fd9\u4e5f\u662f GNU Emacs \u8ba4\u53ef\u7684\u5f62\u5f0f\uff0c\u6b64\u5916\uff0c\u8fd8\u652f\u6301\u5982\u4e0b\u5f62\u5f0f\uff1a # vim:fileencoding=<encoding-name> \u8fd9\u662f Bram Moolenaar \u7684 VIM \u8ba4\u53ef\u7684\u5f62\u5f0f\u3002 \u6ca1\u6709\u7f16\u7801\u58f0\u660e\u65f6\uff0c\u9ed8\u8ba4\u7f16\u7801\u4e3a UTF-8 \uff1b\u58f0\u660e\u7684\u7f16\u7801\u540d\u79f0\u5fc5\u987b\u662f Python \u80fd\u8bc6\u522b\u7684\u3002\u8bed\u4e49\u5b57\u7b26\u4e32\u3001\u6ce8\u91ca\u548c\u6807\u8bc6\u7b26\u7b49\u8bcd\u6cd5\u5206\u6790\u90fd\u4f7f\u7528\u6b64\u7f16\u7801 \u3002 1.2 \u6ce8\u91ca \u00b6 python\u5355\u884c\u6ce8\u91ca\u4ee5\u4e95\u53f7 \uff08 # \uff09\u5f00\u5934\uff1b\u591a\u884c\u6ce8\u91ca\u53ef\u4ee5\u7528\u591a\u4e2a # \u53f7\uff0c\u8fd8\u6709\u4e24\u4e2a ''' \u548c\u4e24\u4e2a \"\"\" 1.3 \u591a\u884c\u8bed\u53e5 \u00b6 1.3.1 \u663e\u5f0f\u62fc\u63a5\u884c \u00b6 \u4e24\u4e2a\u53ca\u4e24\u4e2a\u4ee5\u4e0a\u7684\u7269\u7406\u884c\u53ef\u7528\u53cd\u659c\u6760\uff08 \\ \uff09\u62fc\u63a5\u4e3a\u4e00\u4e2a\u903b\u8f91\u884c\uff0c\u89c4\u5219\u5982\u4e0b\uff1a\u4ee5\u4e0d\u5728\u5b57\u7b26\u4e32\u6216\u6ce8\u91ca\u5185\u7684\u53cd\u659c\u6760\u7ed3\u5c3e\u65f6\uff0c\u7269\u7406\u884c\u5c06\u4e0e\u4e0b\u4e00\u884c\u62fc\u63a5\u6210\u4e00\u4e2a\u903b\u8f91\u884c\uff0c\u5e76\u5220\u9664\u53cd\u659c\u6760\u53ca\u5176\u540e\u7684\u6362\u884c\u7b26\u3002\u4f8b\u5982\uff1a if 1900 < year < 2100 and 1 <= month <= 12 \\ and 1 <= day <= 31 and 0 <= hour < 24 \\ and 0 <= minute < 60 and 0 <= second < 60 : # Looks like a valid date return 1 \u4ee5\u53cd\u659c\u6760\u7ed3\u5c3e\u7684\u884c\uff0c\u4e0d\u80fd\u52a0\u6ce8\u91ca\uff1b\u53cd\u659c\u6760\u4e5f\u4e0d\u80fd\u62fc\u63a5\u6ce8\u91ca\u3002\u9664\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5916\uff0c\u53cd\u659c\u6760\u4e0d\u80fd\u62fc\u63a5\u5f62\u7b26\uff08\u5982\uff0c\u9664\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5916\uff0c\u4e0d\u80fd\u7528\u53cd\u659c\u6760\u628a\u5f62\u7b26\u5207\u5206\u81f3\u4e24\u4e2a\u7269\u7406\u884c\uff09\u3002\u53cd\u659c\u6760\u53ea\u80fd\u5728\u4ee3\u7801\u7684\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u91cc\uff0c\u5728\u5176\u4ed6\u4efb\u4f55\u4f4d\u7f6e\u90fd\u662f\u975e\u6cd5\u7684\u3002 1.3.2 \u9690\u5f0f\u62fc\u63a5\u884c \u00b6 \u5706\u62ec\u53f7\u3001\u65b9\u62ec\u53f7\u3001\u82b1\u62ec\u53f7\u5185\u7684\u8868\u8fbe\u5f0f\u53ef\u4ee5\u5206\u6210\u591a\u4e2a\u7269\u7406\u884c\uff0c\u4e0d\u5fc5\u4f7f\u7528\u53cd\u659c\u6760\u3002\u4f8b\u5982\uff1a month_names = [ 'Januari' , 'Februari' , 'Maart' , # These are the 'April' , 'Mei' , 'Juni' , # Dutch names 'Juli' , 'Augustus' , 'September' , # for the months 'Oktober' , 'November' , 'December' ] # of the year \u9690\u5f0f\u884c\u62fc\u63a5\u53ef\u542b\u6ce8\u91ca\uff1b\u540e\u7eed\u884c\u7684\u7f29\u8fdb\u5e76\u4e0d\u91cd\u8981\uff1b\u8fd8\u652f\u6301\u7a7a\u7684\u540e\u7eed\u884c\u3002\u9690\u5f0f\u62fc\u63a5\u884c\u4e4b\u95f4\u6ca1\u6709 NEWLINE \u5f62\u7b26\u3002\u4e09\u5f15\u53f7\u5b57\u7b26\u4e32\u652f\u6301\u9690\u5f0f\u62fc\u63a5\u884c\uff08\u89c1\u4e0b\u6587\uff09\uff0c\u4f46\u4e0d\u652f\u6301\u6ce8\u91ca\u3002 1.3.3 \u4e09\u4e2a\u53cc\u5f15\u53f7\u6216\u4e09\u4e2a\u5355\u5f15\u53f7 \u00b6 \u5b57\u7b26\u4e32\u53ef\u4ee5\u5b9e\u73b0\u8de8\u884c\u8fde\u7eed\u8f93\u5165\u3002\u5b9e\u73b0\u65b9\u5f0f\u662f\u7528\u4e09\u5f15\u53f7\uff1a \"\"\"...\"\"\" \u6216 '''...''' \uff0c\u5b57\u7b26\u4e32\u884c\u5c3e\u4f1a\u81ea\u52a8\u52a0\u4e0a\u56de\u8f66\u6362\u884c\uff0c\u5982\u679c\u4e0d\u9700\u8981\u56de\u8f66\u6362\u884c\uff0c\u5728\u884c\u5c3e\u6dfb\u52a0 \\ \u5373\u53ef \u3002\u793a\u4f8b\u5982\u4e0b\uff1a print ( \"\"\" \\ Usage: thingy [OPTIONS] -h Display this usage message -H hostname Hostname to connect to \"\"\" ) # \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff08\u6ce8\u610f\uff1a\u7b2c\u4e00\u884c\u6ca1\u6709\u6362\u884c\u7b26\uff09\uff1a Usage : thingy [ OPTIONS ] - h Display this usage message - H hostname Hostname to connect to 1.4 \u6807\u8bc6\u7b26\u548c\u5173\u952e\u5b57 \u00b6 1.4.1 \u6807\u8bc6\u7b26 \u00b6 \u4e0e Python 2.x \u4e00\u6837\uff0c\u5728 ASCII \u8303\u56f4\u5185\uff08U+0001..U+007F\uff09\uff0c\u6709\u6548\u6807\u8bc6\u7b26\u5b57\u7b26\u4e3a\uff1a \u5927\u5c0f\u5199\u5b57\u6bcd A \u81f3 Z \u3001\u4e0b\u5212\u7ebf _ \u3001\u6570\u5b57 0 \u81f3 9 \uff0c\u4f46\u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934 \u3002 1.4.2 \u5173\u952e\u5b57 \u00b6 \u4fdd\u7559\u5b57\u5373\u5173\u952e\u5b57\uff0c\u6211\u4eec\u4e0d\u80fd\u628a\u5b83\u4eec\u7528\u4f5c\u4efb\u4f55\u6807\u8bc6\u7b26\u540d\u79f0\u3002Python \u7684\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2a keyword \u6a21\u5757\uff0c\u53ef\u4ee5\u8f93\u51fa\u5f53\u524d\u7248\u672c\u7684\u6240\u6709\u5173\u952e\u5b57\uff1a import keyword keyword . kwlist False await else import pass None break except in raise True class finally is return and continue for lambda try as def from nonlocal while assert del global not with async elif if or yield __peg_parser__ \u4fdd\u7559\u7684\u6807\u8bc6\u7b26\u7c7b\uff1a \u67d0\u4e9b\u6807\u8bc6\u7b26\u7c7b\uff08\u9664\u4e86\u5173\u952e\u5b57\uff09\u5177\u6709\u7279\u6b8a\u542b\u4e49\u3002\u8fd9\u4e9b\u7c7b\u7684\u547d\u540d\u6a21\u5f0f\u4ee5\u4e0b\u5212\u7ebf\u5b57\u7b26\u5f00\u5934\uff0c\u5e76\u4ee5\u4e0b\u5212\u7ebf\u7ed3\u5c3e\uff1a _* from module import * \u65f6\uff0c\u4e0d\u4f1a\u5bfc\u5165\u3002\u4ea4\u4e92\u5f0f\u89e3\u91ca\u5668\u4e2d\uff0c\u7279\u6b8a\u6807\u8bc6\u7b26 _ \u7528\u4e8e\u5b58\u50a8\u6700\u8fd1\u4e00\u6b21\u6c42\u503c\u7684\u7ed3\u679c\uff1b\u8be5\u6807\u8bc6\u7b26\u4fdd\u5b58\u5728 builtins \u6a21\u5757\u91cc\u3002\u4e0d\u5904\u4e8e\u4ea4\u4e92\u6a21\u5f0f\u65f6\uff0c _ \u6ca1\u6709\u7279\u6b8a\u542b\u4e49\uff0c\u4e5f\u6ca1\u6709\u9884\u5b9a\u4e49\u3002\u8be6\u89c1 import \u8bed\u53e5 \u3002\u6ce8\u89e3 _ \u5e38\u7528\u4e8e\u8fde\u63a5\u56fd\u9645\u5316\u6587\u672c\uff1b\u8be6\u89c1 gettext \u6a21\u5757\u6587\u6863\u3002 __*__ \u7cfb\u7edf\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u901a\u5e38\u7b80\u79f0\u4e3a \"dunder\" \u3002\u8fd9\u4e9b\u540d\u79f0\u7531\u89e3\u91ca\u5668\u53ca\u5176\u5b9e\u73b0\uff08\u5305\u62ec\u6807\u51c6\u5e93\uff09\u5b9a\u4e49\u3002\u73b0\u6709\u7cfb\u7edf\u5b9a\u4e49\u540d\u79f0\u76f8\u5173\u7684\u8bba\u8ff0\u8be6\u89c1 \u7279\u6b8a\u65b9\u6cd5\u540d\u79f0 \u7b49\u7ae0\u8282\u3002Python \u672a\u6765\u7248\u672c\u4e2d\u8fd8\u5c06\u5b9a\u4e49\u66f4\u591a\u6b64\u7c7b\u540d\u79f0\u3002\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c \u4efb\u4f55 \u4e0d\u663e\u5f0f\u9075\u4ece __*__ \u540d\u79f0\u7684\u6587\u6863\u7528\u6cd5\uff0c\u90fd\u53ef\u80fd\u5bfc\u81f4\u65e0\u8b66\u544a\u63d0\u793a\u7684\u9519\u8bef\u3002 __* \u7c7b\u7684\u79c1\u6709\u540d\u79f0\u3002\u7c7b\u5b9a\u4e49\u65f6\uff0c\u6b64\u7c7b\u540d\u79f0\u4ee5\u4e00\u79cd\u6df7\u5408\u5f62\u5f0f\u91cd\u5199\uff0c\u4ee5\u907f\u514d\u57fa\u7c7b\u53ca\u6d3e\u751f\u7c7b\u7684 \"\u79c1\u6709\" \u5c5e\u6027\u4e4b\u95f4\u4ea7\u751f\u540d\u79f0\u51b2\u7a81\u3002\u8be6\u89c1 \u6807\u8bc6\u7b26\uff08\u540d\u79f0\uff09 \u3002 1.5 \u884c\u4e0e\u7f29\u8fdb \u00b6 python\u6700\u5177\u7279\u8272\u7684\u5c31\u662f\u4f7f\u7528\u7f29\u8fdb\u6765\u8868\u793a\u4ee3\u7801\u5757\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u5927\u62ec\u53f7 {} \u3002 \u7f29\u8fdb\u7684\u7a7a\u683c\u6570\u662f\u53ef\u53d8\u7684\uff0c\u4f46\u662f\u540c\u4e00\u4e2a\u4ee3\u7801\u5757\u7684\u8bed\u53e5\u5fc5\u987b\u5305\u542b\u76f8\u540c\u7684\u7f29\u8fdb\u7a7a\u683c\u6570\uff1b\u903b\u8f91\u884c\u5f00\u5934\u7684\u7a7a\u767d\u7b26\uff08\u7a7a\u683c\u7b26\u548c\u5236\u8868\u7b26\uff09\u7528\u4e8e\u8ba1\u7b97\u8be5\u884c\u7684\u7f29\u8fdb\u5c42\u7ea7\uff0c\u51b3\u5b9a\u8bed\u53e5\u7ec4\u5757\u3002 1.6 \u7a7a\u884c \u00b6 \u51fd\u6570\u4e4b\u95f4\u6216\u7c7b\u7684\u65b9\u6cd5\u4e4b\u95f4\u7528\u7a7a\u884c\u5206\u9694\uff0c\u8868\u793a\u4e00\u6bb5\u65b0\u7684\u4ee3\u7801\u7684\u5f00\u59cb\u3002\u7c7b\u548c\u51fd\u6570\u5165\u53e3\u4e4b\u95f4\u4e5f\u7528\u4e00\u884c\u7a7a\u884c\u5206\u9694\uff0c\u4ee5\u7a81\u51fa\u51fd\u6570\u5165\u53e3\u7684\u5f00\u59cb\u3002 \u7a7a\u884c\u4e0e\u4ee3\u7801\u7f29\u8fdb\u4e0d\u540c\uff0c\u7a7a\u884c\u5e76\u4e0d\u662fPython\u8bed\u6cd5\u7684\u4e00\u90e8\u5206\u3002\u4e66\u5199\u65f6\u4e0d\u63d2\u5165\u7a7a\u884c\uff0cPython\u89e3\u91ca\u5668\u8fd0\u884c\u4e5f\u4e0d\u4f1a\u51fa\u9519\u3002\u4f46\u662f\u7a7a\u884c\u7684\u4f5c\u7528\u5728\u4e8e\u5206\u9694\u4e24\u6bb5\u4e0d\u540c\u529f\u80fd\u6216\u542b\u4e49\u7684\u4ee3\u7801\uff0c\u4fbf\u4e8e\u65e5\u540e\u4ee3\u7801\u7684\u7ef4\u62a4\u6216\u91cd\u6784\u3002 \u8bb0\u4f4f\uff1a \u7a7a\u884c\u4e5f\u662f\u7a0b\u5e8f\u4ee3\u7801\u7684\u4e00\u90e8\u5206\u3002 1.7 \u5b57\u7b26\u4e32 \u00b6 python\u4e2d\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u4f7f\u7528\u5b8c\u5168\u76f8\u540c\u3002 \u4f7f\u7528\u4e09\u5f15\u53f7('''\u6216\"\"\")\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u591a\u884c\u5b57\u7b26\u4e32\u3002 \u8f6c\u4e49\u7b26 \\ \u53cd\u659c\u6760\u53ef\u4ee5\u7528\u6765\u8f6c\u4e49\uff0c\u4f7f\u7528r\u53ef\u4ee5\u8ba9\u53cd\u659c\u6760\u4e0d\u53d1\u751f\u8f6c\u4e49\u3002\u3002 \u5982 r\"this is a line with \\n\" \u5219\\n\u4f1a\u663e\u793a\uff0c\u5e76\u4e0d\u662f\u6362\u884c\u3002 \u6309\u5b57\u9762\u610f\u4e49\u7ea7\u8054\u5b57\u7b26\u4e32\uff0c\u5982\"this \" \"is \" \"string\"\u4f1a\u88ab\u81ea\u52a8\u8f6c\u6362\u4e3athis is string\u3002 \u5b57\u7b26\u4e32\u53ef\u4ee5\u7528 + \u8fd0\u7b97\u7b26\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u7528 * \u8fd0\u7b97\u7b26\u91cd\u590d\u3002 Python \u4e2d\u7684\u5b57\u7b26\u4e32\u6709\u4e24\u79cd\u7d22\u5f15\u65b9\u5f0f\uff0c\u4ece\u5de6\u5f80\u53f3\u4ee5 0 \u5f00\u59cb\uff0c\u4ece\u53f3\u5f80\u5de6\u4ee5 -1 \u5f00\u59cb\u3002 Python\u4e2d\u7684\u5b57\u7b26\u4e32\u4e3a\u4e0d\u53ef\u53d8\u6570\u636e\u7c7b\u578b\uff1b\u9ad8\u6539\u53d8\u9664\u975e\u5b9a\u4e49\u65b0\u53d8\u91cf\u3002 Python \u6ca1\u6709\u5355\u72ec\u7684\u5b57\u7b26\u7c7b\u578b\uff0c\u4e00\u4e2a\u5b57\u7b26\u5c31\u662f\u957f\u5ea6\u4e3a 1 \u7684\u5b57\u7b26\u4e32\u3002 \u5b57\u7b26\u4e32\u7684\u622a\u53d6\u7684\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a \u53d8\u91cf[\u5934\u4e0b\u6807:\u5c3e\u4e0b\u6807:\u6b65\u957f] \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002 str() 1.8 \u6570\u5b57 \u00b6 \u6570\u503c\u5b57\u9762\u503c\u6709\u4e09\u79cd\u7c7b\u578b\uff1a\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u865a\u6570\u3002\u6ca1\u6709\u590d\u6570\u5b57\u9762\u503c\uff08\u590d\u6570\u7531\u5b9e\u6570\u52a0\u865a\u6570\u6784\u6210\uff09\u3002 \u6ce8\u610f\uff0c\u6570\u503c\u4e0d\u542b\u6b63\u8d1f\u53f7\uff1b\u5b9e\u9645\u4e0a\uff0c -1 \u7b49\u8d1f\u6570\u662f\u7531\u4e00\u5143\u8fd0\u7b97\u7b26 ' - ' \u548c\u5b57\u9762\u503c 1 \u5408\u6210\u7684\u3002 \u6570\u5b57\u4e5f\u4e3a\u4e0d\u53ef\u53d8\u6570\u636e\u7c7b\u578b\u3002 int() float() 1.9 \u8fd0\u7b97\u7b26 \u00b6 \u8fd0\u7b97\u7b26\u5982\u4e0b\u6240\u793a\uff1a + - * ** / // % @ << >> & | ^ ~ := < > <= >= == != ... 1.10 \u5206\u9694\u7b26 \u00b6 \u4ee5\u4e0b\u5f62\u7b26\u5728\u8bed\u6cd5\u4e2d\u4e3a\u5206\u9694\u7b26\uff1a ( ) [ ] { } , : . ; @ = -> += -= *= /= //= %= @= &= |= ^= >>= <<= **= \u53e5\u70b9\u4e5f\u53ef\u4ee5\u7528\u4e8e\u6d6e\u70b9\u6570\u548c\u865a\u6570\u5b57\u9762\u503c\u3002\u4e09\u4e2a\u8fde\u7eed\u53e5\u70b9\u8868\u793a\u7701\u7565\u7b26\u3002\u5217\u8868\u540e\u534a\u90e8\u5206\u662f\u589e\u5f3a\u8d4b\u503c\u64cd\u4f5c\u7b26\uff0c\u7528\u4f5c\u8bcd\u6cd5\u5206\u9694\u7b26\uff0c\u4f46\u4e5f\u53ef\u4ee5\u6267\u884c\u8fd0\u7b97\u3002 \u4ee5\u4e0b ASCII \u5b57\u7b26\u5177\u6709\u7279\u6b8a\u542b\u4e49\uff0c\u5bf9\u8bcd\u6cd5\u5206\u6790\u5668\u6709\u91cd\u8981\u610f\u4e49\uff1a ' \" # \\ \u4ee5\u4e0b ASCII \u5b57\u7b26\u4e0d\u7528\u4e8e Python\u3002\u5728\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u6216\u6ce8\u91ca\u5916\u4f7f\u7528\u65f6\uff0c\u5c06\u76f4\u63a5\u62a5\u9519\uff1a $ ? ` 1.11 print() \u00b6 def print ( self , * args , sep = ' ' , end = ' \\n ' , file = None ): # known special case of print \"\"\" print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False) Prints the values to a stream, or to sys.stdout by default. Optional keyword arguments: file: a file-like object (stream); defaults to the current sys.stdout. sep: string inserted between values, default a space. end: string appended after the last value, default a newline. flush: whether to forcibly flush the stream. \"\"\" pass 1.12 \u6a21\u5757\u5bfc\u5165 \u00b6 \u5728 python \u7528 import \u6216\u8005 from...import \u6765\u5bfc\u5165\u76f8\u5e94\u7684\u6a21\u5757\u3002 \u5c06\u6574\u4e2a\u6a21\u5757( somemodule )\u5bfc\u5165\uff0c\u683c\u5f0f\u4e3a\uff1a import somemodule \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u67d0\u4e2a\u51fd\u6570,\u683c\u5f0f\u4e3a\uff1a from somemodule import somefunction \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u591a\u4e2a\u51fd\u6570,\u683c\u5f0f\u4e3a\uff1a from somemodule import firstfunc, secondfunc, thirdfunc \u5c06\u67d0\u4e2a\u6a21\u5757\u4e2d\u7684\u5168\u90e8\u51fd\u6570\u5bfc\u5165\uff0c\u683c\u5f0f\u4e3a\uff1a from somemodule import * \u3002","title":"python\u57fa\u672c\u8bed\u6cd5"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#_1","text":"","title":"\u57fa\u672c\u8bed\u6cd5"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#11","text":"Python \u811a\u672c\u7b2c\u4e00\u6216\u7b2c\u4e8c\u884c\u7684\u6ce8\u91ca\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f coding[=:]\\s*([-\\w.]+) \u65f6\uff0c\u8be5\u6ce8\u91ca\u4f1a\u88ab\u5f53\u4f5c\u7f16\u7801\u58f0\u660e\uff1b\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u7b2c\u4e00\u7ec4\u6307\u5b9a\u4e86\u6e90\u7801\u6587\u4ef6\u7684\u7f16\u7801\u3002 \u7f16\u7801\u58f0\u660e\u5fc5\u987b\u72ec\u5360\u4e00\u884c\uff0c\u5728\u7b2c\u4e8c\u884c\u65f6\uff0c\u5219\u7b2c\u4e00\u884c\u5fc5\u987b\u4e5f\u662f\u6ce8\u91ca \u3002\u7f16\u7801\u8868\u8fbe\u5f0f\u7684\u5f62\u5f0f\u5982\u4e0b\uff1a # -*- coding: <encoding-name> -*- \u8fd9\u4e5f\u662f GNU Emacs \u8ba4\u53ef\u7684\u5f62\u5f0f\uff0c\u6b64\u5916\uff0c\u8fd8\u652f\u6301\u5982\u4e0b\u5f62\u5f0f\uff1a # vim:fileencoding=<encoding-name> \u8fd9\u662f Bram Moolenaar \u7684 VIM \u8ba4\u53ef\u7684\u5f62\u5f0f\u3002 \u6ca1\u6709\u7f16\u7801\u58f0\u660e\u65f6\uff0c\u9ed8\u8ba4\u7f16\u7801\u4e3a UTF-8 \uff1b\u58f0\u660e\u7684\u7f16\u7801\u540d\u79f0\u5fc5\u987b\u662f Python \u80fd\u8bc6\u522b\u7684\u3002\u8bed\u4e49\u5b57\u7b26\u4e32\u3001\u6ce8\u91ca\u548c\u6807\u8bc6\u7b26\u7b49\u8bcd\u6cd5\u5206\u6790\u90fd\u4f7f\u7528\u6b64\u7f16\u7801 \u3002","title":"1.1 \u7f16\u7801\u58f0\u660e"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#12","text":"python\u5355\u884c\u6ce8\u91ca\u4ee5\u4e95\u53f7 \uff08 # \uff09\u5f00\u5934\uff1b\u591a\u884c\u6ce8\u91ca\u53ef\u4ee5\u7528\u591a\u4e2a # \u53f7\uff0c\u8fd8\u6709\u4e24\u4e2a ''' \u548c\u4e24\u4e2a \"\"\"","title":"1.2 \u6ce8\u91ca"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#13","text":"","title":"1.3 \u591a\u884c\u8bed\u53e5"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#131","text":"\u4e24\u4e2a\u53ca\u4e24\u4e2a\u4ee5\u4e0a\u7684\u7269\u7406\u884c\u53ef\u7528\u53cd\u659c\u6760\uff08 \\ \uff09\u62fc\u63a5\u4e3a\u4e00\u4e2a\u903b\u8f91\u884c\uff0c\u89c4\u5219\u5982\u4e0b\uff1a\u4ee5\u4e0d\u5728\u5b57\u7b26\u4e32\u6216\u6ce8\u91ca\u5185\u7684\u53cd\u659c\u6760\u7ed3\u5c3e\u65f6\uff0c\u7269\u7406\u884c\u5c06\u4e0e\u4e0b\u4e00\u884c\u62fc\u63a5\u6210\u4e00\u4e2a\u903b\u8f91\u884c\uff0c\u5e76\u5220\u9664\u53cd\u659c\u6760\u53ca\u5176\u540e\u7684\u6362\u884c\u7b26\u3002\u4f8b\u5982\uff1a if 1900 < year < 2100 and 1 <= month <= 12 \\ and 1 <= day <= 31 and 0 <= hour < 24 \\ and 0 <= minute < 60 and 0 <= second < 60 : # Looks like a valid date return 1 \u4ee5\u53cd\u659c\u6760\u7ed3\u5c3e\u7684\u884c\uff0c\u4e0d\u80fd\u52a0\u6ce8\u91ca\uff1b\u53cd\u659c\u6760\u4e5f\u4e0d\u80fd\u62fc\u63a5\u6ce8\u91ca\u3002\u9664\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5916\uff0c\u53cd\u659c\u6760\u4e0d\u80fd\u62fc\u63a5\u5f62\u7b26\uff08\u5982\uff0c\u9664\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5916\uff0c\u4e0d\u80fd\u7528\u53cd\u659c\u6760\u628a\u5f62\u7b26\u5207\u5206\u81f3\u4e24\u4e2a\u7269\u7406\u884c\uff09\u3002\u53cd\u659c\u6760\u53ea\u80fd\u5728\u4ee3\u7801\u7684\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u91cc\uff0c\u5728\u5176\u4ed6\u4efb\u4f55\u4f4d\u7f6e\u90fd\u662f\u975e\u6cd5\u7684\u3002","title":"1.3.1 \u663e\u5f0f\u62fc\u63a5\u884c"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#132","text":"\u5706\u62ec\u53f7\u3001\u65b9\u62ec\u53f7\u3001\u82b1\u62ec\u53f7\u5185\u7684\u8868\u8fbe\u5f0f\u53ef\u4ee5\u5206\u6210\u591a\u4e2a\u7269\u7406\u884c\uff0c\u4e0d\u5fc5\u4f7f\u7528\u53cd\u659c\u6760\u3002\u4f8b\u5982\uff1a month_names = [ 'Januari' , 'Februari' , 'Maart' , # These are the 'April' , 'Mei' , 'Juni' , # Dutch names 'Juli' , 'Augustus' , 'September' , # for the months 'Oktober' , 'November' , 'December' ] # of the year \u9690\u5f0f\u884c\u62fc\u63a5\u53ef\u542b\u6ce8\u91ca\uff1b\u540e\u7eed\u884c\u7684\u7f29\u8fdb\u5e76\u4e0d\u91cd\u8981\uff1b\u8fd8\u652f\u6301\u7a7a\u7684\u540e\u7eed\u884c\u3002\u9690\u5f0f\u62fc\u63a5\u884c\u4e4b\u95f4\u6ca1\u6709 NEWLINE \u5f62\u7b26\u3002\u4e09\u5f15\u53f7\u5b57\u7b26\u4e32\u652f\u6301\u9690\u5f0f\u62fc\u63a5\u884c\uff08\u89c1\u4e0b\u6587\uff09\uff0c\u4f46\u4e0d\u652f\u6301\u6ce8\u91ca\u3002","title":"1.3.2 \u9690\u5f0f\u62fc\u63a5\u884c"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#133","text":"\u5b57\u7b26\u4e32\u53ef\u4ee5\u5b9e\u73b0\u8de8\u884c\u8fde\u7eed\u8f93\u5165\u3002\u5b9e\u73b0\u65b9\u5f0f\u662f\u7528\u4e09\u5f15\u53f7\uff1a \"\"\"...\"\"\" \u6216 '''...''' \uff0c\u5b57\u7b26\u4e32\u884c\u5c3e\u4f1a\u81ea\u52a8\u52a0\u4e0a\u56de\u8f66\u6362\u884c\uff0c\u5982\u679c\u4e0d\u9700\u8981\u56de\u8f66\u6362\u884c\uff0c\u5728\u884c\u5c3e\u6dfb\u52a0 \\ \u5373\u53ef \u3002\u793a\u4f8b\u5982\u4e0b\uff1a print ( \"\"\" \\ Usage: thingy [OPTIONS] -h Display this usage message -H hostname Hostname to connect to \"\"\" ) # \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff08\u6ce8\u610f\uff1a\u7b2c\u4e00\u884c\u6ca1\u6709\u6362\u884c\u7b26\uff09\uff1a Usage : thingy [ OPTIONS ] - h Display this usage message - H hostname Hostname to connect to","title":"1.3.3 \u4e09\u4e2a\u53cc\u5f15\u53f7\u6216\u4e09\u4e2a\u5355\u5f15\u53f7"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#14","text":"","title":"1.4 \u6807\u8bc6\u7b26\u548c\u5173\u952e\u5b57"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#141","text":"\u4e0e Python 2.x \u4e00\u6837\uff0c\u5728 ASCII \u8303\u56f4\u5185\uff08U+0001..U+007F\uff09\uff0c\u6709\u6548\u6807\u8bc6\u7b26\u5b57\u7b26\u4e3a\uff1a \u5927\u5c0f\u5199\u5b57\u6bcd A \u81f3 Z \u3001\u4e0b\u5212\u7ebf _ \u3001\u6570\u5b57 0 \u81f3 9 \uff0c\u4f46\u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934 \u3002","title":"1.4.1 \u6807\u8bc6\u7b26"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#142","text":"\u4fdd\u7559\u5b57\u5373\u5173\u952e\u5b57\uff0c\u6211\u4eec\u4e0d\u80fd\u628a\u5b83\u4eec\u7528\u4f5c\u4efb\u4f55\u6807\u8bc6\u7b26\u540d\u79f0\u3002Python \u7684\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2a keyword \u6a21\u5757\uff0c\u53ef\u4ee5\u8f93\u51fa\u5f53\u524d\u7248\u672c\u7684\u6240\u6709\u5173\u952e\u5b57\uff1a import keyword keyword . kwlist False await else import pass None break except in raise True class finally is return and continue for lambda try as def from nonlocal while assert del global not with async elif if or yield __peg_parser__ \u4fdd\u7559\u7684\u6807\u8bc6\u7b26\u7c7b\uff1a \u67d0\u4e9b\u6807\u8bc6\u7b26\u7c7b\uff08\u9664\u4e86\u5173\u952e\u5b57\uff09\u5177\u6709\u7279\u6b8a\u542b\u4e49\u3002\u8fd9\u4e9b\u7c7b\u7684\u547d\u540d\u6a21\u5f0f\u4ee5\u4e0b\u5212\u7ebf\u5b57\u7b26\u5f00\u5934\uff0c\u5e76\u4ee5\u4e0b\u5212\u7ebf\u7ed3\u5c3e\uff1a _* from module import * \u65f6\uff0c\u4e0d\u4f1a\u5bfc\u5165\u3002\u4ea4\u4e92\u5f0f\u89e3\u91ca\u5668\u4e2d\uff0c\u7279\u6b8a\u6807\u8bc6\u7b26 _ \u7528\u4e8e\u5b58\u50a8\u6700\u8fd1\u4e00\u6b21\u6c42\u503c\u7684\u7ed3\u679c\uff1b\u8be5\u6807\u8bc6\u7b26\u4fdd\u5b58\u5728 builtins \u6a21\u5757\u91cc\u3002\u4e0d\u5904\u4e8e\u4ea4\u4e92\u6a21\u5f0f\u65f6\uff0c _ \u6ca1\u6709\u7279\u6b8a\u542b\u4e49\uff0c\u4e5f\u6ca1\u6709\u9884\u5b9a\u4e49\u3002\u8be6\u89c1 import \u8bed\u53e5 \u3002\u6ce8\u89e3 _ \u5e38\u7528\u4e8e\u8fde\u63a5\u56fd\u9645\u5316\u6587\u672c\uff1b\u8be6\u89c1 gettext \u6a21\u5757\u6587\u6863\u3002 __*__ \u7cfb\u7edf\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u901a\u5e38\u7b80\u79f0\u4e3a \"dunder\" \u3002\u8fd9\u4e9b\u540d\u79f0\u7531\u89e3\u91ca\u5668\u53ca\u5176\u5b9e\u73b0\uff08\u5305\u62ec\u6807\u51c6\u5e93\uff09\u5b9a\u4e49\u3002\u73b0\u6709\u7cfb\u7edf\u5b9a\u4e49\u540d\u79f0\u76f8\u5173\u7684\u8bba\u8ff0\u8be6\u89c1 \u7279\u6b8a\u65b9\u6cd5\u540d\u79f0 \u7b49\u7ae0\u8282\u3002Python \u672a\u6765\u7248\u672c\u4e2d\u8fd8\u5c06\u5b9a\u4e49\u66f4\u591a\u6b64\u7c7b\u540d\u79f0\u3002\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c \u4efb\u4f55 \u4e0d\u663e\u5f0f\u9075\u4ece __*__ \u540d\u79f0\u7684\u6587\u6863\u7528\u6cd5\uff0c\u90fd\u53ef\u80fd\u5bfc\u81f4\u65e0\u8b66\u544a\u63d0\u793a\u7684\u9519\u8bef\u3002 __* \u7c7b\u7684\u79c1\u6709\u540d\u79f0\u3002\u7c7b\u5b9a\u4e49\u65f6\uff0c\u6b64\u7c7b\u540d\u79f0\u4ee5\u4e00\u79cd\u6df7\u5408\u5f62\u5f0f\u91cd\u5199\uff0c\u4ee5\u907f\u514d\u57fa\u7c7b\u53ca\u6d3e\u751f\u7c7b\u7684 \"\u79c1\u6709\" \u5c5e\u6027\u4e4b\u95f4\u4ea7\u751f\u540d\u79f0\u51b2\u7a81\u3002\u8be6\u89c1 \u6807\u8bc6\u7b26\uff08\u540d\u79f0\uff09 \u3002","title":"1.4.2 \u5173\u952e\u5b57"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#15","text":"python\u6700\u5177\u7279\u8272\u7684\u5c31\u662f\u4f7f\u7528\u7f29\u8fdb\u6765\u8868\u793a\u4ee3\u7801\u5757\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u5927\u62ec\u53f7 {} \u3002 \u7f29\u8fdb\u7684\u7a7a\u683c\u6570\u662f\u53ef\u53d8\u7684\uff0c\u4f46\u662f\u540c\u4e00\u4e2a\u4ee3\u7801\u5757\u7684\u8bed\u53e5\u5fc5\u987b\u5305\u542b\u76f8\u540c\u7684\u7f29\u8fdb\u7a7a\u683c\u6570\uff1b\u903b\u8f91\u884c\u5f00\u5934\u7684\u7a7a\u767d\u7b26\uff08\u7a7a\u683c\u7b26\u548c\u5236\u8868\u7b26\uff09\u7528\u4e8e\u8ba1\u7b97\u8be5\u884c\u7684\u7f29\u8fdb\u5c42\u7ea7\uff0c\u51b3\u5b9a\u8bed\u53e5\u7ec4\u5757\u3002","title":"1.5 \u884c\u4e0e\u7f29\u8fdb"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#16","text":"\u51fd\u6570\u4e4b\u95f4\u6216\u7c7b\u7684\u65b9\u6cd5\u4e4b\u95f4\u7528\u7a7a\u884c\u5206\u9694\uff0c\u8868\u793a\u4e00\u6bb5\u65b0\u7684\u4ee3\u7801\u7684\u5f00\u59cb\u3002\u7c7b\u548c\u51fd\u6570\u5165\u53e3\u4e4b\u95f4\u4e5f\u7528\u4e00\u884c\u7a7a\u884c\u5206\u9694\uff0c\u4ee5\u7a81\u51fa\u51fd\u6570\u5165\u53e3\u7684\u5f00\u59cb\u3002 \u7a7a\u884c\u4e0e\u4ee3\u7801\u7f29\u8fdb\u4e0d\u540c\uff0c\u7a7a\u884c\u5e76\u4e0d\u662fPython\u8bed\u6cd5\u7684\u4e00\u90e8\u5206\u3002\u4e66\u5199\u65f6\u4e0d\u63d2\u5165\u7a7a\u884c\uff0cPython\u89e3\u91ca\u5668\u8fd0\u884c\u4e5f\u4e0d\u4f1a\u51fa\u9519\u3002\u4f46\u662f\u7a7a\u884c\u7684\u4f5c\u7528\u5728\u4e8e\u5206\u9694\u4e24\u6bb5\u4e0d\u540c\u529f\u80fd\u6216\u542b\u4e49\u7684\u4ee3\u7801\uff0c\u4fbf\u4e8e\u65e5\u540e\u4ee3\u7801\u7684\u7ef4\u62a4\u6216\u91cd\u6784\u3002 \u8bb0\u4f4f\uff1a \u7a7a\u884c\u4e5f\u662f\u7a0b\u5e8f\u4ee3\u7801\u7684\u4e00\u90e8\u5206\u3002","title":"1.6 \u7a7a\u884c"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#17","text":"python\u4e2d\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u4f7f\u7528\u5b8c\u5168\u76f8\u540c\u3002 \u4f7f\u7528\u4e09\u5f15\u53f7('''\u6216\"\"\")\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u591a\u884c\u5b57\u7b26\u4e32\u3002 \u8f6c\u4e49\u7b26 \\ \u53cd\u659c\u6760\u53ef\u4ee5\u7528\u6765\u8f6c\u4e49\uff0c\u4f7f\u7528r\u53ef\u4ee5\u8ba9\u53cd\u659c\u6760\u4e0d\u53d1\u751f\u8f6c\u4e49\u3002\u3002 \u5982 r\"this is a line with \\n\" \u5219\\n\u4f1a\u663e\u793a\uff0c\u5e76\u4e0d\u662f\u6362\u884c\u3002 \u6309\u5b57\u9762\u610f\u4e49\u7ea7\u8054\u5b57\u7b26\u4e32\uff0c\u5982\"this \" \"is \" \"string\"\u4f1a\u88ab\u81ea\u52a8\u8f6c\u6362\u4e3athis is string\u3002 \u5b57\u7b26\u4e32\u53ef\u4ee5\u7528 + \u8fd0\u7b97\u7b26\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u7528 * \u8fd0\u7b97\u7b26\u91cd\u590d\u3002 Python \u4e2d\u7684\u5b57\u7b26\u4e32\u6709\u4e24\u79cd\u7d22\u5f15\u65b9\u5f0f\uff0c\u4ece\u5de6\u5f80\u53f3\u4ee5 0 \u5f00\u59cb\uff0c\u4ece\u53f3\u5f80\u5de6\u4ee5 -1 \u5f00\u59cb\u3002 Python\u4e2d\u7684\u5b57\u7b26\u4e32\u4e3a\u4e0d\u53ef\u53d8\u6570\u636e\u7c7b\u578b\uff1b\u9ad8\u6539\u53d8\u9664\u975e\u5b9a\u4e49\u65b0\u53d8\u91cf\u3002 Python \u6ca1\u6709\u5355\u72ec\u7684\u5b57\u7b26\u7c7b\u578b\uff0c\u4e00\u4e2a\u5b57\u7b26\u5c31\u662f\u957f\u5ea6\u4e3a 1 \u7684\u5b57\u7b26\u4e32\u3002 \u5b57\u7b26\u4e32\u7684\u622a\u53d6\u7684\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a \u53d8\u91cf[\u5934\u4e0b\u6807:\u5c3e\u4e0b\u6807:\u6b65\u957f] \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002 str()","title":"1.7 \u5b57\u7b26\u4e32"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#18","text":"\u6570\u503c\u5b57\u9762\u503c\u6709\u4e09\u79cd\u7c7b\u578b\uff1a\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u865a\u6570\u3002\u6ca1\u6709\u590d\u6570\u5b57\u9762\u503c\uff08\u590d\u6570\u7531\u5b9e\u6570\u52a0\u865a\u6570\u6784\u6210\uff09\u3002 \u6ce8\u610f\uff0c\u6570\u503c\u4e0d\u542b\u6b63\u8d1f\u53f7\uff1b\u5b9e\u9645\u4e0a\uff0c -1 \u7b49\u8d1f\u6570\u662f\u7531\u4e00\u5143\u8fd0\u7b97\u7b26 ' - ' \u548c\u5b57\u9762\u503c 1 \u5408\u6210\u7684\u3002 \u6570\u5b57\u4e5f\u4e3a\u4e0d\u53ef\u53d8\u6570\u636e\u7c7b\u578b\u3002 int() float()","title":"1.8 \u6570\u5b57"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#19","text":"\u8fd0\u7b97\u7b26\u5982\u4e0b\u6240\u793a\uff1a + - * ** / // % @ << >> & | ^ ~ := < > <= >= == != ...","title":"1.9 \u8fd0\u7b97\u7b26"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#110","text":"\u4ee5\u4e0b\u5f62\u7b26\u5728\u8bed\u6cd5\u4e2d\u4e3a\u5206\u9694\u7b26\uff1a ( ) [ ] { } , : . ; @ = -> += -= *= /= //= %= @= &= |= ^= >>= <<= **= \u53e5\u70b9\u4e5f\u53ef\u4ee5\u7528\u4e8e\u6d6e\u70b9\u6570\u548c\u865a\u6570\u5b57\u9762\u503c\u3002\u4e09\u4e2a\u8fde\u7eed\u53e5\u70b9\u8868\u793a\u7701\u7565\u7b26\u3002\u5217\u8868\u540e\u534a\u90e8\u5206\u662f\u589e\u5f3a\u8d4b\u503c\u64cd\u4f5c\u7b26\uff0c\u7528\u4f5c\u8bcd\u6cd5\u5206\u9694\u7b26\uff0c\u4f46\u4e5f\u53ef\u4ee5\u6267\u884c\u8fd0\u7b97\u3002 \u4ee5\u4e0b ASCII \u5b57\u7b26\u5177\u6709\u7279\u6b8a\u542b\u4e49\uff0c\u5bf9\u8bcd\u6cd5\u5206\u6790\u5668\u6709\u91cd\u8981\u610f\u4e49\uff1a ' \" # \\ \u4ee5\u4e0b ASCII \u5b57\u7b26\u4e0d\u7528\u4e8e Python\u3002\u5728\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u6216\u6ce8\u91ca\u5916\u4f7f\u7528\u65f6\uff0c\u5c06\u76f4\u63a5\u62a5\u9519\uff1a $ ? `","title":"1.10 \u5206\u9694\u7b26"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#111-print","text":"def print ( self , * args , sep = ' ' , end = ' \\n ' , file = None ): # known special case of print \"\"\" print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False) Prints the values to a stream, or to sys.stdout by default. Optional keyword arguments: file: a file-like object (stream); defaults to the current sys.stdout. sep: string inserted between values, default a space. end: string appended after the last value, default a newline. flush: whether to forcibly flush the stream. \"\"\" pass","title":"1.11 print()"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#112","text":"\u5728 python \u7528 import \u6216\u8005 from...import \u6765\u5bfc\u5165\u76f8\u5e94\u7684\u6a21\u5757\u3002 \u5c06\u6574\u4e2a\u6a21\u5757( somemodule )\u5bfc\u5165\uff0c\u683c\u5f0f\u4e3a\uff1a import somemodule \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u67d0\u4e2a\u51fd\u6570,\u683c\u5f0f\u4e3a\uff1a from somemodule import somefunction \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u591a\u4e2a\u51fd\u6570,\u683c\u5f0f\u4e3a\uff1a from somemodule import firstfunc, secondfunc, thirdfunc \u5c06\u67d0\u4e2a\u6a21\u5757\u4e2d\u7684\u5168\u90e8\u51fd\u6570\u5bfc\u5165\uff0c\u683c\u5f0f\u4e3a\uff1a from somemodule import * \u3002","title":"1.12 \u6a21\u5757\u5bfc\u5165"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E4%B8%8E%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6/","text":"\u5faa\u73af\u8bed\u53e5\u3001\u6761\u4ef6\u63a7\u5236 \u00b6 Python \u4e2d\u7684\u5faa\u73af\u8bed\u53e5\u6709 for \u548c while \uff1b\u6761\u4ef6\u63a7\u5236\u4e3b\u8981\u662f if\u8bed\u53e5 \u3002 1.1 while \u5faa\u73af \u00b6 1.1.1 \u57fa\u672c\u8bed\u53e5 \u00b6 \u8981\u6ce8\u610f\u5192\u53f7\u548c\u7f29\u8fdb\uff1a while \u5224\u65ad\u6761\u4ef6 ( condition ) \uff1a \u6267\u884c\u8bed\u53e5 ( statements ) \u2026\u2026 \u4ee5\u4e0b\u5b9e\u4f8b\u4f7f\u7528\u4e86 while \u6765\u8ba1\u7b97 1 \u5230 100 \u7684\u603b\u548c\uff1a n = 100 sum = 0 counter = 1 while counter <= n : sum = sum + counter counter += 1 print ( f '1 \u5230 { n } \u4e4b\u548c\u4e3a\uff1a { sum } ' ) # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a1 \u5230 100 \u4e4b\u548c\u4e3a: 5050 1.1.2 \u65e0\u9650\u5faa\u73af \u00b6 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u6761\u4ef6\u8868\u8fbe\u5f0f\u6c38\u8fdc\u4e0d\u4e3a false \u6765\u5b9e\u73b0\u65e0\u9650\u5faa\u73af\uff0c\u4ee5\u4f7f\u7528 CTRL+C \u6765\u9000\u51fa\u5f53\u524d\u7684\u65e0\u9650\u5faa\u73af\u3002 1.1.3 while \u5faa\u73af\u4f7f\u7528 else \u8bed\u53e5 \u00b6 \u5728 while \u2026 else \u5728\u6761\u4ef6\u8bed\u53e5\u4e3a false \u65f6\u6267\u884c else \u7684\u8bed\u53e5\u5757\u3002 \u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a while < expr > : < statement ( s ) > else : < additional_statement ( s ) > \u5b9e\u4f8b\uff1a count = 0 while count < 5 : print ( count , \" \u5c0f\u4e8e 5\" ) count = count + 1 else : print ( count , \" \u5927\u4e8e\u6216\u7b49\u4e8e 5\" ) # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a 0 \u5c0f\u4e8e 5 1 \u5c0f\u4e8e 5 2 \u5c0f\u4e8e 5 3 \u5c0f\u4e8e 5 4 \u5c0f\u4e8e 5 5 \u5927\u4e8e\u6216\u7b49\u4e8e 5 1.2 for \u8bed\u53e5 \u00b6 Python for \u5faa\u73af\u53ef\u4ee5\u904d\u5386\u4efb\u4f55\u53ef\u9009\u4ee3\u5bf9\u8c61\uff0c\u5982\u4e00\u4e2a\u5217\u8868\u6216\u8005\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 for\u5faa\u73af\u7684\u4e00\u822c\u683c\u5f0f\u5982\u4e0b\uff1a for < variable > in < sequence > : < statements > else : < statements > 1.3 range() \u00b6 \u5185\u7f6e\u51fd\u6570 range() \u5e38\u7528\u4e8e\u904d\u5386\u6570\u5b57\u5e8f\u5217\uff0c\u751f\u6210\u7684\u5e8f\u5217\u4e0d\u5305\u542b\u7ed9\u5b9a\u7684\u7ec8\u6b62\u6570\u503c\uff1b range(10) \u751f\u6210 10 \u4e2a\u503c\uff0c\u8fd9\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 10 \u7684\u5e8f\u5217\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u7d22\u5f15\u90fd\u662f\u5408\u6cd5\u7684\u3002range \u53ef\u4ee5\u4e0d\u4ece 0 \u5f00\u59cb\uff0c\u8fd8\u53ef\u4ee5\u6309\u6307\u5b9a\u5e45\u5ea6\u9012\u589e\uff08\u9012\u589e\u5e45\u5ea6\u79f0\u4e3a '\u6b65\u8fdb'\uff0c\u652f\u6301\u8d1f\u6570\uff09\uff1a range ( 5 , 10 ) 5 , 6 , 7 , 8 , 9 range ( 0 , 10 , 3 ) 0 , 3 , 6 , 9 range ( - 10 , - 100 , - 30 ) - 10 , - 40 , - 70 range() \u548c len() \u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u53ef\u4ee5\u6309\u7d22\u5f15\u8fed\u4ee3\u5e8f\u5217\uff1a a = [ 'Mary' , 'had' , 'a' , 'little' , 'lamb' ] for i in range ( len ( a )): print ( i , a [ i ]) # \u8f93\u51fa\u7ed3\u679c 0 Mary 1 had 2 a 3 little 4 lamb 1.4 \u5faa\u73af\u4e2d\u7684 break \u3001 continue \u8bed\u53e5\u53ca else \u5b50\u53e5 \u00b6 break \u8bed\u53e5\u548c C \u4e2d\u7684\u7c7b\u4f3c\uff0c\u7528\u4e8e\u8df3\u51fa\u6700\u8fd1\u7684 for \u6216 while \u5faa\u73af\u3002 \u5faa\u73af\u8bed\u53e5\u652f\u6301 else \u5b50\u53e5\uff1a for \u5faa\u73af\u4e2d\uff0c\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u5143\u7d20\u5168\u90e8\u5faa\u73af\u5b8c\u6bd5\u65f6\uff0c\u6216 while \u5faa\u73af\u7684\u6761\u4ef6\u4e3a\u5047\u65f6\uff0c\u6267\u884c\u8be5\u5b50\u53e5\uff1b break \u8bed\u53e5\u7ec8\u6b62\u5faa\u73af\u65f6\uff0c\u4e0d\u6267\u884c\u8be5\u5b50\u53e5\u3002 \u8bf7\u770b\u4e0b\u9762\u8fd9\u4e2a\u67e5\u627e\u7d20\u6570\u7684\u5faa\u73af\u793a\u4f8b\uff1a for n in range ( 2 , 10 ): for x in range ( 2 , n ): if n % x == 0 : print ( n , 'equals' , x , '*' , n // x ) break else : # loop fell through without finding a factor print ( n , 'is a prime number' ) # \u8f93\u51fa\u7ed3\u679c 2 is a prime number 3 is a prime number 4 equals 2 * 2 5 is a prime number 6 equals 2 * 3 7 is a prime number 8 equals 2 * 4 9 equals 3 * 3 continue \u8bed\u53e5\u4e5f\u501f\u9274\u81ea C \u8bed\u8a00\uff0c\u8868\u793a\u7ee7\u7eed\u6267\u884c\u5faa\u73af\u7684\u4e0b\u4e00\u6b21\u8fed\u4ee3\uff1a for num in range ( 2 , 10 ): if num % 2 == 0 : print ( \"Found an even number\" , num ) continue print ( \"Found an odd number\" , num ) # \u8f93\u51fa\u7ed3\u679c Found an even number 2 Found an odd number 3 Found an even number 4 Found an odd number 5 Found an even number 6 Found an odd number 7 Found an even number 8 Found an odd number 9 1.5 pass \u8bed\u53e5 \u00b6 pass \u8bed\u53e5\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\u8bed\u6cd5\u4e0a\u9700\u8981\u4e00\u4e2a\u8bed\u53e5\uff0c\u4f46\u7a0b\u5e8f\u4e0d\u5b9e\u9645\u6267\u884c\u4efb\u4f55\u52a8\u4f5c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u8be5\u8bed\u53e5\u3002\u4f8b\u5982\uff1a while True : pass # Busy-wait for keyboard interrupt (Ctrl+C) \u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u521b\u5efa\u4e86\u4e00\u4e2a\u6700\u5c0f\u7684\u7c7b\uff1a class MyEmptyClass : pass pass \u8fd8\u53ef\u4ee5\u7528\u4f5c\u51fd\u6570\u6216\u6761\u4ef6\u5b50\u53e5\u7684\u5360\u4f4d\u7b26\uff0c\u8ba9\u5f00\u53d1\u8005\u805a\u7126\u66f4\u62bd\u8c61\u7684\u5c42\u6b21\u3002\u6b64\u65f6\uff0c\u7a0b\u5e8f\u76f4\u63a5\u5ffd\u7565 pass \uff1a def initlog ( * args ): pass # Remember to implement this! 1.6 if \u8bed\u53e5 \u00b6 Python\u4e2dif\u8bed\u53e5\u7684\u4e00\u822c\u5f62\u5f0f\u5982\u4e0b\u6240\u793a\uff1a if condition_1 : statement_block_1 elif condition_2 : statement_block_2 else : statement_block_3 # \u5982\u679c \"condition_1\" \u4e3a True \u5c06\u6267\u884c \"statement_block_1\" \u5757\u8bed\u53e5 # \u5982\u679c \"condition_1\" \u4e3aFalse\uff0c\u5c06\u5224\u65ad \"condition_2\" # \u5982\u679c\"condition_2\" \u4e3a True \u5c06\u6267\u884c \"statement_block_2\" \u5757\u8bed\u53e5 # \u5982\u679c \"condition_2\" \u4e3aFalse\uff0c\u5c06\u6267\u884c\"statement_block_3\"\u5757\u8bed\u53e5 if \u8bed\u53e5\u5305\u542b\u96f6\u4e2a\u6216\u591a\u4e2a elif \u5b50\u53e5\uff0c\u53ca\u53ef\u9009\u7684 else \u5b50\u53e5\u3002\u5173\u952e\u5b57 ' elif ' \u662f 'else if' \u7684\u7f29\u5199\uff0c\u9002\u7528\u4e8e\u907f\u514d\u8fc7\u591a\u7684\u7f29\u8fdb\u3002\u53ef\u4ee5\u628a if ... elif ... elif ... \u5e8f\u5217\u770b\u4f5c\u662f\u5176\u4ed6\u8bed\u8a00\u4e2d switch \u6216 case \u8bed\u53e5\u7684\u66ff\u4ee3\u54c1\u3002\u6bcf\u4e2a\u6761\u4ef6\u540e\u9762\u8981\u4f7f\u7528\u5192\u53f7 : \uff0c\u8868\u793a\u63a5\u4e0b\u6765\u662f\u6ee1\u8db3\u6761\u4ef6\u540e\u8981\u6267\u884c\u7684\u8bed\u53e5\u5757\uff1b\u4f7f\u7528\u7f29\u8fdb\u6765\u5212\u5206\u8bed\u53e5\u5757\uff0c\u76f8\u540c\u7f29\u8fdb\u6570\u7684\u8bed\u53e5\u5728\u4e00\u8d77\u7ec4\u6210\u4e00\u4e2a\u8bed\u53e5\u5757\u3002 \u53e6\u5916\uff0cif\u8bed\u53e5\u8fd8\u652f\u6301\u5d4c\u5957\uff1a\u5728\u5d4c\u5957 if \u8bed\u53e5\u4e2d\uff0c\u53ef\u4ee5\u628a if...elif...else \u7ed3\u6784\u653e\u5728\u53e6\u5916\u4e00\u4e2a if...elif...else \u7ed3\u6784\u4e2d\u3002 if \u8868\u8fbe\u5f0f1 : \u8bed\u53e5 if \u8868\u8fbe\u5f0f2 : \u8bed\u53e5 elif \u8868\u8fbe\u5f0f3 : \u8bed\u53e5 else : \u8bed\u53e5 elif \u8868\u8fbe\u5f0f4 : \u8bed\u53e5 else : \u8bed\u53e5","title":"\u5faa\u73af\u8bed\u53e5\u4e0e\u6761\u4ef6\u63a7\u5236"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E4%B8%8E%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6/#_1","text":"Python \u4e2d\u7684\u5faa\u73af\u8bed\u53e5\u6709 for \u548c while \uff1b\u6761\u4ef6\u63a7\u5236\u4e3b\u8981\u662f if\u8bed\u53e5 \u3002","title":"\u5faa\u73af\u8bed\u53e5\u3001\u6761\u4ef6\u63a7\u5236"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E4%B8%8E%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6/#11-while","text":"","title":"1.1 while \u5faa\u73af"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E4%B8%8E%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6/#111","text":"\u8981\u6ce8\u610f\u5192\u53f7\u548c\u7f29\u8fdb\uff1a while \u5224\u65ad\u6761\u4ef6 ( condition ) \uff1a \u6267\u884c\u8bed\u53e5 ( statements ) \u2026\u2026 \u4ee5\u4e0b\u5b9e\u4f8b\u4f7f\u7528\u4e86 while \u6765\u8ba1\u7b97 1 \u5230 100 \u7684\u603b\u548c\uff1a n = 100 sum = 0 counter = 1 while counter <= n : sum = sum + counter counter += 1 print ( f '1 \u5230 { n } \u4e4b\u548c\u4e3a\uff1a { sum } ' ) # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a1 \u5230 100 \u4e4b\u548c\u4e3a: 5050","title":"1.1.1 \u57fa\u672c\u8bed\u53e5"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E4%B8%8E%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6/#112","text":"\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u6761\u4ef6\u8868\u8fbe\u5f0f\u6c38\u8fdc\u4e0d\u4e3a false \u6765\u5b9e\u73b0\u65e0\u9650\u5faa\u73af\uff0c\u4ee5\u4f7f\u7528 CTRL+C \u6765\u9000\u51fa\u5f53\u524d\u7684\u65e0\u9650\u5faa\u73af\u3002","title":"1.1.2 \u65e0\u9650\u5faa\u73af"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E4%B8%8E%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6/#113-while-else","text":"\u5728 while \u2026 else \u5728\u6761\u4ef6\u8bed\u53e5\u4e3a false \u65f6\u6267\u884c else \u7684\u8bed\u53e5\u5757\u3002 \u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a while < expr > : < statement ( s ) > else : < additional_statement ( s ) > \u5b9e\u4f8b\uff1a count = 0 while count < 5 : print ( count , \" \u5c0f\u4e8e 5\" ) count = count + 1 else : print ( count , \" \u5927\u4e8e\u6216\u7b49\u4e8e 5\" ) # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a 0 \u5c0f\u4e8e 5 1 \u5c0f\u4e8e 5 2 \u5c0f\u4e8e 5 3 \u5c0f\u4e8e 5 4 \u5c0f\u4e8e 5 5 \u5927\u4e8e\u6216\u7b49\u4e8e 5","title":"1.1.3 while \u5faa\u73af\u4f7f\u7528 else \u8bed\u53e5"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E4%B8%8E%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6/#12-for","text":"Python for \u5faa\u73af\u53ef\u4ee5\u904d\u5386\u4efb\u4f55\u53ef\u9009\u4ee3\u5bf9\u8c61\uff0c\u5982\u4e00\u4e2a\u5217\u8868\u6216\u8005\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 for\u5faa\u73af\u7684\u4e00\u822c\u683c\u5f0f\u5982\u4e0b\uff1a for < variable > in < sequence > : < statements > else : < statements >","title":"1.2 for \u8bed\u53e5"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E4%B8%8E%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6/#13-range","text":"\u5185\u7f6e\u51fd\u6570 range() \u5e38\u7528\u4e8e\u904d\u5386\u6570\u5b57\u5e8f\u5217\uff0c\u751f\u6210\u7684\u5e8f\u5217\u4e0d\u5305\u542b\u7ed9\u5b9a\u7684\u7ec8\u6b62\u6570\u503c\uff1b range(10) \u751f\u6210 10 \u4e2a\u503c\uff0c\u8fd9\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 10 \u7684\u5e8f\u5217\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u7d22\u5f15\u90fd\u662f\u5408\u6cd5\u7684\u3002range \u53ef\u4ee5\u4e0d\u4ece 0 \u5f00\u59cb\uff0c\u8fd8\u53ef\u4ee5\u6309\u6307\u5b9a\u5e45\u5ea6\u9012\u589e\uff08\u9012\u589e\u5e45\u5ea6\u79f0\u4e3a '\u6b65\u8fdb'\uff0c\u652f\u6301\u8d1f\u6570\uff09\uff1a range ( 5 , 10 ) 5 , 6 , 7 , 8 , 9 range ( 0 , 10 , 3 ) 0 , 3 , 6 , 9 range ( - 10 , - 100 , - 30 ) - 10 , - 40 , - 70 range() \u548c len() \u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u53ef\u4ee5\u6309\u7d22\u5f15\u8fed\u4ee3\u5e8f\u5217\uff1a a = [ 'Mary' , 'had' , 'a' , 'little' , 'lamb' ] for i in range ( len ( a )): print ( i , a [ i ]) # \u8f93\u51fa\u7ed3\u679c 0 Mary 1 had 2 a 3 little 4 lamb","title":"1.3 range()"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E4%B8%8E%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6/#14-breakcontinue-else","text":"break \u8bed\u53e5\u548c C \u4e2d\u7684\u7c7b\u4f3c\uff0c\u7528\u4e8e\u8df3\u51fa\u6700\u8fd1\u7684 for \u6216 while \u5faa\u73af\u3002 \u5faa\u73af\u8bed\u53e5\u652f\u6301 else \u5b50\u53e5\uff1a for \u5faa\u73af\u4e2d\uff0c\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u5143\u7d20\u5168\u90e8\u5faa\u73af\u5b8c\u6bd5\u65f6\uff0c\u6216 while \u5faa\u73af\u7684\u6761\u4ef6\u4e3a\u5047\u65f6\uff0c\u6267\u884c\u8be5\u5b50\u53e5\uff1b break \u8bed\u53e5\u7ec8\u6b62\u5faa\u73af\u65f6\uff0c\u4e0d\u6267\u884c\u8be5\u5b50\u53e5\u3002 \u8bf7\u770b\u4e0b\u9762\u8fd9\u4e2a\u67e5\u627e\u7d20\u6570\u7684\u5faa\u73af\u793a\u4f8b\uff1a for n in range ( 2 , 10 ): for x in range ( 2 , n ): if n % x == 0 : print ( n , 'equals' , x , '*' , n // x ) break else : # loop fell through without finding a factor print ( n , 'is a prime number' ) # \u8f93\u51fa\u7ed3\u679c 2 is a prime number 3 is a prime number 4 equals 2 * 2 5 is a prime number 6 equals 2 * 3 7 is a prime number 8 equals 2 * 4 9 equals 3 * 3 continue \u8bed\u53e5\u4e5f\u501f\u9274\u81ea C \u8bed\u8a00\uff0c\u8868\u793a\u7ee7\u7eed\u6267\u884c\u5faa\u73af\u7684\u4e0b\u4e00\u6b21\u8fed\u4ee3\uff1a for num in range ( 2 , 10 ): if num % 2 == 0 : print ( \"Found an even number\" , num ) continue print ( \"Found an odd number\" , num ) # \u8f93\u51fa\u7ed3\u679c Found an even number 2 Found an odd number 3 Found an even number 4 Found an odd number 5 Found an even number 6 Found an odd number 7 Found an even number 8 Found an odd number 9","title":"1.4 \u5faa\u73af\u4e2d\u7684 break\u3001continue \u8bed\u53e5\u53ca else \u5b50\u53e5"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E4%B8%8E%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6/#15-pass","text":"pass \u8bed\u53e5\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\u8bed\u6cd5\u4e0a\u9700\u8981\u4e00\u4e2a\u8bed\u53e5\uff0c\u4f46\u7a0b\u5e8f\u4e0d\u5b9e\u9645\u6267\u884c\u4efb\u4f55\u52a8\u4f5c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u8be5\u8bed\u53e5\u3002\u4f8b\u5982\uff1a while True : pass # Busy-wait for keyboard interrupt (Ctrl+C) \u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u521b\u5efa\u4e86\u4e00\u4e2a\u6700\u5c0f\u7684\u7c7b\uff1a class MyEmptyClass : pass pass \u8fd8\u53ef\u4ee5\u7528\u4f5c\u51fd\u6570\u6216\u6761\u4ef6\u5b50\u53e5\u7684\u5360\u4f4d\u7b26\uff0c\u8ba9\u5f00\u53d1\u8005\u805a\u7126\u66f4\u62bd\u8c61\u7684\u5c42\u6b21\u3002\u6b64\u65f6\uff0c\u7a0b\u5e8f\u76f4\u63a5\u5ffd\u7565 pass \uff1a def initlog ( * args ): pass # Remember to implement this!","title":"1.5 pass \u8bed\u53e5"},{"location":"python%E5%9F%BA%E7%A1%80/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E4%B8%8E%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6/#16-if","text":"Python\u4e2dif\u8bed\u53e5\u7684\u4e00\u822c\u5f62\u5f0f\u5982\u4e0b\u6240\u793a\uff1a if condition_1 : statement_block_1 elif condition_2 : statement_block_2 else : statement_block_3 # \u5982\u679c \"condition_1\" \u4e3a True \u5c06\u6267\u884c \"statement_block_1\" \u5757\u8bed\u53e5 # \u5982\u679c \"condition_1\" \u4e3aFalse\uff0c\u5c06\u5224\u65ad \"condition_2\" # \u5982\u679c\"condition_2\" \u4e3a True \u5c06\u6267\u884c \"statement_block_2\" \u5757\u8bed\u53e5 # \u5982\u679c \"condition_2\" \u4e3aFalse\uff0c\u5c06\u6267\u884c\"statement_block_3\"\u5757\u8bed\u53e5 if \u8bed\u53e5\u5305\u542b\u96f6\u4e2a\u6216\u591a\u4e2a elif \u5b50\u53e5\uff0c\u53ca\u53ef\u9009\u7684 else \u5b50\u53e5\u3002\u5173\u952e\u5b57 ' elif ' \u662f 'else if' \u7684\u7f29\u5199\uff0c\u9002\u7528\u4e8e\u907f\u514d\u8fc7\u591a\u7684\u7f29\u8fdb\u3002\u53ef\u4ee5\u628a if ... elif ... elif ... \u5e8f\u5217\u770b\u4f5c\u662f\u5176\u4ed6\u8bed\u8a00\u4e2d switch \u6216 case \u8bed\u53e5\u7684\u66ff\u4ee3\u54c1\u3002\u6bcf\u4e2a\u6761\u4ef6\u540e\u9762\u8981\u4f7f\u7528\u5192\u53f7 : \uff0c\u8868\u793a\u63a5\u4e0b\u6765\u662f\u6ee1\u8db3\u6761\u4ef6\u540e\u8981\u6267\u884c\u7684\u8bed\u53e5\u5757\uff1b\u4f7f\u7528\u7f29\u8fdb\u6765\u5212\u5206\u8bed\u53e5\u5757\uff0c\u76f8\u540c\u7f29\u8fdb\u6570\u7684\u8bed\u53e5\u5728\u4e00\u8d77\u7ec4\u6210\u4e00\u4e2a\u8bed\u53e5\u5757\u3002 \u53e6\u5916\uff0cif\u8bed\u53e5\u8fd8\u652f\u6301\u5d4c\u5957\uff1a\u5728\u5d4c\u5957 if \u8bed\u53e5\u4e2d\uff0c\u53ef\u4ee5\u628a if...elif...else \u7ed3\u6784\u653e\u5728\u53e6\u5916\u4e00\u4e2a if...elif...else \u7ed3\u6784\u4e2d\u3002 if \u8868\u8fbe\u5f0f1 : \u8bed\u53e5 if \u8868\u8fbe\u5f0f2 : \u8bed\u53e5 elif \u8868\u8fbe\u5f0f3 : \u8bed\u53e5 else : \u8bed\u53e5 elif \u8868\u8fbe\u5f0f4 : \u8bed\u53e5 else : \u8bed\u53e5","title":"1.6 if \u8bed\u53e5"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","text":"\u6570\u636e\u7ed3\u6784 \u00b6 1.1 \u5217\u8868 \u00b6 \u5e8f\u5217\u662f Python \u4e2d\u6700\u57fa\u672c\u7684\u6570\u636e\u7ed3\u6784\uff1b\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u503c\u90fd\u6709\u5bf9\u5e94\u7684\u4f4d\u7f6e\u503c\uff0c\u79f0\u4e4b\u4e3a\u7d22\u5f15\uff0c\u7b2c\u4e00\u4e2a\u7d22\u5f15\u662f 0\uff0c\u7b2c\u4e8c\u4e2a\u7d22\u5f15\u662f 1\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u5217\u8868\u90fd\u53ef\u4ee5\u8fdb\u884c\u7684\u64cd\u4f5c\u5305\u62ec\u7d22\u5f15\uff0c\u5207\u7247\uff0c\u52a0\uff0c\u4e58\uff0c\u68c0\u67e5\u6210\u5458\u3002\u6b64\u5916\uff0cPython \u5df2\u7ecf\u5185\u7f6e\u786e\u5b9a\u5e8f\u5217\u7684\u957f\u5ea6\u4ee5\u53ca\u786e\u5b9a\u6700\u5927\u548c\u6700\u5c0f\u7684\u5143\u7d20\u7684\u65b9\u6cd5\u3002\u5217\u8868\u662f\u6700\u5e38\u7528\u7684 Python \u6570\u636e\u7c7b\u578b\uff0c\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u65b9\u62ec\u53f7\u5185\u7684\u9017\u53f7\u5206\u9694\u503c\u51fa\u73b0\u3002 \u5217\u8868\u7684\u6570\u636e\u9879\u4e0d\u9700\u8981\u5177\u6709\u76f8\u540c\u7684\u7c7b\u578b\uff1b\u521b\u5efa\u4e00\u4e2a\u5217\u8868\uff0c\u53ea\u8981\u628a\u9017\u53f7\u5206\u9694\u7684\u4e0d\u540c\u7684\u6570\u636e\u9879\u4f7f\u7528\u65b9\u62ec\u53f7\u62ec\u8d77\u6765\u5373\u53ef\u3002\u5982\u4e0b\u6240\u793a\uff1a list1 = [ 'a' , 'b' , 'c' , 'd' ] \u8bbf\u95ee\u5217\u8868\u4e2d\u7684\u503c \uff1a\u4e0e\u5b57\u7b26\u4e32\u7684\u7d22\u5f15\u4e00\u6837\uff0c\u5217\u8868\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff0c\u7b2c\u4e8c\u4e2a\u7d22\u5f15\u662f 1 \uff0c\u4f9d\u6b64\u7c7b\u63a8\uff1b\u7d22\u5f15\u4e5f\u53ef\u4ee5\u4ece\u5c3e\u90e8\u5f00\u59cb\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\u4e3a -1 \uff0c\u5f80\u524d\u4e00\u4f4d\u4e3a -2 \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 print ( list1 [ 0 ]) # a print ( list1 [ - 1 ]) # d print ( list1 [ 0 : 3 ]) # ['a','b','c'] \u5305\u542b\u5934\uff0c\u4e0d\u5305\u542b\u5c3e \u5217\u8868\u6570\u636e\u7c7b\u578b\u652f\u6301\u5f88\u591a\u65b9\u6cd5\uff0c\u5217\u8868\u5bf9\u8c61\u7684\u6240\u6709\u65b9\u6cd5\u6240\u793a\u5982\u4e0b\uff1a list.append(x) \u5728\u5217\u8868\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\uff0c\u76f8\u5f53\u4e8e a[len(a):] = [x] \u3002 list.extend(iterable) \u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5143\u7d20\u6269\u5c55\u5217\u8868\u3002\u76f8\u5f53\u4e8e a[len(a):] = iterable \u3002 list.insert(i, x) \u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u63d2\u5165\u5143\u7d20\u7684\u7d22\u5f15\uff0c\u56e0\u6b64\uff0c a.insert(0, x) \u5728\u5217\u8868\u5f00\u5934\u63d2\u5165\u5143\u7d20\uff0c a.insert(len(a), x) \u7b49\u540c\u4e8e a.append(x) \u3002 list.remove(x) \u4ece\u5217\u8868\u4e2d\u5220\u9664\u7b2c\u4e00\u4e2a\u503c\u4e3a x \u7684\u5143\u7d20\u3002\u672a\u627e\u5230\u6307\u5b9a\u5143\u7d20\u65f6\uff0c\u89e6\u53d1 ValueError \u5f02\u5e38\u3002 list.pop([i]) \u5220\u9664\u5217\u8868\u4e2d\u6307\u5b9a\u4f4d\u7f6e\u7684\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u88ab\u5220\u9664\u7684\u5143\u7d20\u3002\u672a\u6307\u5b9a\u4f4d\u7f6e\u65f6\uff0c a.pop() \u5220\u9664\u5e76\u8fd4\u56de\u5217\u8868\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002\uff08\u65b9\u6cd5\u7b7e\u540d\u4e2d i \u4e24\u8fb9\u7684\u65b9\u62ec\u53f7\u8868\u793a\u8be5\u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u4e0d\u662f\u8981\u6c42\u8f93\u5165\u65b9\u62ec\u53f7\u3002\u8fd9\u79cd\u8868\u793a\u6cd5\u5e38\u89c1\u4e8e Python \u53c2\u8003\u5e93\uff09\u3002 list.clear() \u5220\u9664\u5217\u8868\u91cc\u7684\u6240\u6709\u5143\u7d20\uff0c\u76f8\u5f53\u4e8e del a[:] \u3002 list.index(x[, start[, end]]) \u8fd4\u56de\u5217\u8868\u4e2d\u7b2c\u4e00\u4e2a\u503c\u4e3a x \u7684\u5143\u7d20\u7684\u96f6\u57fa\u7d22\u5f15\u3002\u672a\u627e\u5230\u6307\u5b9a\u5143\u7d20\u65f6\uff0c\u89e6\u53d1 ValueError \u5f02\u5e38\u3002\u53ef\u9009\u53c2\u6570 start \u548c end \u662f\u5207\u7247\u7b26\u53f7\uff0c\u7528\u4e8e\u5c06\u641c\u7d22\u9650\u5236\u4e3a\u5217\u8868\u7684\u7279\u5b9a\u5b50\u5e8f\u5217\u3002\u8fd4\u56de\u7684\u7d22\u5f15\u662f\u76f8\u5bf9\u4e8e\u6574\u4e2a\u5e8f\u5217\u7684\u5f00\u59cb\u8ba1\u7b97\u7684\uff0c\u800c\u4e0d\u662f start \u53c2\u6570\u3002 list.count(x) \u8fd4\u56de\u5217\u8868\u4e2d\u5143\u7d20 x \u51fa\u73b0\u7684\u6b21\u6570\u3002 list.sort(***, key=None, reverse=False) \u5c31\u5730\u6392\u5e8f\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff08\u8981\u4e86\u89e3\u81ea\u5b9a\u4e49\u6392\u5e8f\u53c2\u6570\uff0c\u8be6\u89c1 sorted() \uff09\u3002 list.reverse() \u53cd\u8f6c\u5217\u8868\u4e2d\u7684\u5143\u7d20\u3002 list.copy() \u8fd4\u56de\u5217\u8868\u7684\u6d45\u62f7\u8d1d\u3002\u76f8\u5f53\u4e8e a[:] \u3002 \u5217\u8868\u5bf9 + \u548c * \u7684\u64cd\u4f5c\u7b26\u4e0e\u5b57\u7b26\u4e32\u76f8\u4f3c\u3002+ \u53f7\u7528\u4e8e\u7ec4\u5408\u5217\u8868\uff0c* \u53f7\u7528\u4e8e\u91cd\u590d\u5217\u8868\u3002 len(list) \u5217\u8868\u5143\u7d20\u4e2a\u6570 max(list) \u5217\u8868\u5143\u7d20\u6700\u5927\u503c\uff1b min(list) \u5217\u8868\u5143\u7d20\u6700\u5c0f\u503c\u3002 \u5217\u8868\u65b9\u6cd5\u793a\u4f8b\uff1a fruits = [ 'orange' , 'apple' , 'pear' , 'banana' , 'kiwi' , 'apple' , 'banana' ] fruits . count ( 'apple' ) # 2 fruits . count ( 'tangerine' ) # 0 fruits . index ( 'banana' ) # 3 fruits . index ( 'banana' , 4 ) # Find next banana starting a position 4 \u7ed3\u679c\u4e3a6 fruits . reverse () fruits # ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange'] fruits . append ( 'grape' ) fruits # ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape'] fruits . sort () fruits # ['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear'] fruits . pop () # 'pear' \u6ce8\u610f\uff1a insert \u3001 remove \u3001 sort \u7b49\u65b9\u6cd5\u53ea\u4fee\u6539\u5217\u8868\uff0c\u4e0d\u8f93\u51fa\u8fd4\u56de\u503c\u2014\u2014\u8fd4\u56de\u7684\u9ed8\u8ba4\u503c\u4e3a None \uff0c\u8fd9\u662f\u6240\u6709 Python \u53ef\u53d8\u6570\u636e\u7ed3\u6784\u7684\u8bbe\u8ba1\u539f\u5219\u3002\u8fd8\u6709\uff0c\u4e0d\u662f\u6240\u6709\u6570\u636e\u90fd\u53ef\u4ee5\u6392\u5e8f\u6216\u6bd4\u8f83\u3002\u4f8b\u5982\uff0c [None, 'hello', 10] \u5c31\u4e0d\u53ef\u6392\u5e8f\uff0c\u56e0\u4e3a\u6574\u6570\u4e0d\u80fd\u4e0e\u5b57\u7b26\u4e32\u5bf9\u6bd4\uff0c\u800c None \u4e0d\u80fd\u4e0e\u5176\u4ed6\u7c7b\u578b\u5bf9\u6bd4\u3002\u6709\u4e9b\u7c7b\u578b\u6839\u672c\u5c31\u6ca1\u6709\u5b9a\u4e49\u987a\u5e8f\u5173\u7cfb\uff0c\u4f8b\u5982\uff0c 3+4j < 5+7j \u8fd9\u79cd\u5bf9\u6bd4\u64cd\u4f5c\u5c31\u662f\u65e0\u6548\u7684\u3002 1.1.1 \u7528\u5217\u8868\u5b9e\u73b0\u5806\u6808 \u00b6 \u4f7f\u7528\u5217\u8868\u65b9\u6cd5\u5b9e\u73b0\u5806\u6808\u975e\u5e38\u5bb9\u6613\uff0c\u6700\u540e\u63d2\u5165\u7684\u6700\u5148\u53d6\u51fa\uff08\u201c\u540e\u8fdb\u5148\u51fa\u201d\uff09\u3002\u628a\u5143\u7d20\u6dfb\u52a0\u5230\u5806\u6808\u7684\u9876\u7aef\uff0c\u4f7f\u7528 append() \u3002\u4ece\u5806\u6808\u9876\u90e8\u53d6\u51fa\u5143\u7d20\uff0c\u4f7f\u7528 pop() \uff0c\u4e0d\u7528\u6307\u5b9a\u7d22\u5f15\u3002\u4f8b\u5982\uff1a stack = [ 3 , 4 , 5 ] stack . append ( 6 ) stack . append ( 7 ) stack # [3, 4, 5, 6, 7] stack . pop () # 7 stack # [3, 4, 5, 6] stack . pop () # 6 stack . pop () # 5 stack # [3, 4] 1.1.2 \u7528\u5217\u8868\u5b9e\u73b0\u961f\u5217 \u00b6 \u5217\u8868\u4e5f\u53ef\u4ee5\u7528\u4f5c\u961f\u5217\uff0c\u6700\u5148\u52a0\u5165\u7684\u5143\u7d20\uff0c\u6700\u5148\u53d6\u51fa\uff08\u201c\u5148\u8fdb\u5148\u51fa\u201d\uff09\uff1b\u7136\u800c\uff0c\u5217\u8868\u4f5c\u4e3a\u961f\u5217\u7684\u6548\u7387\u5f88\u4f4e\u3002\u56e0\u4e3a\uff0c\u5728\u5217\u8868\u672b\u5c3e\u6dfb\u52a0\u548c\u5220\u9664\u5143\u7d20\u975e\u5e38\u5feb\uff0c\u4f46\u5728\u5217\u8868\u5f00\u5934\u63d2\u5165\u6216\u79fb\u9664\u5143\u7d20\u5374\u5f88\u6162\uff08\u56e0\u4e3a\u6240\u6709\u5176\u4ed6\u5143\u7d20\u90fd\u5fc5\u987b\u79fb\u52a8\u4e00\u4f4d\uff09\u3002 \u5b9e\u73b0\u961f\u5217\u6700\u597d\u7528 collections.deque \uff0c\u53ef\u4ee5\u5feb\u901f\u4ece\u4e24\u7aef\u6dfb\u52a0\u6216\u5220\u9664\u5143\u7d20\u3002\u4f8b\u5982\uff1a from collections import deque queue = deque ([ \"Eric\" , \"John\" , \"Michael\" ]) queue . append ( \"Terry\" ) # Terry arrives queue . append ( \"Graham\" ) # Graham arrives queue . popleft () # The first to arrive now leaves:'Eric' queue . popleft () # The second to arrive now leaves:'John' queue # Remaining queue in order of arrival:deque(['Michael', 'Terry', 'Graham']) 1.1.3 \u5217\u8868\u63a8\u5bfc\u5f0f \u00b6 \u5217\u8868\u63a8\u5bfc\u5f0f\u521b\u5efa\u5217\u8868\u7684\u65b9\u5f0f\u66f4\u7b80\u6d01\u3002\u5e38\u89c1\u7684\u7528\u6cd5\u4e3a\uff0c\u5bf9\u5e8f\u5217\u6216\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5e94\u7528\u67d0\u79cd\u64cd\u4f5c\uff0c\u7528\u751f\u6210\u7684\u7ed3\u679c\u521b\u5efa\u65b0\u7684\u5217\u8868\uff1b\u6216\u7528\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u521b\u5efa\u5b50\u5e8f\u5217\u3002 \u4f8b\u5982\uff0c\u521b\u5efa\u5e73\u65b9\u503c\u7684\u5217\u8868\uff1a squares = [] for x in range ( 10 ): squares . append ( x ** 2 ) squares # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] \u6ce8\u610f\uff0c\u8fd9\u6bb5\u4ee3\u7801\u521b\u5efa\uff08\u6216\u8986\u76d6\uff09\u53d8\u91cf x \uff0c\u8be5\u53d8\u91cf\u5728\u5faa\u73af\u7ed3\u675f\u540e\u4ecd\u7136\u5b58\u5728\u3002\u4e0b\u8ff0\u65b9\u6cd5\u53ef\u4ee5\u65e0\u526f\u4f5c\u7528\u5730\u8ba1\u7b97\u5e73\u65b9\u5217\u8868\uff1a squares = list ( map ( lambda x : x ** 2 , range ( 10 ))) \u6216\u7b49\u4ef7\u4e8e\uff1a squares = [ x ** 2 for x in range ( 10 )] \u4e0a\u9762\u8fd9\u79cd\u5199\u6cd5\u66f4\u7b80\u6d01\u3001\u6613\u8bfb\u3002 \u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u65b9\u62ec\u53f7\u5185\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u540e\u9762\u4e3a\u4e00\u4e2a for \u5b50\u53e5\uff0c\u7136\u540e\uff0c\u662f\u96f6\u4e2a\u6216\u591a\u4e2a for \u6216 if \u5b50\u53e5\u3002\u7ed3\u679c\u662f\u7531\u8868\u8fbe\u5f0f\u4f9d\u636e for \u548c if \u5b50\u53e5\u6c42\u503c\u8ba1\u7b97\u800c\u5f97\u51fa\u4e00\u4e2a\u65b0\u5217\u8868\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u4ee5\u4e0b\u5217\u8868\u63a8\u5bfc\u5f0f\u5c06\u4e24\u4e2a\u5217\u8868\u4e2d\u4e0d\u76f8\u7b49\u7684\u5143\u7d20\u7ec4\u5408\u8d77\u6765\uff1a [( x , y ) for x in [ 1 , 2 , 3 ] for y in [ 3 , 1 , 4 ] if x != y ] # \u8f93\u51fa\u4e3a\uff1a[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)] \u5217\u8868\u63a8\u5bfc\u5f0f\u53ef\u4ee5\u4f7f\u7528\u590d\u6742\u7684\u8868\u8fbe\u5f0f\u548c\u5d4c\u5957\u51fd\u6570\uff1a from math import pi [ str ( round ( pi , i )) for i in range ( 1 , 6 )] # \u8f93\u51fa\u4e3a\uff1a['3.1', '3.14', '3.142', '3.1416', '3.14159'] 1.1.4 \u5d4c\u5957\u7684\u5217\u8868\u63a8\u5bfc\u5f0f \u00b6 \u5217\u8868\u63a8\u5bfc\u5f0f\u4e2d\u7684\u521d\u59cb\u8868\u8fbe\u5f0f\u53ef\u4ee5\u662f\u4efb\u4f55\u8868\u8fbe\u5f0f\uff0c\u751a\u81f3\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u5217\u8868\u63a8\u5bfc\u5f0f\u3002 \u4e0b\u9762\u8fd9\u4e2a 3x4 \u77e9\u9635\uff0c\u7531 3 \u4e2a\u957f\u5ea6\u4e3a 4 \u7684\u5217\u8868\u7ec4\u6210\uff1a matrix = [ [ 1 , 2 , 3 , 4 ], [ 5 , 6 , 7 , 8 ], [ 9 , 10 , 11 , 12 ], ] # \u4e0b\u9762\u7684\u5217\u8868\u63a8\u5bfc\u5f0f\u53ef\u4ee5\u8f6c\u7f6e\u884c\u5217\uff1a [[ row [ i ] for row in matrix ] for i in range ( 4 )] # \u8f93\u51fa\u4e3a\uff1a[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]] 1.2 del \u8bed\u53e5 \u00b6 del \u8bed\u53e5\u6309\u7d22\u5f15\uff0c\u800c\u4e0d\u662f\u503c\u4ece\u5217\u8868\u4e2d\u79fb\u9664\u5143\u7d20\u3002\u4e0e\u8fd4\u56de\u503c\u7684 pop() \u65b9\u6cd5\u4e0d\u540c\uff0c del \u8bed\u53e5\u4e5f\u53ef\u4ee5\u4ece\u5217\u8868\u4e2d\u79fb\u9664\u5207\u7247\uff0c\u6216\u6e05\u7a7a\u6574\u4e2a\u5217\u8868\uff08\u4e4b\u524d\u662f\u5c06\u7a7a\u5217\u8868\u8d4b\u503c\u7ed9\u5207\u7247\uff09\u3002 \u4f8b\u5982\uff1a a = [ - 1 , 1 , 66.25 , 333 , 333 , 1234.5 ] del a [ 0 ] a # [1, 66.25, 333, 333, 1234.5] del a [ 2 : 4 ] a # [1, 66.25, 1234.5] del a [:] a # [] del \u4e5f\u53ef\u4ee5\u7528\u6765\u5220\u9664\u6574\u4e2a\u53d8\u91cf\uff1a del a \u6b64\u540e\uff0c\u518d\u5f15\u7528 a \u5c31\u4f1a\u62a5\u9519\uff08\u76f4\u5230\u4e3a\u5b83\u8d4b\u4e0e\u53e6\u4e00\u4e2a\u503c\uff09\u3002\u540e\u6587\u4f1a\u4ecb\u7ecd del \u7684\u5176\u4ed6\u7528\u6cd5\u3002 1.3 \u5143\u7ec4 \u00b6 \u5217\u8868\u548c\u5b57\u7b26\u4e32\u6709\u5f88\u591a\u5171\u6027\uff0c\u4f8b\u5982\uff0c\u7d22\u5f15\u548c\u5207\u7247\u64cd\u4f5c\u3002\u8fd9\u4e24\u79cd\u6570\u636e\u7c7b\u578b\u662f \u5e8f\u5217 \uff08\u53c2\u89c1 \u5e8f\u5217\u7c7b\u578b --- list, tuple, range \uff09\u3002\u968f\u7740 Python \u8bed\u8a00\u7684\u53d1\u5c55\uff0c\u5176\u4ed6\u7684\u5e8f\u5217\u7c7b\u578b\u4e5f\u88ab\u52a0\u5165\u5176\u4e2d\u3002\u672c\u8282\u4ecb\u7ecd\u53e6\u4e00\u79cd\u6807\u51c6\u5e8f\u5217\u7c7b\u578b\uff1a \u5143\u7ec4 \u3002 \u5143\u7ec4\u7531\u591a\u4e2a\u7528\u9017\u53f7\u9694\u5f00\u7684\u503c\u7ec4\u6210\uff0c\u4f8b\u5982\uff1a t = 12345 , 54321 , 'hello!' t [ 0 ] # 12345 t # (12345, 54321, 'hello!') # Tuples may be nested: u = t , ( 1 , 2 , 3 , 4 , 5 ) u # ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5)) # Tuples are immutable: t [ 0 ] = 88888 ''' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'tuple' object does not support item assignment''' # but they can contain mutable objects: v = ([ 1 , 2 , 3 ], [ 3 , 2 , 1 ]) v # ([1, 2, 3], [3, 2, 1]) \u8f93\u51fa\u65f6\uff0c\u5143\u7ec4\u90fd\u8981\u7531\u5706\u62ec\u53f7\u6807\u6ce8\uff0c\u8fd9\u6837\u624d\u80fd\u6b63\u786e\u5730\u89e3\u91ca\u5d4c\u5957\u5143\u7ec4\u3002\u8f93\u5165\u65f6\uff0c\u5706\u62ec\u53f7\u53ef\u6709\u53ef\u65e0\uff0c\u4e0d\u8fc7\u7ecf\u5e38\u662f\u5fc5\u987b\u7684\uff08\u5982\u679c\u5143\u7ec4\u662f\u66f4\u5927\u7684\u8868\u8fbe\u5f0f\u7684\u4e00\u90e8\u5206\uff09\u3002\u4e0d\u5141\u8bb8\u4e3a\u5143\u7ec4\u4e2d\u7684\u5355\u4e2a\u5143\u7d20\u8d4b\u503c\uff0c\u5f53\u7136\uff0c\u53ef\u4ee5\u521b\u5efa\u542b\u5217\u8868\u7b49\u53ef\u53d8\u5bf9\u8c61\u7684\u5143\u7ec4\u3002 \u867d\u7136\uff0c\u5143\u7ec4\u4e0e\u5217\u8868\u5f88\u50cf\uff0c\u4f46\u4f7f\u7528\u573a\u666f\u4e0d\u540c\uff0c\u7528\u9014\u4e5f\u4e0d\u540c\u3002\u5143\u7ec4\u662f immutable \uff08\u4e0d\u53ef\u53d8\u7684\uff09\uff0c\u4e00\u822c\u53ef\u5305\u542b\u5f02\u8d28\u5143\u7d20\u5e8f\u5217\uff0c\u901a\u8fc7\u89e3\u5305\uff08\u89c1\u672c\u8282\u4e0b\u6587\uff09\u6216\u7d22\u5f15\u8bbf\u95ee\uff08\u5982\u679c\u662f namedtuples \uff0c\u53ef\u4ee5\u5c5e\u6027\u8bbf\u95ee\uff09\u3002\u5217\u8868\u662f mutable \uff08\u53ef\u53d8\u7684\uff09\uff0c\u5217\u8868\u5143\u7d20\u4e00\u822c\u4e3a\u540c\u8d28\u7c7b\u578b\uff0c\u53ef\u8fed\u4ee3\u8bbf\u95ee\u3002 \u6784\u9020 0 \u4e2a\u6216 1 \u4e2a\u5143\u7d20\u7684\u5143\u7ec4\u6bd4\u8f83\u7279\u6b8a\uff1a\u4e3a\u4e86\u9002\u5e94\u8fd9\u79cd\u60c5\u51b5\uff0c\u5bf9\u53e5\u6cd5\u6709\u4e00\u4e9b\u989d\u5916\u7684\u6539\u53d8\u3002\u7528\u4e00\u5bf9\u7a7a\u5706\u62ec\u53f7\u5c31\u53ef\u4ee5\u521b\u5efa\u7a7a\u5143\u7ec4\uff1b\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u5143\u7ec4\u53ef\u4ee5\u901a\u8fc7\u5728\u8fd9\u4e2a\u5143\u7d20\u540e\u6dfb\u52a0\u9017\u53f7\u6765\u6784\u5efa\uff08\u5706\u62ec\u53f7\u91cc\u53ea\u6709\u4e00\u4e2a\u503c\u7684\u8bdd\u4e0d\u591f\u660e\u786e\uff09\u3002\u4f8b\u5982\uff1a empty = () singleton = 'hello' , # <-- note trailing comma len ( empty ) # 0 len ( singleton ) # 1 singleton # ('hello',) \u8bed\u53e5 t = 12345, 54321, 'hello!' \u662f \u5143\u7ec4\u6253\u5305 \u7684\u4f8b\u5b50\uff1a\u503c 12345 , 54321 \u548c 'hello!' \u4e00\u8d77\u88ab\u6253\u5305\u8fdb\u5143\u7ec4\u3002\u9006\u64cd\u4f5c\u4e5f\u53ef\u4ee5\uff1a x , y , z = t \u79f0\u4e4b\u4e3a \u5e8f\u5217\u89e3\u5305 \u4e5f\u662f\u59a5\u59a5\u7684\uff0c\u9002\u7528\u4e8e\u53f3\u4fa7\u7684\u4efb\u4f55\u5e8f\u5217\u3002\u5e8f\u5217\u89e3\u5305\u65f6\uff0c\u5de6\u4fa7\u53d8\u91cf\u4e0e\u53f3\u4fa7\u5e8f\u5217\u5143\u7d20\u7684\u6570\u91cf\u5e94\u76f8\u7b49\u3002\u6ce8\u610f\uff0c\u591a\u91cd\u8d4b\u503c\u5176\u5b9e\u53ea\u662f\u5143\u7ec4\u6253\u5305\u548c\u5e8f\u5217\u89e3\u5305\u7684\u7ec4\u5408\u3002 1.4 \u96c6\u5408 \u00b6 Python \u8fd8\u652f\u6301 \u96c6\u5408 \u8fd9\u79cd\u6570\u636e\u7c7b\u578b\u3002\u96c6\u5408\u662f\u7531\u4e0d\u91cd\u590d\u5143\u7d20\u7ec4\u6210\u7684\u65e0\u5e8f\u5bb9\u5668\u3002\u57fa\u672c\u7528\u6cd5\u5305\u62ec\u6210\u5458\u68c0\u6d4b\u3001\u6d88\u9664\u91cd\u590d\u5143\u7d20\u3002\u96c6\u5408\u5bf9\u8c61\u652f\u6301\u5408\u96c6\u3001\u4ea4\u96c6\u3001\u5dee\u96c6\u3001\u5bf9\u79f0\u5dee\u5206\u7b49\u6570\u5b66\u8fd0\u7b97\u3002 \u521b\u5efa\u96c6\u5408\u7528\u82b1\u62ec\u53f7\u6216 set() \u51fd\u6570\u3002\u6ce8\u610f\uff0c\u521b\u5efa\u7a7a\u96c6\u5408\u53ea\u80fd\u7528 set() \uff0c\u4e0d\u80fd\u7528 {} \uff0c {} \u521b\u5efa\u7684\u662f\u7a7a\u5b57\u5178\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e9b\u7b80\u5355\u7684\u793a\u4f8b\uff1a basket = { 'apple' , 'orange' , 'apple' , 'pear' , 'orange' , 'banana' } print ( basket ) # show that duplicates have been removed # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a{'orange', 'banana', 'pear', 'apple'} 'orange' in basket # fast membership testing\uff1aTrue 'crabgrass' in basket # False # Demonstrate set operations on unique letters from two words a = set ( 'abracadabra' ) b = set ( 'alacazam' ) a # unique letters in a # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a{'a', 'r', 'b', 'c', 'd'} a - b # letters in a but not in b # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a{'r', 'd', 'b'} a | b # letters in a or b or both # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a{'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'} a & b # letters in both a and b # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a{'a', 'c'} a ^ b # letters in a or b but not both # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a{'r', 'd', 'b', 'm', 'z', 'l'} \u4e0e \u5217\u8868\u63a8\u5bfc\u5f0f \u7c7b\u4f3c\uff0c\u96c6\u5408\u4e5f\u652f\u6301\u63a8\u5bfc\u5f0f\uff1a a = { x for x in 'abracadabra' if x not in 'abc' } a # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a{'r', 'd'} 1.5 \u5b57\u5178 \u00b6 \u5b57\u5178 \uff08\u53c2\u89c1 \u6620\u5c04\u7c7b\u578b --- dict \uff09 \u4e5f\u662f\u4e00\u79cd\u5e38\u7528\u7684 Python \u5167\u7f6e\u6570\u636e\u7c7b\u578b\u3002\u5176\u4ed6\u8bed\u8a00\u53ef\u80fd\u628a\u5b57\u5178\u79f0\u4e3a \u8054\u5408\u5185\u5b58 \u6216 \u8054\u5408\u6570\u7ec4 \u3002\u4e0e\u4ee5\u8fde\u7eed\u6574\u6570\u4e3a\u7d22\u5f15\u7684\u5e8f\u5217\u4e0d\u540c\uff0c\u5b57\u5178\u4ee5 \u5173\u952e\u5b57 \u4e3a\u7d22\u5f15\uff0c\u5173\u952e\u5b57\u901a\u5e38\u662f\u5b57\u7b26\u4e32\u6216\u6570\u5b57\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u4efb\u610f\u4e0d\u53ef\u53d8\u7c7b\u578b\u3002\u53ea\u5305\u542b\u5b57\u7b26\u4e32\u3001\u6570\u5b57\u3001\u5143\u7ec4\u7684\u5143\u7ec4\uff0c\u4e5f\u53ef\u4ee5\u7528\u4f5c\u5173\u952e\u5b57\u3002\u4f46\u5982\u679c\u5143\u7ec4\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u5305\u542b\u4e86\u53ef\u53d8\u5bf9\u8c61\uff0c\u5c31\u4e0d\u80fd\u7528\u4f5c\u5173\u952e\u5b57\u3002\u5217\u8868\u4e0d\u80fd\u5f53\u5173\u952e\u5b57\uff0c\u56e0\u4e3a\u5217\u8868\u53ef\u4ee5\u7528\u7d22\u5f15\u3001\u5207\u7247\u3001 append() \u3001 extend() \u7b49\u65b9\u6cd5\u4fee\u6539\u3002 \u53ef\u4ee5\u628a\u5b57\u5178\u7406\u89e3\u4e3a \u952e\u503c\u5bf9 \u7684\u96c6\u5408\uff0c\u4f46\u5b57\u5178\u7684\u952e\u5fc5\u987b\u662f\u552f\u4e00\u7684\u3002\u82b1\u62ec\u53f7 {} \u7528\u4e8e\u521b\u5efa\u7a7a\u5b57\u5178\u3002\u53e6\u4e00\u79cd\u521d\u59cb\u5316\u5b57\u5178\u7684\u65b9\u5f0f\u662f\uff0c\u5728\u82b1\u62ec\u53f7\u91cc\u8f93\u5165\u9017\u53f7\u5206\u9694\u7684\u952e\u503c\u5bf9\uff0c\u8fd9\u4e5f\u662f\u5b57\u5178\u7684\u8f93\u51fa\u65b9\u5f0f\u3002 \u5b57\u5178\u7684\u4e3b\u8981\u7528\u9014\u662f\u901a\u8fc7\u5173\u952e\u5b57\u5b58\u50a8\u3001\u63d0\u53d6\u503c\u3002\u7528 del \u53ef\u4ee5\u5220\u9664\u952e\u503c\u5bf9\u3002\u7528\u5df2\u5b58\u5728\u7684\u5173\u952e\u5b57\u5b58\u50a8\u503c\uff0c\u4e0e\u8be5\u5173\u952e\u5b57\u5173\u8054\u7684\u65e7\u503c\u4f1a\u88ab\u53d6\u4ee3\u3002\u901a\u8fc7\u4e0d\u5b58\u5728\u7684\u952e\u63d0\u53d6\u503c\uff0c\u5219\u4f1a\u62a5\u9519\u3002 \u5bf9\u5b57\u5178\u6267\u884c list(d) \u64cd\u4f5c\uff0c\u8fd4\u56de\u8be5\u5b57\u5178\u4e2d\u6240\u6709\u952e\u7684\u5217\u8868\uff0c\u6309\u63d2\u5165\u6b21\u5e8f\u6392\u5217\uff08\u5982\u9700\u6392\u5e8f\uff0c\u8bf7\u4f7f\u7528 sorted(d) \uff09\u3002\u68c0\u67e5\u5b57\u5178\u91cc\u662f\u5426\u5b58\u5728\u67d0\u4e2a\u952e\uff0c\u4f7f\u7528\u5173\u952e\u5b57 in \u3002 \u4ee5\u4e0b\u662f\u4e00\u4e9b\u5b57\u5178\u7684\u7b80\u5355\u793a\u4f8b\uff1a tel = { 'jack' : 4098 , 'sape' : 4139 } tel [ 'guido' ] = 4127 tel # {'jack': 4098, 'sape': 4139, 'guido': 4127} tel [ 'jack' ] # 4098 del tel [ 'sape' ] tel [ 'irv' ] = 4127 tel # {'jack': 4098, 'guido': 4127, 'irv': 4127} list ( tel ) # ['jack', 'guido', 'irv'] sorted ( tel ) # ['guido', 'irv', 'jack'] 'guido' in tel # True 'jack' not in tel # False dict() \u6784\u9020\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u7528\u952e\u503c\u5bf9\u5e8f\u5217\u521b\u5efa\u5b57\u5178\uff1a dict ([( 'sape' , 4139 ), ( 'guido' , 4127 ), ( 'jack' , 4098 )]) # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a{'sape': 4139, 'guido': 4127, 'jack': 4098} \u5b57\u5178\u63a8\u5bfc\u5f0f\u53ef\u4ee5\u7528\u4efb\u610f\u952e\u503c\u8868\u8fbe\u5f0f\u521b\u5efa\u5b57\u5178\uff1a { x : x ** 2 for x in ( 2 , 4 , 6 )} # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a{2: 4, 4: 16, 6: 36} \u5173\u952e\u5b57\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u76f4\u63a5\u7528\u5173\u952e\u5b57\u53c2\u6570\u6307\u5b9a\u952e\u503c\u5bf9\u66f4\u4fbf\u6377\uff1a dict ( sape = 4139 , guido = 4127 , jack = 4098 ) # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a{'sape': 4139, 'guido': 4127, 'jack': 4098} 1.6 \u5faa\u73af\u7684\u6280\u5de7 \u00b6 \u5728\u5b57\u5178\u4e2d\u5faa\u73af\u65f6\uff0c\u7528 items() \u65b9\u6cd5\u53ef\u540c\u65f6\u53d6\u51fa\u952e\u548c\u5bf9\u5e94\u7684\u503c\uff1a knights = { 'gallahad' : 'the pure' , 'robin' : 'the brave' } for k , v in knights . items (): print ( k , v ) # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a ''' gallahad the pure robin the brave''' \u5728\u5e8f\u5217\u4e2d\u5faa\u73af\u65f6\uff0c\u7528 enumerate() \u51fd\u6570\u53ef\u4ee5\u540c\u65f6\u53d6\u51fa\u4f4d\u7f6e\u7d22\u5f15\u548c\u5bf9\u5e94\u7684\u503c\uff1a for i , v in enumerate ([ 'tic' , 'tac' , 'toe' ]): print ( i , v ) # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a 0 tic 1 tac 2 toe \u540c\u65f6\u5faa\u73af\u4e24\u4e2a\u6216\u591a\u4e2a\u5e8f\u5217\u65f6\uff0c\u7528 zip() \u51fd\u6570\u53ef\u4ee5\u5c06\u5176\u5185\u7684\u5143\u7d20\u4e00\u4e00\u5339\u914d\uff1a questions = [ 'name' , 'quest' , 'favorite color' ] answers = [ 'lancelot' , 'the holy grail' , 'blue' ] for q , a in zip ( questions , answers ): print ( 'What is your {0} ? It is {1} .' . format ( q , a )) # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a ''' What is your name? It is lancelot. What is your quest? It is the holy grail. What is your favorite color? It is blue.''' \u9006\u5411\u5faa\u73af\u5e8f\u5217\u65f6\uff0c\u5148\u6b63\u5411\u5b9a\u4f4d\u5e8f\u5217\uff0c\u7136\u540e\u8c03\u7528 reversed() \u51fd\u6570\uff1a for i in reversed ( range ( 1 , 10 , 2 )): print ( i ) # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a 9 7 5 3 1 \u6309\u6307\u5b9a\u987a\u5e8f\u5faa\u73af\u5e8f\u5217\uff0c\u53ef\u4ee5\u7528 sorted() \u51fd\u6570\uff0c\u5728\u4e0d\u6539\u52a8\u539f\u5e8f\u5217\u7684\u57fa\u7840\u4e0a\uff0c\u8fd4\u56de\u4e00\u4e2a\u91cd\u65b0\u7684\u5e8f\u5217\uff1a basket = [ 'apple' , 'orange' , 'apple' , 'pear' , 'orange' , 'banana' ] for i in sorted ( basket ): print ( i ) # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a apple apple banana orange orange pear \u4f7f\u7528 set() \u53bb\u9664\u5e8f\u5217\u4e2d\u7684\u91cd\u590d\u5143\u7d20\u3002\u4f7f\u7528 sorted() \u52a0 set() \u5219\u6309\u6392\u5e8f\u540e\u7684\u987a\u5e8f\uff0c\u5faa\u73af\u904d\u5386\u5e8f\u5217\u4e2d\u7684\u552f\u4e00\u5143\u7d20\uff1a basket = [ 'apple' , 'orange' , 'apple' , 'pear' , 'orange' , 'banana' ] for f in sorted ( set ( basket )): print ( f ) # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a apple banana orange pear \u4e00\u822c\u6765\u8bf4\uff0c\u5728\u5faa\u73af\u4e2d\u4fee\u6539\u5217\u8868\u7684\u5185\u5bb9\u65f6\uff0c\u521b\u5efa\u65b0\u5217\u8868\u6bd4\u8f83\u7b80\u5355\uff0c\u4e14\u5b89\u5168\uff1a import math raw_data = [ 56.2 , float ( 'NaN' ), 51.7 , 55.3 , 52.5 , float ( 'NaN' ), 47.8 ] filtered_data = [] for value in raw_data : if not math . isnan ( value ): filtered_data . append ( value ) filtered_data # [56.2, 51.7, 55.3, 52.5, 47.8] 1.7 \u6df1\u5165\u6761\u4ef6\u63a7\u5236 \u00b6 while \u548c if \u6761\u4ef6\u53e5\u4e0d\u53ea\u53ef\u4ee5\u8fdb\u884c\u6bd4\u8f83\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u8fd0\u7b97\u7b26\u3002 \u6bd4\u8f83\u8fd0\u7b97\u7b26 in \u548c not in \u6821\u9a8c\u5e8f\u5217\u91cc\u662f\u5426\u5b58\u5728\u67d0\u4e2a\u503c\u3002\u8fd0\u7b97\u7b26 is \u548c is not \u6bd4\u8f83\u4e24\u4e2a\u5bf9\u8c61\u662f\u5426\u4e3a\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002\u6240\u6709\u6bd4\u8f83\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u90fd\u4e00\u6837\uff0c\u4e14\u4f4e\u4e8e\u6570\u503c\u8fd0\u7b97\u7b26\u3002 \u6bd4\u8f83\u64cd\u4f5c\u652f\u6301\u94fe\u5f0f\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c a < b == c \u6821\u9a8c a \u662f\u5426\u5c0f\u4e8e b \uff0c\u4e14 b \u662f\u5426\u7b49\u4e8e c \u3002 \u6bd4\u8f83\u64cd\u4f5c\u53ef\u4ee5\u7528\u5e03\u5c14\u8fd0\u7b97\u7b26 and \u548c or \u7ec4\u5408\uff0c\u5e76\u4e14\uff0c\u6bd4\u8f83\u64cd\u4f5c\uff08\u6216\u5176\u4ed6\u5e03\u5c14\u8fd0\u7b97\uff09\u7684\u7ed3\u679c\u90fd\u53ef\u4ee5\u7528 not \u53d6\u53cd\u3002\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u7684\u4f18\u5148\u7ea7\u4f4e\u4e8e\u6bd4\u8f83\u64cd\u4f5c\u7b26\uff1b not \u7684\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c or \u7684\u4f18\u5148\u7ea7\u6700\u4f4e\uff0c\u56e0\u6b64\uff0c A and not B or C \u7b49\u4ef7\u4e8e (A and (not B)) or C \u3002\u4e0e\u5176\u4ed6\u8fd0\u7b97\u7b26\u64cd\u4f5c\u4e00\u6837\uff0c\u6b64\u5904\u4e5f\u53ef\u4ee5\u7528\u5706\u62ec\u53f7\u8868\u793a\u60f3\u8981\u7684\u7ec4\u5408\u3002 \u5e03\u5c14\u8fd0\u7b97\u7b26 and \u548c or \u4e5f\u79f0\u4e3a \u77ed\u8def \u8fd0\u7b97\u7b26\uff1a\u5176\u53c2\u6570\u4ece\u5de6\u81f3\u53f3\u89e3\u6790\uff0c\u4e00\u65e6\u53ef\u4ee5\u786e\u5b9a\u7ed3\u679c\uff0c\u89e3\u6790\u5c31\u4f1a\u505c\u6b62\u3002\u4f8b\u5982\uff0c\u5982\u679c A \u548c C \u4e3a\u771f\uff0c B \u4e3a\u5047\uff0c\u90a3\u4e48 A and B and C \u4e0d\u4f1a\u89e3\u6790 C \u3002\u7528\u4f5c\u666e\u901a\u503c\u800c\u4e0d\u662f\u5e03\u5c14\u503c\u65f6\uff0c\u77ed\u8def\u64cd\u4f5c\u7b26\u8fd4\u56de\u7684\u503c\u901a\u5e38\u662f\u6700\u540e\u4e00\u4e2a\u53d8\u91cf\u3002 \u8fd8\u53ef\u4ee5\u628a\u6bd4\u8f83\u64cd\u4f5c\u6216\u903b\u8f91\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u8d4b\u503c\u7ed9\u53d8\u91cf\uff0c\u4f8b\u5982\uff1a string1 , string2 , string3 = '' , 'Trondheim' , 'Hammer Dance' non_null = string1 or string2 or string3 non_null # 'Trondheim' \u6ce8\u610f\uff0cPython \u4e0e C \u4e0d\u540c\uff0c\u5728\u8868\u8fbe\u5f0f\u5185\u90e8\u8d4b\u503c\u5fc5\u987b\u663e\u5f0f\u4f7f\u7528 \u6d77\u8c61\u8fd0\u7b97\u7b26 := \u3002 \u8fd9\u907f\u514d\u4e86 C \u7a0b\u5e8f\u4e2d\u5e38\u89c1\u7684\u95ee\u9898\uff1a\u8981\u5728\u8868\u8fbe\u5f0f\u4e2d\u5199 == \u65f6\uff0c\u5374\u5199\u6210\u4e86 = \u3002 1.8 \u5e8f\u5217\u548c\u5176\u4ed6\u7c7b\u578b\u7684\u6bd4\u8f83 \u00b6 \u5e8f\u5217\u5bf9\u8c61\u53ef\u4ee5\u4e0e\u76f8\u540c\u5e8f\u5217\u7c7b\u578b\u7684\u5176\u4ed6\u5bf9\u8c61\u6bd4\u8f83\u3002\u8fd9\u79cd\u6bd4\u8f83\u4f7f\u7528 \u5b57\u5178\u5f0f \u987a\u5e8f\uff1a\u9996\u5148\uff0c\u6bd4\u8f83\u524d\u4e24\u4e2a\u5bf9\u5e94\u5143\u7d20\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u5219\u53ef\u786e\u5b9a\u6bd4\u8f83\u7ed3\u679c\uff1b\u5982\u679c\u76f8\u7b49\uff0c\u5219\u6bd4\u8f83\u4e4b\u540e\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230\u5176\u4e2d\u4e00\u4e2a\u5e8f\u5217\u7ed3\u675f\u3002\u5982\u679c\u8981\u6bd4\u8f83\u7684\u4e24\u4e2a\u5143\u7d20\u672c\u8eab\u662f\u76f8\u540c\u7c7b\u578b\u7684\u5e8f\u5217\uff0c\u5219\u9012\u5f52\u5730\u6267\u884c\u5b57\u5178\u5f0f\u987a\u5e8f\u6bd4\u8f83\u3002\u5982\u679c\u4e24\u4e2a\u5e8f\u5217\u4e2d\u6240\u6709\u7684\u5bf9\u5e94\u5143\u7d20\u90fd\u76f8\u7b49\uff0c\u5219\u4e24\u4e2a\u5e8f\u5217\u76f8\u7b49\u3002\u5982\u679c\u4e00\u4e2a\u5e8f\u5217\u662f\u53e6\u4e00\u4e2a\u7684\u521d\u59cb\u5b50\u5e8f\u5217\uff0c\u5219\u8f83\u77ed\u7684\u5e8f\u5217\u53ef\u88ab\u89c6\u4e3a\u8f83\u5c0f\uff08\u8f83\u5c11\uff09\u7684\u5e8f\u5217\u3002 \u5bf9\u4e8e\u5b57\u7b26\u4e32\u6765\u8bf4\uff0c\u5b57\u5178\u5f0f\u987a\u5e8f\u4f7f\u7528 Unicode \u7801\u4f4d\u5e8f\u53f7\u6392\u5e8f\u5355\u4e2a\u5b57\u7b26\u3002\u4e0b\u9762\u5217\u51fa\u4e86\u4e00\u4e9b\u6bd4\u8f83\u76f8\u540c\u7c7b\u578b\u5e8f\u5217\u7684\u4f8b\u5b50\uff1a ( 1 , 2 , 3 ) < ( 1 , 2 , 4 ) [ 1 , 2 , 3 ] < [ 1 , 2 , 4 ] 'ABC' < 'C' < 'Pascal' < 'Python' ( 1 , 2 , 3 , 4 ) < ( 1 , 2 , 4 ) ( 1 , 2 ) < ( 1 , 2 , - 1 ) ( 1 , 2 , 3 ) == ( 1.0 , 2.0 , 3.0 ) ( 1 , 2 , ( 'aa' , 'ab' )) < ( 1 , 2 , ( 'abc' , 'a' ), 4 ) \u6ce8\u610f\uff0c\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\u6765\u8bf4\uff0c\u53ea\u8981\u5f85\u6bd4\u8f83\u7684\u5bf9\u8c61\u63d0\u4f9b\u4e86\u5408\u9002\u7684\u6bd4\u8f83\u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 < \u548c > \u8fdb\u884c\u6bd4\u8f83\u3002\u4f8b\u5982\uff0c\u6df7\u5408\u6570\u503c\u7c7b\u578b\u901a\u8fc7\u6570\u503c\u8fdb\u884c\u6bd4\u8f83\uff0c\u6240\u4ee5\uff0c0 \u7b49\u4e8e 0.0\uff0c\u7b49\u7b49\u3002\u5426\u5219\uff0c\u89e3\u91ca\u5668\u4e0d\u4f1a\u968f\u4fbf\u7ed9\u51fa\u4e00\u4e2a\u5bf9\u6bd4\u7ed3\u679c\uff0c\u800c\u662f\u89e6\u53d1 TypeError \u5f02\u5e38\u3002","title":"\u6570\u636e\u7ed3\u6784"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_1","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#11","text":"\u5e8f\u5217\u662f Python \u4e2d\u6700\u57fa\u672c\u7684\u6570\u636e\u7ed3\u6784\uff1b\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u503c\u90fd\u6709\u5bf9\u5e94\u7684\u4f4d\u7f6e\u503c\uff0c\u79f0\u4e4b\u4e3a\u7d22\u5f15\uff0c\u7b2c\u4e00\u4e2a\u7d22\u5f15\u662f 0\uff0c\u7b2c\u4e8c\u4e2a\u7d22\u5f15\u662f 1\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u5217\u8868\u90fd\u53ef\u4ee5\u8fdb\u884c\u7684\u64cd\u4f5c\u5305\u62ec\u7d22\u5f15\uff0c\u5207\u7247\uff0c\u52a0\uff0c\u4e58\uff0c\u68c0\u67e5\u6210\u5458\u3002\u6b64\u5916\uff0cPython \u5df2\u7ecf\u5185\u7f6e\u786e\u5b9a\u5e8f\u5217\u7684\u957f\u5ea6\u4ee5\u53ca\u786e\u5b9a\u6700\u5927\u548c\u6700\u5c0f\u7684\u5143\u7d20\u7684\u65b9\u6cd5\u3002\u5217\u8868\u662f\u6700\u5e38\u7528\u7684 Python \u6570\u636e\u7c7b\u578b\uff0c\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u65b9\u62ec\u53f7\u5185\u7684\u9017\u53f7\u5206\u9694\u503c\u51fa\u73b0\u3002 \u5217\u8868\u7684\u6570\u636e\u9879\u4e0d\u9700\u8981\u5177\u6709\u76f8\u540c\u7684\u7c7b\u578b\uff1b\u521b\u5efa\u4e00\u4e2a\u5217\u8868\uff0c\u53ea\u8981\u628a\u9017\u53f7\u5206\u9694\u7684\u4e0d\u540c\u7684\u6570\u636e\u9879\u4f7f\u7528\u65b9\u62ec\u53f7\u62ec\u8d77\u6765\u5373\u53ef\u3002\u5982\u4e0b\u6240\u793a\uff1a list1 = [ 'a' , 'b' , 'c' , 'd' ] \u8bbf\u95ee\u5217\u8868\u4e2d\u7684\u503c \uff1a\u4e0e\u5b57\u7b26\u4e32\u7684\u7d22\u5f15\u4e00\u6837\uff0c\u5217\u8868\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff0c\u7b2c\u4e8c\u4e2a\u7d22\u5f15\u662f 1 \uff0c\u4f9d\u6b64\u7c7b\u63a8\uff1b\u7d22\u5f15\u4e5f\u53ef\u4ee5\u4ece\u5c3e\u90e8\u5f00\u59cb\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\u4e3a -1 \uff0c\u5f80\u524d\u4e00\u4f4d\u4e3a -2 \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 print ( list1 [ 0 ]) # a print ( list1 [ - 1 ]) # d print ( list1 [ 0 : 3 ]) # ['a','b','c'] \u5305\u542b\u5934\uff0c\u4e0d\u5305\u542b\u5c3e \u5217\u8868\u6570\u636e\u7c7b\u578b\u652f\u6301\u5f88\u591a\u65b9\u6cd5\uff0c\u5217\u8868\u5bf9\u8c61\u7684\u6240\u6709\u65b9\u6cd5\u6240\u793a\u5982\u4e0b\uff1a list.append(x) \u5728\u5217\u8868\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\uff0c\u76f8\u5f53\u4e8e a[len(a):] = [x] \u3002 list.extend(iterable) \u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5143\u7d20\u6269\u5c55\u5217\u8868\u3002\u76f8\u5f53\u4e8e a[len(a):] = iterable \u3002 list.insert(i, x) \u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u63d2\u5165\u5143\u7d20\u7684\u7d22\u5f15\uff0c\u56e0\u6b64\uff0c a.insert(0, x) \u5728\u5217\u8868\u5f00\u5934\u63d2\u5165\u5143\u7d20\uff0c a.insert(len(a), x) \u7b49\u540c\u4e8e a.append(x) \u3002 list.remove(x) \u4ece\u5217\u8868\u4e2d\u5220\u9664\u7b2c\u4e00\u4e2a\u503c\u4e3a x \u7684\u5143\u7d20\u3002\u672a\u627e\u5230\u6307\u5b9a\u5143\u7d20\u65f6\uff0c\u89e6\u53d1 ValueError \u5f02\u5e38\u3002 list.pop([i]) \u5220\u9664\u5217\u8868\u4e2d\u6307\u5b9a\u4f4d\u7f6e\u7684\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u88ab\u5220\u9664\u7684\u5143\u7d20\u3002\u672a\u6307\u5b9a\u4f4d\u7f6e\u65f6\uff0c a.pop() \u5220\u9664\u5e76\u8fd4\u56de\u5217\u8868\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002\uff08\u65b9\u6cd5\u7b7e\u540d\u4e2d i \u4e24\u8fb9\u7684\u65b9\u62ec\u53f7\u8868\u793a\u8be5\u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u4e0d\u662f\u8981\u6c42\u8f93\u5165\u65b9\u62ec\u53f7\u3002\u8fd9\u79cd\u8868\u793a\u6cd5\u5e38\u89c1\u4e8e Python \u53c2\u8003\u5e93\uff09\u3002 list.clear() \u5220\u9664\u5217\u8868\u91cc\u7684\u6240\u6709\u5143\u7d20\uff0c\u76f8\u5f53\u4e8e del a[:] \u3002 list.index(x[, start[, end]]) \u8fd4\u56de\u5217\u8868\u4e2d\u7b2c\u4e00\u4e2a\u503c\u4e3a x \u7684\u5143\u7d20\u7684\u96f6\u57fa\u7d22\u5f15\u3002\u672a\u627e\u5230\u6307\u5b9a\u5143\u7d20\u65f6\uff0c\u89e6\u53d1 ValueError \u5f02\u5e38\u3002\u53ef\u9009\u53c2\u6570 start \u548c end \u662f\u5207\u7247\u7b26\u53f7\uff0c\u7528\u4e8e\u5c06\u641c\u7d22\u9650\u5236\u4e3a\u5217\u8868\u7684\u7279\u5b9a\u5b50\u5e8f\u5217\u3002\u8fd4\u56de\u7684\u7d22\u5f15\u662f\u76f8\u5bf9\u4e8e\u6574\u4e2a\u5e8f\u5217\u7684\u5f00\u59cb\u8ba1\u7b97\u7684\uff0c\u800c\u4e0d\u662f start \u53c2\u6570\u3002 list.count(x) \u8fd4\u56de\u5217\u8868\u4e2d\u5143\u7d20 x \u51fa\u73b0\u7684\u6b21\u6570\u3002 list.sort(***, key=None, reverse=False) \u5c31\u5730\u6392\u5e8f\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff08\u8981\u4e86\u89e3\u81ea\u5b9a\u4e49\u6392\u5e8f\u53c2\u6570\uff0c\u8be6\u89c1 sorted() \uff09\u3002 list.reverse() \u53cd\u8f6c\u5217\u8868\u4e2d\u7684\u5143\u7d20\u3002 list.copy() \u8fd4\u56de\u5217\u8868\u7684\u6d45\u62f7\u8d1d\u3002\u76f8\u5f53\u4e8e a[:] \u3002 \u5217\u8868\u5bf9 + \u548c * \u7684\u64cd\u4f5c\u7b26\u4e0e\u5b57\u7b26\u4e32\u76f8\u4f3c\u3002+ \u53f7\u7528\u4e8e\u7ec4\u5408\u5217\u8868\uff0c* \u53f7\u7528\u4e8e\u91cd\u590d\u5217\u8868\u3002 len(list) \u5217\u8868\u5143\u7d20\u4e2a\u6570 max(list) \u5217\u8868\u5143\u7d20\u6700\u5927\u503c\uff1b min(list) \u5217\u8868\u5143\u7d20\u6700\u5c0f\u503c\u3002 \u5217\u8868\u65b9\u6cd5\u793a\u4f8b\uff1a fruits = [ 'orange' , 'apple' , 'pear' , 'banana' , 'kiwi' , 'apple' , 'banana' ] fruits . count ( 'apple' ) # 2 fruits . count ( 'tangerine' ) # 0 fruits . index ( 'banana' ) # 3 fruits . index ( 'banana' , 4 ) # Find next banana starting a position 4 \u7ed3\u679c\u4e3a6 fruits . reverse () fruits # ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange'] fruits . append ( 'grape' ) fruits # ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape'] fruits . sort () fruits # ['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear'] fruits . pop () # 'pear' \u6ce8\u610f\uff1a insert \u3001 remove \u3001 sort \u7b49\u65b9\u6cd5\u53ea\u4fee\u6539\u5217\u8868\uff0c\u4e0d\u8f93\u51fa\u8fd4\u56de\u503c\u2014\u2014\u8fd4\u56de\u7684\u9ed8\u8ba4\u503c\u4e3a None \uff0c\u8fd9\u662f\u6240\u6709 Python \u53ef\u53d8\u6570\u636e\u7ed3\u6784\u7684\u8bbe\u8ba1\u539f\u5219\u3002\u8fd8\u6709\uff0c\u4e0d\u662f\u6240\u6709\u6570\u636e\u90fd\u53ef\u4ee5\u6392\u5e8f\u6216\u6bd4\u8f83\u3002\u4f8b\u5982\uff0c [None, 'hello', 10] \u5c31\u4e0d\u53ef\u6392\u5e8f\uff0c\u56e0\u4e3a\u6574\u6570\u4e0d\u80fd\u4e0e\u5b57\u7b26\u4e32\u5bf9\u6bd4\uff0c\u800c None \u4e0d\u80fd\u4e0e\u5176\u4ed6\u7c7b\u578b\u5bf9\u6bd4\u3002\u6709\u4e9b\u7c7b\u578b\u6839\u672c\u5c31\u6ca1\u6709\u5b9a\u4e49\u987a\u5e8f\u5173\u7cfb\uff0c\u4f8b\u5982\uff0c 3+4j < 5+7j \u8fd9\u79cd\u5bf9\u6bd4\u64cd\u4f5c\u5c31\u662f\u65e0\u6548\u7684\u3002","title":"1.1 \u5217\u8868"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#111","text":"\u4f7f\u7528\u5217\u8868\u65b9\u6cd5\u5b9e\u73b0\u5806\u6808\u975e\u5e38\u5bb9\u6613\uff0c\u6700\u540e\u63d2\u5165\u7684\u6700\u5148\u53d6\u51fa\uff08\u201c\u540e\u8fdb\u5148\u51fa\u201d\uff09\u3002\u628a\u5143\u7d20\u6dfb\u52a0\u5230\u5806\u6808\u7684\u9876\u7aef\uff0c\u4f7f\u7528 append() \u3002\u4ece\u5806\u6808\u9876\u90e8\u53d6\u51fa\u5143\u7d20\uff0c\u4f7f\u7528 pop() \uff0c\u4e0d\u7528\u6307\u5b9a\u7d22\u5f15\u3002\u4f8b\u5982\uff1a stack = [ 3 , 4 , 5 ] stack . append ( 6 ) stack . append ( 7 ) stack # [3, 4, 5, 6, 7] stack . pop () # 7 stack # [3, 4, 5, 6] stack . pop () # 6 stack . pop () # 5 stack # [3, 4]","title":"1.1.1 \u7528\u5217\u8868\u5b9e\u73b0\u5806\u6808"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#112","text":"\u5217\u8868\u4e5f\u53ef\u4ee5\u7528\u4f5c\u961f\u5217\uff0c\u6700\u5148\u52a0\u5165\u7684\u5143\u7d20\uff0c\u6700\u5148\u53d6\u51fa\uff08\u201c\u5148\u8fdb\u5148\u51fa\u201d\uff09\uff1b\u7136\u800c\uff0c\u5217\u8868\u4f5c\u4e3a\u961f\u5217\u7684\u6548\u7387\u5f88\u4f4e\u3002\u56e0\u4e3a\uff0c\u5728\u5217\u8868\u672b\u5c3e\u6dfb\u52a0\u548c\u5220\u9664\u5143\u7d20\u975e\u5e38\u5feb\uff0c\u4f46\u5728\u5217\u8868\u5f00\u5934\u63d2\u5165\u6216\u79fb\u9664\u5143\u7d20\u5374\u5f88\u6162\uff08\u56e0\u4e3a\u6240\u6709\u5176\u4ed6\u5143\u7d20\u90fd\u5fc5\u987b\u79fb\u52a8\u4e00\u4f4d\uff09\u3002 \u5b9e\u73b0\u961f\u5217\u6700\u597d\u7528 collections.deque \uff0c\u53ef\u4ee5\u5feb\u901f\u4ece\u4e24\u7aef\u6dfb\u52a0\u6216\u5220\u9664\u5143\u7d20\u3002\u4f8b\u5982\uff1a from collections import deque queue = deque ([ \"Eric\" , \"John\" , \"Michael\" ]) queue . append ( \"Terry\" ) # Terry arrives queue . append ( \"Graham\" ) # Graham arrives queue . popleft () # The first to arrive now leaves:'Eric' queue . popleft () # The second to arrive now leaves:'John' queue # Remaining queue in order of arrival:deque(['Michael', 'Terry', 'Graham'])","title":"1.1.2 \u7528\u5217\u8868\u5b9e\u73b0\u961f\u5217"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#113","text":"\u5217\u8868\u63a8\u5bfc\u5f0f\u521b\u5efa\u5217\u8868\u7684\u65b9\u5f0f\u66f4\u7b80\u6d01\u3002\u5e38\u89c1\u7684\u7528\u6cd5\u4e3a\uff0c\u5bf9\u5e8f\u5217\u6216\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5e94\u7528\u67d0\u79cd\u64cd\u4f5c\uff0c\u7528\u751f\u6210\u7684\u7ed3\u679c\u521b\u5efa\u65b0\u7684\u5217\u8868\uff1b\u6216\u7528\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u521b\u5efa\u5b50\u5e8f\u5217\u3002 \u4f8b\u5982\uff0c\u521b\u5efa\u5e73\u65b9\u503c\u7684\u5217\u8868\uff1a squares = [] for x in range ( 10 ): squares . append ( x ** 2 ) squares # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] \u6ce8\u610f\uff0c\u8fd9\u6bb5\u4ee3\u7801\u521b\u5efa\uff08\u6216\u8986\u76d6\uff09\u53d8\u91cf x \uff0c\u8be5\u53d8\u91cf\u5728\u5faa\u73af\u7ed3\u675f\u540e\u4ecd\u7136\u5b58\u5728\u3002\u4e0b\u8ff0\u65b9\u6cd5\u53ef\u4ee5\u65e0\u526f\u4f5c\u7528\u5730\u8ba1\u7b97\u5e73\u65b9\u5217\u8868\uff1a squares = list ( map ( lambda x : x ** 2 , range ( 10 ))) \u6216\u7b49\u4ef7\u4e8e\uff1a squares = [ x ** 2 for x in range ( 10 )] \u4e0a\u9762\u8fd9\u79cd\u5199\u6cd5\u66f4\u7b80\u6d01\u3001\u6613\u8bfb\u3002 \u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u65b9\u62ec\u53f7\u5185\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u540e\u9762\u4e3a\u4e00\u4e2a for \u5b50\u53e5\uff0c\u7136\u540e\uff0c\u662f\u96f6\u4e2a\u6216\u591a\u4e2a for \u6216 if \u5b50\u53e5\u3002\u7ed3\u679c\u662f\u7531\u8868\u8fbe\u5f0f\u4f9d\u636e for \u548c if \u5b50\u53e5\u6c42\u503c\u8ba1\u7b97\u800c\u5f97\u51fa\u4e00\u4e2a\u65b0\u5217\u8868\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u4ee5\u4e0b\u5217\u8868\u63a8\u5bfc\u5f0f\u5c06\u4e24\u4e2a\u5217\u8868\u4e2d\u4e0d\u76f8\u7b49\u7684\u5143\u7d20\u7ec4\u5408\u8d77\u6765\uff1a [( x , y ) for x in [ 1 , 2 , 3 ] for y in [ 3 , 1 , 4 ] if x != y ] # \u8f93\u51fa\u4e3a\uff1a[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)] \u5217\u8868\u63a8\u5bfc\u5f0f\u53ef\u4ee5\u4f7f\u7528\u590d\u6742\u7684\u8868\u8fbe\u5f0f\u548c\u5d4c\u5957\u51fd\u6570\uff1a from math import pi [ str ( round ( pi , i )) for i in range ( 1 , 6 )] # \u8f93\u51fa\u4e3a\uff1a['3.1', '3.14', '3.142', '3.1416', '3.14159']","title":"1.1.3 \u5217\u8868\u63a8\u5bfc\u5f0f"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#114","text":"\u5217\u8868\u63a8\u5bfc\u5f0f\u4e2d\u7684\u521d\u59cb\u8868\u8fbe\u5f0f\u53ef\u4ee5\u662f\u4efb\u4f55\u8868\u8fbe\u5f0f\uff0c\u751a\u81f3\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u5217\u8868\u63a8\u5bfc\u5f0f\u3002 \u4e0b\u9762\u8fd9\u4e2a 3x4 \u77e9\u9635\uff0c\u7531 3 \u4e2a\u957f\u5ea6\u4e3a 4 \u7684\u5217\u8868\u7ec4\u6210\uff1a matrix = [ [ 1 , 2 , 3 , 4 ], [ 5 , 6 , 7 , 8 ], [ 9 , 10 , 11 , 12 ], ] # \u4e0b\u9762\u7684\u5217\u8868\u63a8\u5bfc\u5f0f\u53ef\u4ee5\u8f6c\u7f6e\u884c\u5217\uff1a [[ row [ i ] for row in matrix ] for i in range ( 4 )] # \u8f93\u51fa\u4e3a\uff1a[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]","title":"1.1.4 \u5d4c\u5957\u7684\u5217\u8868\u63a8\u5bfc\u5f0f"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#12-del","text":"del \u8bed\u53e5\u6309\u7d22\u5f15\uff0c\u800c\u4e0d\u662f\u503c\u4ece\u5217\u8868\u4e2d\u79fb\u9664\u5143\u7d20\u3002\u4e0e\u8fd4\u56de\u503c\u7684 pop() \u65b9\u6cd5\u4e0d\u540c\uff0c del \u8bed\u53e5\u4e5f\u53ef\u4ee5\u4ece\u5217\u8868\u4e2d\u79fb\u9664\u5207\u7247\uff0c\u6216\u6e05\u7a7a\u6574\u4e2a\u5217\u8868\uff08\u4e4b\u524d\u662f\u5c06\u7a7a\u5217\u8868\u8d4b\u503c\u7ed9\u5207\u7247\uff09\u3002 \u4f8b\u5982\uff1a a = [ - 1 , 1 , 66.25 , 333 , 333 , 1234.5 ] del a [ 0 ] a # [1, 66.25, 333, 333, 1234.5] del a [ 2 : 4 ] a # [1, 66.25, 1234.5] del a [:] a # [] del \u4e5f\u53ef\u4ee5\u7528\u6765\u5220\u9664\u6574\u4e2a\u53d8\u91cf\uff1a del a \u6b64\u540e\uff0c\u518d\u5f15\u7528 a \u5c31\u4f1a\u62a5\u9519\uff08\u76f4\u5230\u4e3a\u5b83\u8d4b\u4e0e\u53e6\u4e00\u4e2a\u503c\uff09\u3002\u540e\u6587\u4f1a\u4ecb\u7ecd del \u7684\u5176\u4ed6\u7528\u6cd5\u3002","title":"1.2 del \u8bed\u53e5"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#13","text":"\u5217\u8868\u548c\u5b57\u7b26\u4e32\u6709\u5f88\u591a\u5171\u6027\uff0c\u4f8b\u5982\uff0c\u7d22\u5f15\u548c\u5207\u7247\u64cd\u4f5c\u3002\u8fd9\u4e24\u79cd\u6570\u636e\u7c7b\u578b\u662f \u5e8f\u5217 \uff08\u53c2\u89c1 \u5e8f\u5217\u7c7b\u578b --- list, tuple, range \uff09\u3002\u968f\u7740 Python \u8bed\u8a00\u7684\u53d1\u5c55\uff0c\u5176\u4ed6\u7684\u5e8f\u5217\u7c7b\u578b\u4e5f\u88ab\u52a0\u5165\u5176\u4e2d\u3002\u672c\u8282\u4ecb\u7ecd\u53e6\u4e00\u79cd\u6807\u51c6\u5e8f\u5217\u7c7b\u578b\uff1a \u5143\u7ec4 \u3002 \u5143\u7ec4\u7531\u591a\u4e2a\u7528\u9017\u53f7\u9694\u5f00\u7684\u503c\u7ec4\u6210\uff0c\u4f8b\u5982\uff1a t = 12345 , 54321 , 'hello!' t [ 0 ] # 12345 t # (12345, 54321, 'hello!') # Tuples may be nested: u = t , ( 1 , 2 , 3 , 4 , 5 ) u # ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5)) # Tuples are immutable: t [ 0 ] = 88888 ''' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'tuple' object does not support item assignment''' # but they can contain mutable objects: v = ([ 1 , 2 , 3 ], [ 3 , 2 , 1 ]) v # ([1, 2, 3], [3, 2, 1]) \u8f93\u51fa\u65f6\uff0c\u5143\u7ec4\u90fd\u8981\u7531\u5706\u62ec\u53f7\u6807\u6ce8\uff0c\u8fd9\u6837\u624d\u80fd\u6b63\u786e\u5730\u89e3\u91ca\u5d4c\u5957\u5143\u7ec4\u3002\u8f93\u5165\u65f6\uff0c\u5706\u62ec\u53f7\u53ef\u6709\u53ef\u65e0\uff0c\u4e0d\u8fc7\u7ecf\u5e38\u662f\u5fc5\u987b\u7684\uff08\u5982\u679c\u5143\u7ec4\u662f\u66f4\u5927\u7684\u8868\u8fbe\u5f0f\u7684\u4e00\u90e8\u5206\uff09\u3002\u4e0d\u5141\u8bb8\u4e3a\u5143\u7ec4\u4e2d\u7684\u5355\u4e2a\u5143\u7d20\u8d4b\u503c\uff0c\u5f53\u7136\uff0c\u53ef\u4ee5\u521b\u5efa\u542b\u5217\u8868\u7b49\u53ef\u53d8\u5bf9\u8c61\u7684\u5143\u7ec4\u3002 \u867d\u7136\uff0c\u5143\u7ec4\u4e0e\u5217\u8868\u5f88\u50cf\uff0c\u4f46\u4f7f\u7528\u573a\u666f\u4e0d\u540c\uff0c\u7528\u9014\u4e5f\u4e0d\u540c\u3002\u5143\u7ec4\u662f immutable \uff08\u4e0d\u53ef\u53d8\u7684\uff09\uff0c\u4e00\u822c\u53ef\u5305\u542b\u5f02\u8d28\u5143\u7d20\u5e8f\u5217\uff0c\u901a\u8fc7\u89e3\u5305\uff08\u89c1\u672c\u8282\u4e0b\u6587\uff09\u6216\u7d22\u5f15\u8bbf\u95ee\uff08\u5982\u679c\u662f namedtuples \uff0c\u53ef\u4ee5\u5c5e\u6027\u8bbf\u95ee\uff09\u3002\u5217\u8868\u662f mutable \uff08\u53ef\u53d8\u7684\uff09\uff0c\u5217\u8868\u5143\u7d20\u4e00\u822c\u4e3a\u540c\u8d28\u7c7b\u578b\uff0c\u53ef\u8fed\u4ee3\u8bbf\u95ee\u3002 \u6784\u9020 0 \u4e2a\u6216 1 \u4e2a\u5143\u7d20\u7684\u5143\u7ec4\u6bd4\u8f83\u7279\u6b8a\uff1a\u4e3a\u4e86\u9002\u5e94\u8fd9\u79cd\u60c5\u51b5\uff0c\u5bf9\u53e5\u6cd5\u6709\u4e00\u4e9b\u989d\u5916\u7684\u6539\u53d8\u3002\u7528\u4e00\u5bf9\u7a7a\u5706\u62ec\u53f7\u5c31\u53ef\u4ee5\u521b\u5efa\u7a7a\u5143\u7ec4\uff1b\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u5143\u7ec4\u53ef\u4ee5\u901a\u8fc7\u5728\u8fd9\u4e2a\u5143\u7d20\u540e\u6dfb\u52a0\u9017\u53f7\u6765\u6784\u5efa\uff08\u5706\u62ec\u53f7\u91cc\u53ea\u6709\u4e00\u4e2a\u503c\u7684\u8bdd\u4e0d\u591f\u660e\u786e\uff09\u3002\u4f8b\u5982\uff1a empty = () singleton = 'hello' , # <-- note trailing comma len ( empty ) # 0 len ( singleton ) # 1 singleton # ('hello',) \u8bed\u53e5 t = 12345, 54321, 'hello!' \u662f \u5143\u7ec4\u6253\u5305 \u7684\u4f8b\u5b50\uff1a\u503c 12345 , 54321 \u548c 'hello!' \u4e00\u8d77\u88ab\u6253\u5305\u8fdb\u5143\u7ec4\u3002\u9006\u64cd\u4f5c\u4e5f\u53ef\u4ee5\uff1a x , y , z = t \u79f0\u4e4b\u4e3a \u5e8f\u5217\u89e3\u5305 \u4e5f\u662f\u59a5\u59a5\u7684\uff0c\u9002\u7528\u4e8e\u53f3\u4fa7\u7684\u4efb\u4f55\u5e8f\u5217\u3002\u5e8f\u5217\u89e3\u5305\u65f6\uff0c\u5de6\u4fa7\u53d8\u91cf\u4e0e\u53f3\u4fa7\u5e8f\u5217\u5143\u7d20\u7684\u6570\u91cf\u5e94\u76f8\u7b49\u3002\u6ce8\u610f\uff0c\u591a\u91cd\u8d4b\u503c\u5176\u5b9e\u53ea\u662f\u5143\u7ec4\u6253\u5305\u548c\u5e8f\u5217\u89e3\u5305\u7684\u7ec4\u5408\u3002","title":"1.3 \u5143\u7ec4"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#14","text":"Python \u8fd8\u652f\u6301 \u96c6\u5408 \u8fd9\u79cd\u6570\u636e\u7c7b\u578b\u3002\u96c6\u5408\u662f\u7531\u4e0d\u91cd\u590d\u5143\u7d20\u7ec4\u6210\u7684\u65e0\u5e8f\u5bb9\u5668\u3002\u57fa\u672c\u7528\u6cd5\u5305\u62ec\u6210\u5458\u68c0\u6d4b\u3001\u6d88\u9664\u91cd\u590d\u5143\u7d20\u3002\u96c6\u5408\u5bf9\u8c61\u652f\u6301\u5408\u96c6\u3001\u4ea4\u96c6\u3001\u5dee\u96c6\u3001\u5bf9\u79f0\u5dee\u5206\u7b49\u6570\u5b66\u8fd0\u7b97\u3002 \u521b\u5efa\u96c6\u5408\u7528\u82b1\u62ec\u53f7\u6216 set() \u51fd\u6570\u3002\u6ce8\u610f\uff0c\u521b\u5efa\u7a7a\u96c6\u5408\u53ea\u80fd\u7528 set() \uff0c\u4e0d\u80fd\u7528 {} \uff0c {} \u521b\u5efa\u7684\u662f\u7a7a\u5b57\u5178\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e9b\u7b80\u5355\u7684\u793a\u4f8b\uff1a basket = { 'apple' , 'orange' , 'apple' , 'pear' , 'orange' , 'banana' } print ( basket ) # show that duplicates have been removed # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a{'orange', 'banana', 'pear', 'apple'} 'orange' in basket # fast membership testing\uff1aTrue 'crabgrass' in basket # False # Demonstrate set operations on unique letters from two words a = set ( 'abracadabra' ) b = set ( 'alacazam' ) a # unique letters in a # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a{'a', 'r', 'b', 'c', 'd'} a - b # letters in a but not in b # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a{'r', 'd', 'b'} a | b # letters in a or b or both # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a{'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'} a & b # letters in both a and b # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a{'a', 'c'} a ^ b # letters in a or b but not both # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a{'r', 'd', 'b', 'm', 'z', 'l'} \u4e0e \u5217\u8868\u63a8\u5bfc\u5f0f \u7c7b\u4f3c\uff0c\u96c6\u5408\u4e5f\u652f\u6301\u63a8\u5bfc\u5f0f\uff1a a = { x for x in 'abracadabra' if x not in 'abc' } a # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a{'r', 'd'}","title":"1.4 \u96c6\u5408"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#15","text":"\u5b57\u5178 \uff08\u53c2\u89c1 \u6620\u5c04\u7c7b\u578b --- dict \uff09 \u4e5f\u662f\u4e00\u79cd\u5e38\u7528\u7684 Python \u5167\u7f6e\u6570\u636e\u7c7b\u578b\u3002\u5176\u4ed6\u8bed\u8a00\u53ef\u80fd\u628a\u5b57\u5178\u79f0\u4e3a \u8054\u5408\u5185\u5b58 \u6216 \u8054\u5408\u6570\u7ec4 \u3002\u4e0e\u4ee5\u8fde\u7eed\u6574\u6570\u4e3a\u7d22\u5f15\u7684\u5e8f\u5217\u4e0d\u540c\uff0c\u5b57\u5178\u4ee5 \u5173\u952e\u5b57 \u4e3a\u7d22\u5f15\uff0c\u5173\u952e\u5b57\u901a\u5e38\u662f\u5b57\u7b26\u4e32\u6216\u6570\u5b57\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u4efb\u610f\u4e0d\u53ef\u53d8\u7c7b\u578b\u3002\u53ea\u5305\u542b\u5b57\u7b26\u4e32\u3001\u6570\u5b57\u3001\u5143\u7ec4\u7684\u5143\u7ec4\uff0c\u4e5f\u53ef\u4ee5\u7528\u4f5c\u5173\u952e\u5b57\u3002\u4f46\u5982\u679c\u5143\u7ec4\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u5305\u542b\u4e86\u53ef\u53d8\u5bf9\u8c61\uff0c\u5c31\u4e0d\u80fd\u7528\u4f5c\u5173\u952e\u5b57\u3002\u5217\u8868\u4e0d\u80fd\u5f53\u5173\u952e\u5b57\uff0c\u56e0\u4e3a\u5217\u8868\u53ef\u4ee5\u7528\u7d22\u5f15\u3001\u5207\u7247\u3001 append() \u3001 extend() \u7b49\u65b9\u6cd5\u4fee\u6539\u3002 \u53ef\u4ee5\u628a\u5b57\u5178\u7406\u89e3\u4e3a \u952e\u503c\u5bf9 \u7684\u96c6\u5408\uff0c\u4f46\u5b57\u5178\u7684\u952e\u5fc5\u987b\u662f\u552f\u4e00\u7684\u3002\u82b1\u62ec\u53f7 {} \u7528\u4e8e\u521b\u5efa\u7a7a\u5b57\u5178\u3002\u53e6\u4e00\u79cd\u521d\u59cb\u5316\u5b57\u5178\u7684\u65b9\u5f0f\u662f\uff0c\u5728\u82b1\u62ec\u53f7\u91cc\u8f93\u5165\u9017\u53f7\u5206\u9694\u7684\u952e\u503c\u5bf9\uff0c\u8fd9\u4e5f\u662f\u5b57\u5178\u7684\u8f93\u51fa\u65b9\u5f0f\u3002 \u5b57\u5178\u7684\u4e3b\u8981\u7528\u9014\u662f\u901a\u8fc7\u5173\u952e\u5b57\u5b58\u50a8\u3001\u63d0\u53d6\u503c\u3002\u7528 del \u53ef\u4ee5\u5220\u9664\u952e\u503c\u5bf9\u3002\u7528\u5df2\u5b58\u5728\u7684\u5173\u952e\u5b57\u5b58\u50a8\u503c\uff0c\u4e0e\u8be5\u5173\u952e\u5b57\u5173\u8054\u7684\u65e7\u503c\u4f1a\u88ab\u53d6\u4ee3\u3002\u901a\u8fc7\u4e0d\u5b58\u5728\u7684\u952e\u63d0\u53d6\u503c\uff0c\u5219\u4f1a\u62a5\u9519\u3002 \u5bf9\u5b57\u5178\u6267\u884c list(d) \u64cd\u4f5c\uff0c\u8fd4\u56de\u8be5\u5b57\u5178\u4e2d\u6240\u6709\u952e\u7684\u5217\u8868\uff0c\u6309\u63d2\u5165\u6b21\u5e8f\u6392\u5217\uff08\u5982\u9700\u6392\u5e8f\uff0c\u8bf7\u4f7f\u7528 sorted(d) \uff09\u3002\u68c0\u67e5\u5b57\u5178\u91cc\u662f\u5426\u5b58\u5728\u67d0\u4e2a\u952e\uff0c\u4f7f\u7528\u5173\u952e\u5b57 in \u3002 \u4ee5\u4e0b\u662f\u4e00\u4e9b\u5b57\u5178\u7684\u7b80\u5355\u793a\u4f8b\uff1a tel = { 'jack' : 4098 , 'sape' : 4139 } tel [ 'guido' ] = 4127 tel # {'jack': 4098, 'sape': 4139, 'guido': 4127} tel [ 'jack' ] # 4098 del tel [ 'sape' ] tel [ 'irv' ] = 4127 tel # {'jack': 4098, 'guido': 4127, 'irv': 4127} list ( tel ) # ['jack', 'guido', 'irv'] sorted ( tel ) # ['guido', 'irv', 'jack'] 'guido' in tel # True 'jack' not in tel # False dict() \u6784\u9020\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u7528\u952e\u503c\u5bf9\u5e8f\u5217\u521b\u5efa\u5b57\u5178\uff1a dict ([( 'sape' , 4139 ), ( 'guido' , 4127 ), ( 'jack' , 4098 )]) # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a{'sape': 4139, 'guido': 4127, 'jack': 4098} \u5b57\u5178\u63a8\u5bfc\u5f0f\u53ef\u4ee5\u7528\u4efb\u610f\u952e\u503c\u8868\u8fbe\u5f0f\u521b\u5efa\u5b57\u5178\uff1a { x : x ** 2 for x in ( 2 , 4 , 6 )} # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a{2: 4, 4: 16, 6: 36} \u5173\u952e\u5b57\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u76f4\u63a5\u7528\u5173\u952e\u5b57\u53c2\u6570\u6307\u5b9a\u952e\u503c\u5bf9\u66f4\u4fbf\u6377\uff1a dict ( sape = 4139 , guido = 4127 , jack = 4098 ) # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a{'sape': 4139, 'guido': 4127, 'jack': 4098}","title":"1.5 \u5b57\u5178"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#16","text":"\u5728\u5b57\u5178\u4e2d\u5faa\u73af\u65f6\uff0c\u7528 items() \u65b9\u6cd5\u53ef\u540c\u65f6\u53d6\u51fa\u952e\u548c\u5bf9\u5e94\u7684\u503c\uff1a knights = { 'gallahad' : 'the pure' , 'robin' : 'the brave' } for k , v in knights . items (): print ( k , v ) # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a ''' gallahad the pure robin the brave''' \u5728\u5e8f\u5217\u4e2d\u5faa\u73af\u65f6\uff0c\u7528 enumerate() \u51fd\u6570\u53ef\u4ee5\u540c\u65f6\u53d6\u51fa\u4f4d\u7f6e\u7d22\u5f15\u548c\u5bf9\u5e94\u7684\u503c\uff1a for i , v in enumerate ([ 'tic' , 'tac' , 'toe' ]): print ( i , v ) # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a 0 tic 1 tac 2 toe \u540c\u65f6\u5faa\u73af\u4e24\u4e2a\u6216\u591a\u4e2a\u5e8f\u5217\u65f6\uff0c\u7528 zip() \u51fd\u6570\u53ef\u4ee5\u5c06\u5176\u5185\u7684\u5143\u7d20\u4e00\u4e00\u5339\u914d\uff1a questions = [ 'name' , 'quest' , 'favorite color' ] answers = [ 'lancelot' , 'the holy grail' , 'blue' ] for q , a in zip ( questions , answers ): print ( 'What is your {0} ? It is {1} .' . format ( q , a )) # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a ''' What is your name? It is lancelot. What is your quest? It is the holy grail. What is your favorite color? It is blue.''' \u9006\u5411\u5faa\u73af\u5e8f\u5217\u65f6\uff0c\u5148\u6b63\u5411\u5b9a\u4f4d\u5e8f\u5217\uff0c\u7136\u540e\u8c03\u7528 reversed() \u51fd\u6570\uff1a for i in reversed ( range ( 1 , 10 , 2 )): print ( i ) # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a 9 7 5 3 1 \u6309\u6307\u5b9a\u987a\u5e8f\u5faa\u73af\u5e8f\u5217\uff0c\u53ef\u4ee5\u7528 sorted() \u51fd\u6570\uff0c\u5728\u4e0d\u6539\u52a8\u539f\u5e8f\u5217\u7684\u57fa\u7840\u4e0a\uff0c\u8fd4\u56de\u4e00\u4e2a\u91cd\u65b0\u7684\u5e8f\u5217\uff1a basket = [ 'apple' , 'orange' , 'apple' , 'pear' , 'orange' , 'banana' ] for i in sorted ( basket ): print ( i ) # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a apple apple banana orange orange pear \u4f7f\u7528 set() \u53bb\u9664\u5e8f\u5217\u4e2d\u7684\u91cd\u590d\u5143\u7d20\u3002\u4f7f\u7528 sorted() \u52a0 set() \u5219\u6309\u6392\u5e8f\u540e\u7684\u987a\u5e8f\uff0c\u5faa\u73af\u904d\u5386\u5e8f\u5217\u4e2d\u7684\u552f\u4e00\u5143\u7d20\uff1a basket = [ 'apple' , 'orange' , 'apple' , 'pear' , 'orange' , 'banana' ] for f in sorted ( set ( basket )): print ( f ) # \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a apple banana orange pear \u4e00\u822c\u6765\u8bf4\uff0c\u5728\u5faa\u73af\u4e2d\u4fee\u6539\u5217\u8868\u7684\u5185\u5bb9\u65f6\uff0c\u521b\u5efa\u65b0\u5217\u8868\u6bd4\u8f83\u7b80\u5355\uff0c\u4e14\u5b89\u5168\uff1a import math raw_data = [ 56.2 , float ( 'NaN' ), 51.7 , 55.3 , 52.5 , float ( 'NaN' ), 47.8 ] filtered_data = [] for value in raw_data : if not math . isnan ( value ): filtered_data . append ( value ) filtered_data # [56.2, 51.7, 55.3, 52.5, 47.8]","title":"1.6 \u5faa\u73af\u7684\u6280\u5de7"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#17","text":"while \u548c if \u6761\u4ef6\u53e5\u4e0d\u53ea\u53ef\u4ee5\u8fdb\u884c\u6bd4\u8f83\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u8fd0\u7b97\u7b26\u3002 \u6bd4\u8f83\u8fd0\u7b97\u7b26 in \u548c not in \u6821\u9a8c\u5e8f\u5217\u91cc\u662f\u5426\u5b58\u5728\u67d0\u4e2a\u503c\u3002\u8fd0\u7b97\u7b26 is \u548c is not \u6bd4\u8f83\u4e24\u4e2a\u5bf9\u8c61\u662f\u5426\u4e3a\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002\u6240\u6709\u6bd4\u8f83\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u90fd\u4e00\u6837\uff0c\u4e14\u4f4e\u4e8e\u6570\u503c\u8fd0\u7b97\u7b26\u3002 \u6bd4\u8f83\u64cd\u4f5c\u652f\u6301\u94fe\u5f0f\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c a < b == c \u6821\u9a8c a \u662f\u5426\u5c0f\u4e8e b \uff0c\u4e14 b \u662f\u5426\u7b49\u4e8e c \u3002 \u6bd4\u8f83\u64cd\u4f5c\u53ef\u4ee5\u7528\u5e03\u5c14\u8fd0\u7b97\u7b26 and \u548c or \u7ec4\u5408\uff0c\u5e76\u4e14\uff0c\u6bd4\u8f83\u64cd\u4f5c\uff08\u6216\u5176\u4ed6\u5e03\u5c14\u8fd0\u7b97\uff09\u7684\u7ed3\u679c\u90fd\u53ef\u4ee5\u7528 not \u53d6\u53cd\u3002\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u7684\u4f18\u5148\u7ea7\u4f4e\u4e8e\u6bd4\u8f83\u64cd\u4f5c\u7b26\uff1b not \u7684\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c or \u7684\u4f18\u5148\u7ea7\u6700\u4f4e\uff0c\u56e0\u6b64\uff0c A and not B or C \u7b49\u4ef7\u4e8e (A and (not B)) or C \u3002\u4e0e\u5176\u4ed6\u8fd0\u7b97\u7b26\u64cd\u4f5c\u4e00\u6837\uff0c\u6b64\u5904\u4e5f\u53ef\u4ee5\u7528\u5706\u62ec\u53f7\u8868\u793a\u60f3\u8981\u7684\u7ec4\u5408\u3002 \u5e03\u5c14\u8fd0\u7b97\u7b26 and \u548c or \u4e5f\u79f0\u4e3a \u77ed\u8def \u8fd0\u7b97\u7b26\uff1a\u5176\u53c2\u6570\u4ece\u5de6\u81f3\u53f3\u89e3\u6790\uff0c\u4e00\u65e6\u53ef\u4ee5\u786e\u5b9a\u7ed3\u679c\uff0c\u89e3\u6790\u5c31\u4f1a\u505c\u6b62\u3002\u4f8b\u5982\uff0c\u5982\u679c A \u548c C \u4e3a\u771f\uff0c B \u4e3a\u5047\uff0c\u90a3\u4e48 A and B and C \u4e0d\u4f1a\u89e3\u6790 C \u3002\u7528\u4f5c\u666e\u901a\u503c\u800c\u4e0d\u662f\u5e03\u5c14\u503c\u65f6\uff0c\u77ed\u8def\u64cd\u4f5c\u7b26\u8fd4\u56de\u7684\u503c\u901a\u5e38\u662f\u6700\u540e\u4e00\u4e2a\u53d8\u91cf\u3002 \u8fd8\u53ef\u4ee5\u628a\u6bd4\u8f83\u64cd\u4f5c\u6216\u903b\u8f91\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u8d4b\u503c\u7ed9\u53d8\u91cf\uff0c\u4f8b\u5982\uff1a string1 , string2 , string3 = '' , 'Trondheim' , 'Hammer Dance' non_null = string1 or string2 or string3 non_null # 'Trondheim' \u6ce8\u610f\uff0cPython \u4e0e C \u4e0d\u540c\uff0c\u5728\u8868\u8fbe\u5f0f\u5185\u90e8\u8d4b\u503c\u5fc5\u987b\u663e\u5f0f\u4f7f\u7528 \u6d77\u8c61\u8fd0\u7b97\u7b26 := \u3002 \u8fd9\u907f\u514d\u4e86 C \u7a0b\u5e8f\u4e2d\u5e38\u89c1\u7684\u95ee\u9898\uff1a\u8981\u5728\u8868\u8fbe\u5f0f\u4e2d\u5199 == \u65f6\uff0c\u5374\u5199\u6210\u4e86 = \u3002","title":"1.7 \u6df1\u5165\u6761\u4ef6\u63a7\u5236"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#18","text":"\u5e8f\u5217\u5bf9\u8c61\u53ef\u4ee5\u4e0e\u76f8\u540c\u5e8f\u5217\u7c7b\u578b\u7684\u5176\u4ed6\u5bf9\u8c61\u6bd4\u8f83\u3002\u8fd9\u79cd\u6bd4\u8f83\u4f7f\u7528 \u5b57\u5178\u5f0f \u987a\u5e8f\uff1a\u9996\u5148\uff0c\u6bd4\u8f83\u524d\u4e24\u4e2a\u5bf9\u5e94\u5143\u7d20\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u5219\u53ef\u786e\u5b9a\u6bd4\u8f83\u7ed3\u679c\uff1b\u5982\u679c\u76f8\u7b49\uff0c\u5219\u6bd4\u8f83\u4e4b\u540e\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230\u5176\u4e2d\u4e00\u4e2a\u5e8f\u5217\u7ed3\u675f\u3002\u5982\u679c\u8981\u6bd4\u8f83\u7684\u4e24\u4e2a\u5143\u7d20\u672c\u8eab\u662f\u76f8\u540c\u7c7b\u578b\u7684\u5e8f\u5217\uff0c\u5219\u9012\u5f52\u5730\u6267\u884c\u5b57\u5178\u5f0f\u987a\u5e8f\u6bd4\u8f83\u3002\u5982\u679c\u4e24\u4e2a\u5e8f\u5217\u4e2d\u6240\u6709\u7684\u5bf9\u5e94\u5143\u7d20\u90fd\u76f8\u7b49\uff0c\u5219\u4e24\u4e2a\u5e8f\u5217\u76f8\u7b49\u3002\u5982\u679c\u4e00\u4e2a\u5e8f\u5217\u662f\u53e6\u4e00\u4e2a\u7684\u521d\u59cb\u5b50\u5e8f\u5217\uff0c\u5219\u8f83\u77ed\u7684\u5e8f\u5217\u53ef\u88ab\u89c6\u4e3a\u8f83\u5c0f\uff08\u8f83\u5c11\uff09\u7684\u5e8f\u5217\u3002 \u5bf9\u4e8e\u5b57\u7b26\u4e32\u6765\u8bf4\uff0c\u5b57\u5178\u5f0f\u987a\u5e8f\u4f7f\u7528 Unicode \u7801\u4f4d\u5e8f\u53f7\u6392\u5e8f\u5355\u4e2a\u5b57\u7b26\u3002\u4e0b\u9762\u5217\u51fa\u4e86\u4e00\u4e9b\u6bd4\u8f83\u76f8\u540c\u7c7b\u578b\u5e8f\u5217\u7684\u4f8b\u5b50\uff1a ( 1 , 2 , 3 ) < ( 1 , 2 , 4 ) [ 1 , 2 , 3 ] < [ 1 , 2 , 4 ] 'ABC' < 'C' < 'Pascal' < 'Python' ( 1 , 2 , 3 , 4 ) < ( 1 , 2 , 4 ) ( 1 , 2 ) < ( 1 , 2 , - 1 ) ( 1 , 2 , 3 ) == ( 1.0 , 2.0 , 3.0 ) ( 1 , 2 , ( 'aa' , 'ab' )) < ( 1 , 2 , ( 'abc' , 'a' ), 4 ) \u6ce8\u610f\uff0c\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\u6765\u8bf4\uff0c\u53ea\u8981\u5f85\u6bd4\u8f83\u7684\u5bf9\u8c61\u63d0\u4f9b\u4e86\u5408\u9002\u7684\u6bd4\u8f83\u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 < \u548c > \u8fdb\u884c\u6bd4\u8f83\u3002\u4f8b\u5982\uff0c\u6df7\u5408\u6570\u503c\u7c7b\u578b\u901a\u8fc7\u6570\u503c\u8fdb\u884c\u6bd4\u8f83\uff0c\u6240\u4ee5\uff0c0 \u7b49\u4e8e 0.0\uff0c\u7b49\u7b49\u3002\u5426\u5219\uff0c\u89e3\u91ca\u5668\u4e0d\u4f1a\u968f\u4fbf\u7ed9\u51fa\u4e00\u4e2a\u5bf9\u6bd4\u7ed3\u679c\uff0c\u800c\u662f\u89e6\u53d1 TypeError \u5f02\u5e38\u3002","title":"1.8 \u5e8f\u5217\u548c\u5176\u4ed6\u7c7b\u578b\u7684\u6bd4\u8f83"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%A7%88/","text":"\u6807\u51c6\u5e93\u6982\u89c8 \u00b6 1.1 OS \u6a21\u5757 \u00b6 os \u6a21\u5757\u63d0\u4f9b\u4e86\u8bb8\u591a\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u4ea4\u4e92\u7684\u51fd\u6570: # OS \u6a21\u5757 import os print ( os . name ) # \u83b7\u53d6\u64cd\u4f5c\u7cfb\u7edf windows-nt print ( os . sep ) # \u8def\u5f84\u5206\u9694\u7b26\uff1awindos-'\\'\uff0c\u5176\u4ed6-'/' print ( os . getcwd ()) # \u8fd4\u56de\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 os . chdir ( '\u8def\u5f84' ) # \u66f4\u6539\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 os . rmdir ( '\u8def\u5f84' ) # \u5220\u9664\u6587\u4ef6 os . rename ( 'old' , 'new' ) # \u66f4\u6539\u6587\u4ef6\u540d os . mkdir ( '123' ) # \u521b\u5efa\u6587\u4ef6\u5939123 print ( os . listdir ()) # \u5217\u51fa\u6307\u5b9a\u76ee\u5f55\u91cc\u7684\u6587\u4ef6\u548c\u6587\u4ef6\u5939\uff0c\u9ed8\u8ba4\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 # os.path print ( os . path . abspath ( 'o1.py' )) # \u7edd\u5bf9\u8def\u5f84\uff1b01.py\u4e3a\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6 print ( os . path . isdir ( 'test' )) # True\uff0c\u5224\u65ad\u662f\u5426\u662f\u6587\u4ef6\u5939\uff1btest\u4e3a\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6 print ( os . path . isfile ( 'test' )) # False\uff0c\u5224\u65ad\u662f\u5426\u662f\u6587\u4ef6 print ( os . path . exists ( 'test' )) # True\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728 print ( os . path . splitext ( '2020.2.21.demo.py' )) # \u5206\u5272 ... \u4e00\u5b9a\u8981\u4f7f\u7528 import os \u800c\u4e0d\u662f from os import * \u3002\u8fd9\u5c06\u907f\u514d\u5185\u5efa\u7684 open() \u51fd\u6570\u88ab os.open() \u9690\u5f0f\u66ff\u6362\u6389\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u4f7f\u7528\u65b9\u5f0f\u5927\u4e0d\u76f8\u540c\u3002 \u5185\u7f6e\u7684 dir() \u548c help() \u51fd\u6570\u53ef\u7528\u4f5c\u4ea4\u4e92\u5f0f\u8f85\u52a9\u5de5\u5177\uff0c\u7528\u4e8e\u5904\u7406\u5927\u578b\u6a21\u5757\uff0c\u5982 os : >>> import os >>> dir ( os ) < returns a list of all module functions > >>> help ( os ) < returns an extensive manual page created from the module 's docstrings> 1.2 sys \u6a21\u5757 \u00b6 \u8be5\u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e9b\u53d8\u91cf\u548c\u51fd\u6570\uff1b\u8fd9\u4e9b\u53d8\u91cf\u53ef\u80fd\u88ab\u89e3\u91ca\u5668\u4f7f\u7528\uff0c\u4e5f\u53ef\u80fd\u7531\u89e3\u91ca\u5668\u63d0\u4f9b\uff1b\u8fd9\u4e9b\u51fd\u6570\u4f1a\u5f71\u54cd\u89e3\u91ca\u5668\u3002\u672c\u6a21\u5757\u603b\u662f\u53ef\u7528\u7684\u3002 # sys \u6a21\u5757 import sys print ( sys . argv ) # \u4e00\u4e2a\u5217\u8868\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u88ab\u4f20\u9012\u7ed9 Python \u811a\u672c\u7684\u547d\u4ee4\u884c\u53c2\u6570\u3002 print ( sys . path ) # \u5217\u8868\uff1a\u67e5\u627e\u6a21\u5757\u7684\u8def\u5f84\uff1b\u5199\u7684.py\u6587\u4ef6\u653e\u5728\u8fd9\u4e2a\u5217\u8868\u91cc\uff0cimport\u65f6\u5148\u5728\u5217\u8868\u91cc\u7684\u8def\u5f84\u91cc\u5bfb\u627e\uff0c\u6ca1\u6709\u5c31\u62a5\u9519 sys . stdin # \u63a5\u6536\u7528\u6237\u6536\u5165\uff0c\u4e0einput()\u76f8\u4f3c sys . stdout # \u8f93\u51fa\uff1b\u53ef\u4ee5\u6539\u53d8\u9ed8\u8ba4\u8f93\u51fa\u4f4d\u7f6e sys . stderr # \u4fee\u6539\uff0c\u53ef\u4ee5\u6539\u53d8\u9ed8\u8ba4'\u9519\u8bef'\u8f93\u51fa\u4f4d\u7f6e sys . exit () # \u9000\u51fa\u7a0b\u5e8f\uff0c\u4e0e\u5185\u7f6e\u51fd\u6570exit()\u529f\u80fd\u4e00\u6837\uff1b\u5185\u90e8\u53ef\u4f20\u5165\u9000\u51fa\u7801\uff08\u9ed8\u8ba4\u4e3a0\uff09\uff1b\u6b64\u4ee3\u7801\u540e\u7684\u4ee3\u7801\u4e0d\u6267\u884c argv[0] \u4e3a\u811a\u672c\u7684\u540d\u79f0\uff08\u662f\u5426\u662f\u5b8c\u6574\u7684\u8def\u5f84\u540d\u53d6\u51b3\u4e8e\u64cd\u4f5c\u7cfb\u7edf\uff09\u3002\u5982\u679c\u662f\u901a\u8fc7 Python \u89e3\u91ca\u5668\u7684\u547d\u4ee4\u884c\u53c2\u6570 -c \u6765\u6267\u884c\u7684\uff0c argv[0] \u4f1a\u88ab\u8bbe\u7f6e\u6210\u5b57\u7b26\u4e32 '-c' \u3002\u5982\u679c\u6ca1\u6709\u811a\u672c\u540d\u88ab\u4f20\u9012\u7ed9 Python \u89e3\u91ca\u5668\uff0c argv[0] \u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002 1.3 math \u6a21\u5757 \u00b6 math \u6a21\u5757\u63d0\u4f9b\u5bf9\u6d6e\u70b9\u6570\u5b66\u7684\u5e95\u5c42C\u5e93\u51fd\u6570\u7684\u8bbf\u95ee: # math \u6a21\u5757 import math print ( math . ceil ( 5 / 2 )) # \u5411\u4e0a\u53d6\u6574 print ( 5 // 2 ) # \u5411\u4e0b\u53d6\u6574 print ( math . floor ( 5 // 2 )) # \u5411\u4e0b\u53d6\u6574 print ( math . fabs ( - 3 )) # \u7edd\u5bf9\u503c print ( math . factorial ( 4 )) # \u6c42\u9636\u4e58 print ( math . fmod ( 5 , 2 )) # \u4f59\u6570\uff0c\u4f7f\u7528\u6d6e\u70b9\u6570\u65f6\u9996\u9009 print ( 5 % 2 ) # \u4f59\u6570\uff0c\u4f7f\u7528\u6574\u6570\u65f6\u9996\u9009 print ( math . modf ( 3.14 )) # \u8fd4\u56de\u5c0f\u6570\u548c\u6574\u6570\u90e8\u5206 print ( math . pi ) # pai ... 1.4 random \u6a21\u5757 \u00b6 random \u6a21\u5757\u63d0\u4f9b\u4e86\u8fdb\u884c\u968f\u673a\u9009\u62e9\u7684\u5de5\u5177: # random \u6a21\u5757 import random print ( random . random ()) # \u751f\u6210[0,1)\u7684\u968f\u673a\u6d6e\u70b9\u6570 print ( random . randint ( 2 , 9 )) # \u751f\u6210[2,9]\u7684\u968f\u673a\u6574\u6570 print ( random . randrange ( 2 , 9 )) # \u751f\u6210[2,9)\u7684\u968f\u673a\u6574\u6570\uff0c\u9ed8\u8ba4\u6b65\u957f\u4e3a1 # random.choice() \u4ece\u4e00\u4e2a\u975e\u7a7a\u5e8f\u5217\u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u636e\uff0c\u5982\u679c\u5e8f\u5217\u4e3a\u7a7a\uff0c\u8fd4\u56de IndexError print ( random . choice ([ 'zhangsan' , 'lisi' , 'wangwu' ])) # random.choices() \u968f\u673a\u751f\u6210k\u5927\u5c0f\u7684\u6570\u636e\uff0c\u5982\u679c\u4e0d\u6307\u5b9aweights\u6216cum_weights\u53c2\u6570\uff0c\u5219\u4f7f\u7528\u540c\u7b49\u6982\u7387\uff1b\u6570\u636e\u53ef\u91cd\u590d\u51fa\u73b0 print ( random . choices ([ 'zhangsan' , 'lisi' , 'wangwu' ], k = 3 )) # random.sample() \u4ece\u5e8f\u5217\u6216\u96c6\u5408\u4e2d\u968f\u673a\u751f\u6210k\u5927\u5c0f\u7684\u6570\u636e\uff0c\u6570\u636e\u4e0d\u80fd\u91cd\u590d print ( random . sample ([ 'zhangsan' , 'lisi' , 'wangwu' ], k = 3 )) # random.shuffle() \u968f\u673a\u6253\u4e71\u4f4d\u7f6e a = list ( 'abcdefgh' ) print ( f '\u539f\u59cb\u6570\u636e\u662f\uff1a { a } ' ) # \u539f\u59cb\u6570\u636e\u662f\uff1a['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'] random . shuffle ( a ) print ( f '\u6253\u4e71\u987a\u5e8f\u540e\u7684\u6570\u636e\u662f\uff1a { a } ' ) # \u6253\u4e71\u987a\u5e8f\u540e\u7684\u6570\u636e\u662f\uff1a['h', 'e', 'g', 'd', 'b', 'a', 'c', 'f']\uff1b\u6bcf\u6b21\u8fd0\u884c\u7ed3\u679c\u4e0d\u540c 1.5 datetime \u6a21\u5757 \u00b6 datetime \u6a21\u5757\u63d0\u4f9b\u7528\u4e8e\u5904\u7406\u65e5\u671f\u548c\u65f6\u95f4\u7684\u7c7b\uff1b\u5305\u62ec\uff1a date\u7c7b \u3001 datetime(date)\u7c7b \u3001 IsoCalendarDate(tuple)\u7c7b \u3001 time\u7c7b \u3001 timedelta\u7c7b \u3001 tzinfo\u7c7b \u3001 timezone(tzinfo)\u7c7b \u3002 \u8fd9\u4e9b\u7c7b\u578b\u7684\u5bf9\u8c61\u90fd\u662f\u4e0d\u53ef\u53d8\u7684\u3002 \u5b50\u7c7b\u5173\u7cfb object timedelta tzinfo timezone time date datetime \u4ee5\u4e0b\u53ea\u662f\u7b80\u5355\u4ecb\u7ecd date\u7c7b \u7684\u7528\u6cd5\uff0c\u66f4\u591a\u7c7b\u7528\u6cd5\u4ecb\u7ecd\u8bf7\u67e5\u9605 \u5b98\u65b9\u6559\u7a0b \uff0c\u6216\u67e5\u770b\u76f8\u5e94\u5185\u7f6e\u51fd\u6570\u4ecb\u7ecd\u3002 # date \u7c7b import datetime as dt # \u5bfc\u5165\uff0c\u662f\u4e3a\u4e86\u4ecb\u7ecd\u7c7b\u7684\u8c03\u7528\u65b9\u6cd5 from datetime import date now = date . today () # \u6216\u8005 dt.date.today() \u7528\u5185\u7f6e\u7c7b\u7684\u8c03\u7528\u65b9\u6cd5 print ( f '\u5f53\u524d\u65e5\u671f\u662f\uff1a { now } ' ) # \u5f53\u524d\u65e5\u671f\u662f \uff1a2021-04-24 # \"Return ctime() style string.\" print ( now . ctime ()) # Sat Apr 24 00:00:00 2021 print ( now . day ) # \u8fd4\u56de\u65e5 24 print ( now . month ) # \u8fd4\u56de\u6708 4 print ( now . year ) # \u8fd4\u56de\u5e74 2021 # now.weekday() \"Return day of the week, where Monday == 0 ... Sunday == 6.\" print ( now . weekday ()) # 2021-04-24\u662f\u5468\u516d\uff0c\u8fd4\u56de\u503c\u4e3a5 print ( now . isoweekday ()) # \u8fd4\u56de\u5468\u516d print ( now . strftime ( ' %d /%m/%y' )) # \u683c\u5f0f\u5316\u65e5\u671f: 24/04/21 # replace() \"\"\"Return a new date with new values for the specified fields.\"\"\" print ( now . replace ( year = 1990 )) # month\u3001day\u4e0d\u6539\u53d8\uff0c\u5c31\u4f7f\u7528\u4e4b\u524d\u7684\u503c birthday = date ( 1999 , 8 , 23 ) print ( birthday ) # 1999-08-23 # \u7efc\u5408\u7528\u6cd5 print ( f '\u4eca\u5929\u662f { now } \uff0c\u5468 { now . isoweekday () } \uff0c\u8ddd\u79bb\u4f60\u7684\u51fa\u751f { birthday } \uff0c\u5df2\u8fc7\u4e86 { ( now - birthday ) . days } \u5929\u4e86\u3002' ) # \u4eca\u5929\u662f2021-04-24\uff0c\u54686\uff0c\u8ddd\u79bb\u4f60\u7684\u51fa\u751f1999-08-23\uff0c\u5df2\u8fc7\u4e867915\u5929\u4e86\u3002 1.6 \u6587\u4ef6\u901a\u914d\u7b26 \u00b6 glob \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5728\u76ee\u5f55\u4e2d\u4f7f\u7528\u901a\u914d\u7b26\u641c\u7d22\u521b\u5efa\u6587\u4ef6\u5217\u8868\u7684\u51fd\u6570: # glob \u6a21\u5757 import glob print ( glob . glob ( '*.py' )) # \u5217\u51fa\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709\u7684.py\u6587\u4ef6 1.7 re \u6a21\u5757 \u00b6 re \u6a21\u5757\u4e3a\u9ad8\u7ea7\u5b57\u7b26\u4e32\u5904\u7406\u63d0\u4f9b\u6b63\u5219\u8868\u8fbe\u5f0f\u5de5\u5177\u3002\u5bf9\u4e8e\u590d\u6742\u7684\u5339\u914d\u548c\u64cd\u4f5c\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u63d0\u4f9b\u7b80\u6d01\uff0c\u4f18\u5316\u7684\u89e3\u51b3\u65b9\u6848\uff1b \u540e\u7eed\u4f1a\u6709\u8be6\u7ec6\u7ae0\u8282\u6765\u8bb0\u5f55\u5b66\u4e60 \u3002 # re \u6a21\u5757 import re print ( re . findall ( r '\\bf[a-z]*' , 'which foot or hand fell fastest' )) # ['foot', 'fell', 'fastest'] print ( re . sub ( r '(\\b[a-z]+) \\1' , r '\\1' , 'cat in the the hat' )) # cat in the hat print ( 'tea for too' . replace ( 'too' , 'two' )) # tea for two 1.8 \u4e92\u8054\u7f51\u8bbf\u95ee \u00b6 \u6709\u8bb8\u591a\u6a21\u5757\u53ef\u7528\u4e8e\u8bbf\u95ee\u4e92\u8054\u7f51\u548c\u5904\u7406\u4e92\u8054\u7f51\u534f\u8bae\u3002\u5176\u4e2d\u4e24\u4e2a\u6700\u7b80\u5355\u7684 urllib.request \u7528\u4e8e\u4eceURL\u68c0\u7d22\u6570\u636e\uff0c\u4ee5\u53ca smtplib \u7528\u4e8e\u53d1\u9001\u90ae\u4ef6\uff1b \u540e\u7eed\u4f1a\u6709\u8be6\u7ec6\u7ae0\u8282\u6765\u8bb0\u5f55\u5b66\u4e60 \u3002 >>> from urllib.request import urlopen >>> with urlopen ( 'http://tycho.usno.navy.mil/cgi-bin/timer.pl' ) as response : ... for line in response : ... line = line . decode ( 'utf-8' ) # Decoding the binary data to text. ... if 'EST' in line or 'EDT' in line : # look for Eastern Time ... print ( line ) < BR > Nov . 25 , 09 : 43 : 32 PM EST >>> import smtplib >>> server = smtplib . SMTP ( 'localhost' ) >>> server . sendmail ( 'soothsayer@example.org' , 'jcaesar@example.org' , ... \"\"\"To: jcaesar@example.org ... From: soothsayer@example.org ... ... Beware the Ides of March. ... \"\"\" ) >>> server . quit () \uff08\u8bf7\u6ce8\u610f\uff0c\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u9700\u8981\u5728 localhost \u4e0a\u8fd0\u884c\u7684\u90ae\u4ef6\u670d\u52a1\u5668\u3002\uff09 1.9 \u6570\u636e\u538b\u7f29 \u00b6 \u5e38\u89c1\u7684\u6570\u636e\u5b58\u6863\u548c\u538b\u7f29\u683c\u5f0f\u7531\u6a21\u5757\u76f4\u63a5\u652f\u6301\uff0c\u5305\u62ec\uff1a zlib , gzip , bz2 , lzma , zipfile \u548c tarfile \u3002 >>> import zlib >>> s = b 'witch which has which witches wrist watch' >>> len ( s ) 41 >>> t = zlib . compress ( s ) >>> len ( t ) 37 >>> zlib . decompress ( t ) b 'witch which has which witches wrist watch' >>> zlib . crc32 ( s ) 226805979 1.10 \u6027\u80fd\u6d4b\u91cf \u00b6 \u4e00\u4e9bPython\u7528\u6237\u5bf9\u4e86\u89e3\u540c\u4e00\u95ee\u9898\u7684\u4e0d\u540c\u65b9\u6cd5\u7684\u76f8\u5bf9\u6027\u80fd\u4ea7\u751f\u4e86\u6d53\u539a\u7684\u5174\u8da3\u3002 Python\u63d0\u4f9b\u4e86\u4e00\u79cd\u53ef\u4ee5\u7acb\u5373\u56de\u7b54\u8fd9\u4e9b\u95ee\u9898\u7684\u6d4b\u91cf\u5de5\u5177\u3002 \u4f8b\u5982\uff0c\u5143\u7ec4\u5c01\u5305\u548c\u62c6\u5305\u529f\u80fd\u76f8\u6bd4\u4f20\u7edf\u7684\u4ea4\u6362\u53c2\u6570\u53ef\u80fd\u66f4\u5177\u5438\u5f15\u529b\u3002 timeit \u6a21\u5757\u53ef\u4ee5\u5feb\u901f\u6f14\u793a\u5728\u8fd0\u884c\u6548\u7387\u65b9\u9762\u4e00\u5b9a\u7684\u4f18\u52bf: >>> from timeit import Timer >>> Timer ( 't=a; a=b; b=t' , 'a=1; b=2' ) . timeit () 0.57535828626024577 >>> Timer ( 'a,b = b,a' , 'a=1; b=2' ) . timeit () 0.54962537085770791 \u4e0e timeit \u7684\u7cbe\u7ec6\u7c92\u5ea6\u7ea7\u522b\u76f8\u53cd\uff0c profile \u548c pstats \u6a21\u5757\u63d0\u4f9b\u4e86\u7528\u4e8e\u5728\u8f83\u5927\u7684\u4ee3\u7801\u5757\u4e2d\u8bc6\u522b\u65f6\u95f4\u5173\u952e\u90e8\u5206\u7684\u5de5\u5177\u3002 1.11 \u6d4b\u8bd5\u6a21\u5757 \u00b6 \u5f00\u53d1\u9ad8\u8d28\u91cf\u8f6f\u4ef6\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u4e3a\u6bcf\u4e2a\u51fd\u6570\u7f16\u5199\u6d4b\u8bd5\uff0c\u5e76\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7ecf\u5e38\u8fd0\u884c\u8fd9\u4e9b\u6d4b\u8bd5\u3002 doctest \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5de5\u5177\uff0c\u7528\u4e8e\u626b\u63cf\u6a21\u5757\u5e76\u9a8c\u8bc1\u7a0b\u5e8f\u6587\u6863\u5b57\u7b26\u4e32\u4e2d\u5d4c\u5165\u7684\u6d4b\u8bd5\u3002\u6d4b\u8bd5\u6784\u9020\u5c31\u50cf\u5c06\u5178\u578b\u8c03\u7528\u53ca\u5176\u7ed3\u679c\u526a\u5207\u5e76\u7c98\u8d34\u5230\u6587\u6863\u5b57\u7b26\u4e32\u4e00\u6837\u7b80\u5355\u3002\u8fd9\u901a\u8fc7\u5411\u7528\u6237\u63d0\u4f9b\u793a\u4f8b\u6765\u6539\u8fdb\u6587\u6863\uff0c\u5e76\u4e14\u5b83\u5141\u8bb8 doctest \u6a21\u5757\u786e\u4fdd\u4ee3\u7801\u4fdd\u6301\u5bf9\u6587\u6863\u7684\u771f\u5b9e: def average ( values ): \"\"\"Computes the arithmetic mean of a list of numbers. >>> print(average([20, 30, 70])) 40.0 \"\"\" return sum ( values ) / len ( values ) import doctest doctest . testmod () # automatically validate the embedded tests unittest \u6a21\u5757\u4e0d\u50cf doctest \u6a21\u5757\u90a3\u6837\u6613\u4e8e\u4f7f\u7528\uff0c\u4f46\u5b83\u5141\u8bb8\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6\u4e2d\u7ef4\u62a4\u66f4\u5168\u9762\u7684\u6d4b\u8bd5\u96c6: import unittest class TestStatisticalFunctions ( unittest . TestCase ): def test_average ( self ): self . assertEqual ( average ([ 20 , 30 , 70 ]), 40.0 ) self . assertEqual ( round ( average ([ 1 , 5 , 7 ]), 1 ), 4.3 ) with self . assertRaises ( ZeroDivisionError ): average ([]) with self . assertRaises ( TypeError ): average ( 20 , 30 , 70 ) unittest . main () # Calling from the command line invokes all tests ...","title":"\u6807\u51c6\u5e93\u6982\u89c8"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%A7%88/#_1","text":"","title":"\u6807\u51c6\u5e93\u6982\u89c8"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%A7%88/#11-os","text":"os \u6a21\u5757\u63d0\u4f9b\u4e86\u8bb8\u591a\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u4ea4\u4e92\u7684\u51fd\u6570: # OS \u6a21\u5757 import os print ( os . name ) # \u83b7\u53d6\u64cd\u4f5c\u7cfb\u7edf windows-nt print ( os . sep ) # \u8def\u5f84\u5206\u9694\u7b26\uff1awindos-'\\'\uff0c\u5176\u4ed6-'/' print ( os . getcwd ()) # \u8fd4\u56de\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 os . chdir ( '\u8def\u5f84' ) # \u66f4\u6539\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 os . rmdir ( '\u8def\u5f84' ) # \u5220\u9664\u6587\u4ef6 os . rename ( 'old' , 'new' ) # \u66f4\u6539\u6587\u4ef6\u540d os . mkdir ( '123' ) # \u521b\u5efa\u6587\u4ef6\u5939123 print ( os . listdir ()) # \u5217\u51fa\u6307\u5b9a\u76ee\u5f55\u91cc\u7684\u6587\u4ef6\u548c\u6587\u4ef6\u5939\uff0c\u9ed8\u8ba4\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 # os.path print ( os . path . abspath ( 'o1.py' )) # \u7edd\u5bf9\u8def\u5f84\uff1b01.py\u4e3a\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6 print ( os . path . isdir ( 'test' )) # True\uff0c\u5224\u65ad\u662f\u5426\u662f\u6587\u4ef6\u5939\uff1btest\u4e3a\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6 print ( os . path . isfile ( 'test' )) # False\uff0c\u5224\u65ad\u662f\u5426\u662f\u6587\u4ef6 print ( os . path . exists ( 'test' )) # True\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728 print ( os . path . splitext ( '2020.2.21.demo.py' )) # \u5206\u5272 ... \u4e00\u5b9a\u8981\u4f7f\u7528 import os \u800c\u4e0d\u662f from os import * \u3002\u8fd9\u5c06\u907f\u514d\u5185\u5efa\u7684 open() \u51fd\u6570\u88ab os.open() \u9690\u5f0f\u66ff\u6362\u6389\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u4f7f\u7528\u65b9\u5f0f\u5927\u4e0d\u76f8\u540c\u3002 \u5185\u7f6e\u7684 dir() \u548c help() \u51fd\u6570\u53ef\u7528\u4f5c\u4ea4\u4e92\u5f0f\u8f85\u52a9\u5de5\u5177\uff0c\u7528\u4e8e\u5904\u7406\u5927\u578b\u6a21\u5757\uff0c\u5982 os : >>> import os >>> dir ( os ) < returns a list of all module functions > >>> help ( os ) < returns an extensive manual page created from the module 's docstrings>","title":"1.1 OS \u6a21\u5757"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%A7%88/#12-sys","text":"\u8be5\u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e9b\u53d8\u91cf\u548c\u51fd\u6570\uff1b\u8fd9\u4e9b\u53d8\u91cf\u53ef\u80fd\u88ab\u89e3\u91ca\u5668\u4f7f\u7528\uff0c\u4e5f\u53ef\u80fd\u7531\u89e3\u91ca\u5668\u63d0\u4f9b\uff1b\u8fd9\u4e9b\u51fd\u6570\u4f1a\u5f71\u54cd\u89e3\u91ca\u5668\u3002\u672c\u6a21\u5757\u603b\u662f\u53ef\u7528\u7684\u3002 # sys \u6a21\u5757 import sys print ( sys . argv ) # \u4e00\u4e2a\u5217\u8868\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u88ab\u4f20\u9012\u7ed9 Python \u811a\u672c\u7684\u547d\u4ee4\u884c\u53c2\u6570\u3002 print ( sys . path ) # \u5217\u8868\uff1a\u67e5\u627e\u6a21\u5757\u7684\u8def\u5f84\uff1b\u5199\u7684.py\u6587\u4ef6\u653e\u5728\u8fd9\u4e2a\u5217\u8868\u91cc\uff0cimport\u65f6\u5148\u5728\u5217\u8868\u91cc\u7684\u8def\u5f84\u91cc\u5bfb\u627e\uff0c\u6ca1\u6709\u5c31\u62a5\u9519 sys . stdin # \u63a5\u6536\u7528\u6237\u6536\u5165\uff0c\u4e0einput()\u76f8\u4f3c sys . stdout # \u8f93\u51fa\uff1b\u53ef\u4ee5\u6539\u53d8\u9ed8\u8ba4\u8f93\u51fa\u4f4d\u7f6e sys . stderr # \u4fee\u6539\uff0c\u53ef\u4ee5\u6539\u53d8\u9ed8\u8ba4'\u9519\u8bef'\u8f93\u51fa\u4f4d\u7f6e sys . exit () # \u9000\u51fa\u7a0b\u5e8f\uff0c\u4e0e\u5185\u7f6e\u51fd\u6570exit()\u529f\u80fd\u4e00\u6837\uff1b\u5185\u90e8\u53ef\u4f20\u5165\u9000\u51fa\u7801\uff08\u9ed8\u8ba4\u4e3a0\uff09\uff1b\u6b64\u4ee3\u7801\u540e\u7684\u4ee3\u7801\u4e0d\u6267\u884c argv[0] \u4e3a\u811a\u672c\u7684\u540d\u79f0\uff08\u662f\u5426\u662f\u5b8c\u6574\u7684\u8def\u5f84\u540d\u53d6\u51b3\u4e8e\u64cd\u4f5c\u7cfb\u7edf\uff09\u3002\u5982\u679c\u662f\u901a\u8fc7 Python \u89e3\u91ca\u5668\u7684\u547d\u4ee4\u884c\u53c2\u6570 -c \u6765\u6267\u884c\u7684\uff0c argv[0] \u4f1a\u88ab\u8bbe\u7f6e\u6210\u5b57\u7b26\u4e32 '-c' \u3002\u5982\u679c\u6ca1\u6709\u811a\u672c\u540d\u88ab\u4f20\u9012\u7ed9 Python \u89e3\u91ca\u5668\uff0c argv[0] \u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002","title":"1.2 sys \u6a21\u5757"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%A7%88/#13-math","text":"math \u6a21\u5757\u63d0\u4f9b\u5bf9\u6d6e\u70b9\u6570\u5b66\u7684\u5e95\u5c42C\u5e93\u51fd\u6570\u7684\u8bbf\u95ee: # math \u6a21\u5757 import math print ( math . ceil ( 5 / 2 )) # \u5411\u4e0a\u53d6\u6574 print ( 5 // 2 ) # \u5411\u4e0b\u53d6\u6574 print ( math . floor ( 5 // 2 )) # \u5411\u4e0b\u53d6\u6574 print ( math . fabs ( - 3 )) # \u7edd\u5bf9\u503c print ( math . factorial ( 4 )) # \u6c42\u9636\u4e58 print ( math . fmod ( 5 , 2 )) # \u4f59\u6570\uff0c\u4f7f\u7528\u6d6e\u70b9\u6570\u65f6\u9996\u9009 print ( 5 % 2 ) # \u4f59\u6570\uff0c\u4f7f\u7528\u6574\u6570\u65f6\u9996\u9009 print ( math . modf ( 3.14 )) # \u8fd4\u56de\u5c0f\u6570\u548c\u6574\u6570\u90e8\u5206 print ( math . pi ) # pai ...","title":"1.3 math \u6a21\u5757"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%A7%88/#14-random","text":"random \u6a21\u5757\u63d0\u4f9b\u4e86\u8fdb\u884c\u968f\u673a\u9009\u62e9\u7684\u5de5\u5177: # random \u6a21\u5757 import random print ( random . random ()) # \u751f\u6210[0,1)\u7684\u968f\u673a\u6d6e\u70b9\u6570 print ( random . randint ( 2 , 9 )) # \u751f\u6210[2,9]\u7684\u968f\u673a\u6574\u6570 print ( random . randrange ( 2 , 9 )) # \u751f\u6210[2,9)\u7684\u968f\u673a\u6574\u6570\uff0c\u9ed8\u8ba4\u6b65\u957f\u4e3a1 # random.choice() \u4ece\u4e00\u4e2a\u975e\u7a7a\u5e8f\u5217\u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u636e\uff0c\u5982\u679c\u5e8f\u5217\u4e3a\u7a7a\uff0c\u8fd4\u56de IndexError print ( random . choice ([ 'zhangsan' , 'lisi' , 'wangwu' ])) # random.choices() \u968f\u673a\u751f\u6210k\u5927\u5c0f\u7684\u6570\u636e\uff0c\u5982\u679c\u4e0d\u6307\u5b9aweights\u6216cum_weights\u53c2\u6570\uff0c\u5219\u4f7f\u7528\u540c\u7b49\u6982\u7387\uff1b\u6570\u636e\u53ef\u91cd\u590d\u51fa\u73b0 print ( random . choices ([ 'zhangsan' , 'lisi' , 'wangwu' ], k = 3 )) # random.sample() \u4ece\u5e8f\u5217\u6216\u96c6\u5408\u4e2d\u968f\u673a\u751f\u6210k\u5927\u5c0f\u7684\u6570\u636e\uff0c\u6570\u636e\u4e0d\u80fd\u91cd\u590d print ( random . sample ([ 'zhangsan' , 'lisi' , 'wangwu' ], k = 3 )) # random.shuffle() \u968f\u673a\u6253\u4e71\u4f4d\u7f6e a = list ( 'abcdefgh' ) print ( f '\u539f\u59cb\u6570\u636e\u662f\uff1a { a } ' ) # \u539f\u59cb\u6570\u636e\u662f\uff1a['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'] random . shuffle ( a ) print ( f '\u6253\u4e71\u987a\u5e8f\u540e\u7684\u6570\u636e\u662f\uff1a { a } ' ) # \u6253\u4e71\u987a\u5e8f\u540e\u7684\u6570\u636e\u662f\uff1a['h', 'e', 'g', 'd', 'b', 'a', 'c', 'f']\uff1b\u6bcf\u6b21\u8fd0\u884c\u7ed3\u679c\u4e0d\u540c","title":"1.4 random \u6a21\u5757"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%A7%88/#15-datetime","text":"datetime \u6a21\u5757\u63d0\u4f9b\u7528\u4e8e\u5904\u7406\u65e5\u671f\u548c\u65f6\u95f4\u7684\u7c7b\uff1b\u5305\u62ec\uff1a date\u7c7b \u3001 datetime(date)\u7c7b \u3001 IsoCalendarDate(tuple)\u7c7b \u3001 time\u7c7b \u3001 timedelta\u7c7b \u3001 tzinfo\u7c7b \u3001 timezone(tzinfo)\u7c7b \u3002 \u8fd9\u4e9b\u7c7b\u578b\u7684\u5bf9\u8c61\u90fd\u662f\u4e0d\u53ef\u53d8\u7684\u3002 \u5b50\u7c7b\u5173\u7cfb object timedelta tzinfo timezone time date datetime \u4ee5\u4e0b\u53ea\u662f\u7b80\u5355\u4ecb\u7ecd date\u7c7b \u7684\u7528\u6cd5\uff0c\u66f4\u591a\u7c7b\u7528\u6cd5\u4ecb\u7ecd\u8bf7\u67e5\u9605 \u5b98\u65b9\u6559\u7a0b \uff0c\u6216\u67e5\u770b\u76f8\u5e94\u5185\u7f6e\u51fd\u6570\u4ecb\u7ecd\u3002 # date \u7c7b import datetime as dt # \u5bfc\u5165\uff0c\u662f\u4e3a\u4e86\u4ecb\u7ecd\u7c7b\u7684\u8c03\u7528\u65b9\u6cd5 from datetime import date now = date . today () # \u6216\u8005 dt.date.today() \u7528\u5185\u7f6e\u7c7b\u7684\u8c03\u7528\u65b9\u6cd5 print ( f '\u5f53\u524d\u65e5\u671f\u662f\uff1a { now } ' ) # \u5f53\u524d\u65e5\u671f\u662f \uff1a2021-04-24 # \"Return ctime() style string.\" print ( now . ctime ()) # Sat Apr 24 00:00:00 2021 print ( now . day ) # \u8fd4\u56de\u65e5 24 print ( now . month ) # \u8fd4\u56de\u6708 4 print ( now . year ) # \u8fd4\u56de\u5e74 2021 # now.weekday() \"Return day of the week, where Monday == 0 ... Sunday == 6.\" print ( now . weekday ()) # 2021-04-24\u662f\u5468\u516d\uff0c\u8fd4\u56de\u503c\u4e3a5 print ( now . isoweekday ()) # \u8fd4\u56de\u5468\u516d print ( now . strftime ( ' %d /%m/%y' )) # \u683c\u5f0f\u5316\u65e5\u671f: 24/04/21 # replace() \"\"\"Return a new date with new values for the specified fields.\"\"\" print ( now . replace ( year = 1990 )) # month\u3001day\u4e0d\u6539\u53d8\uff0c\u5c31\u4f7f\u7528\u4e4b\u524d\u7684\u503c birthday = date ( 1999 , 8 , 23 ) print ( birthday ) # 1999-08-23 # \u7efc\u5408\u7528\u6cd5 print ( f '\u4eca\u5929\u662f { now } \uff0c\u5468 { now . isoweekday () } \uff0c\u8ddd\u79bb\u4f60\u7684\u51fa\u751f { birthday } \uff0c\u5df2\u8fc7\u4e86 { ( now - birthday ) . days } \u5929\u4e86\u3002' ) # \u4eca\u5929\u662f2021-04-24\uff0c\u54686\uff0c\u8ddd\u79bb\u4f60\u7684\u51fa\u751f1999-08-23\uff0c\u5df2\u8fc7\u4e867915\u5929\u4e86\u3002","title":"1.5 datetime \u6a21\u5757"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%A7%88/#16","text":"glob \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5728\u76ee\u5f55\u4e2d\u4f7f\u7528\u901a\u914d\u7b26\u641c\u7d22\u521b\u5efa\u6587\u4ef6\u5217\u8868\u7684\u51fd\u6570: # glob \u6a21\u5757 import glob print ( glob . glob ( '*.py' )) # \u5217\u51fa\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709\u7684.py\u6587\u4ef6","title":"1.6 \u6587\u4ef6\u901a\u914d\u7b26"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%A7%88/#17-re","text":"re \u6a21\u5757\u4e3a\u9ad8\u7ea7\u5b57\u7b26\u4e32\u5904\u7406\u63d0\u4f9b\u6b63\u5219\u8868\u8fbe\u5f0f\u5de5\u5177\u3002\u5bf9\u4e8e\u590d\u6742\u7684\u5339\u914d\u548c\u64cd\u4f5c\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u63d0\u4f9b\u7b80\u6d01\uff0c\u4f18\u5316\u7684\u89e3\u51b3\u65b9\u6848\uff1b \u540e\u7eed\u4f1a\u6709\u8be6\u7ec6\u7ae0\u8282\u6765\u8bb0\u5f55\u5b66\u4e60 \u3002 # re \u6a21\u5757 import re print ( re . findall ( r '\\bf[a-z]*' , 'which foot or hand fell fastest' )) # ['foot', 'fell', 'fastest'] print ( re . sub ( r '(\\b[a-z]+) \\1' , r '\\1' , 'cat in the the hat' )) # cat in the hat print ( 'tea for too' . replace ( 'too' , 'two' )) # tea for two","title":"1.7 re \u6a21\u5757"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%A7%88/#18","text":"\u6709\u8bb8\u591a\u6a21\u5757\u53ef\u7528\u4e8e\u8bbf\u95ee\u4e92\u8054\u7f51\u548c\u5904\u7406\u4e92\u8054\u7f51\u534f\u8bae\u3002\u5176\u4e2d\u4e24\u4e2a\u6700\u7b80\u5355\u7684 urllib.request \u7528\u4e8e\u4eceURL\u68c0\u7d22\u6570\u636e\uff0c\u4ee5\u53ca smtplib \u7528\u4e8e\u53d1\u9001\u90ae\u4ef6\uff1b \u540e\u7eed\u4f1a\u6709\u8be6\u7ec6\u7ae0\u8282\u6765\u8bb0\u5f55\u5b66\u4e60 \u3002 >>> from urllib.request import urlopen >>> with urlopen ( 'http://tycho.usno.navy.mil/cgi-bin/timer.pl' ) as response : ... for line in response : ... line = line . decode ( 'utf-8' ) # Decoding the binary data to text. ... if 'EST' in line or 'EDT' in line : # look for Eastern Time ... print ( line ) < BR > Nov . 25 , 09 : 43 : 32 PM EST >>> import smtplib >>> server = smtplib . SMTP ( 'localhost' ) >>> server . sendmail ( 'soothsayer@example.org' , 'jcaesar@example.org' , ... \"\"\"To: jcaesar@example.org ... From: soothsayer@example.org ... ... Beware the Ides of March. ... \"\"\" ) >>> server . quit () \uff08\u8bf7\u6ce8\u610f\uff0c\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u9700\u8981\u5728 localhost \u4e0a\u8fd0\u884c\u7684\u90ae\u4ef6\u670d\u52a1\u5668\u3002\uff09","title":"1.8 \u4e92\u8054\u7f51\u8bbf\u95ee"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%A7%88/#19","text":"\u5e38\u89c1\u7684\u6570\u636e\u5b58\u6863\u548c\u538b\u7f29\u683c\u5f0f\u7531\u6a21\u5757\u76f4\u63a5\u652f\u6301\uff0c\u5305\u62ec\uff1a zlib , gzip , bz2 , lzma , zipfile \u548c tarfile \u3002 >>> import zlib >>> s = b 'witch which has which witches wrist watch' >>> len ( s ) 41 >>> t = zlib . compress ( s ) >>> len ( t ) 37 >>> zlib . decompress ( t ) b 'witch which has which witches wrist watch' >>> zlib . crc32 ( s ) 226805979","title":"1.9 \u6570\u636e\u538b\u7f29"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%A7%88/#110","text":"\u4e00\u4e9bPython\u7528\u6237\u5bf9\u4e86\u89e3\u540c\u4e00\u95ee\u9898\u7684\u4e0d\u540c\u65b9\u6cd5\u7684\u76f8\u5bf9\u6027\u80fd\u4ea7\u751f\u4e86\u6d53\u539a\u7684\u5174\u8da3\u3002 Python\u63d0\u4f9b\u4e86\u4e00\u79cd\u53ef\u4ee5\u7acb\u5373\u56de\u7b54\u8fd9\u4e9b\u95ee\u9898\u7684\u6d4b\u91cf\u5de5\u5177\u3002 \u4f8b\u5982\uff0c\u5143\u7ec4\u5c01\u5305\u548c\u62c6\u5305\u529f\u80fd\u76f8\u6bd4\u4f20\u7edf\u7684\u4ea4\u6362\u53c2\u6570\u53ef\u80fd\u66f4\u5177\u5438\u5f15\u529b\u3002 timeit \u6a21\u5757\u53ef\u4ee5\u5feb\u901f\u6f14\u793a\u5728\u8fd0\u884c\u6548\u7387\u65b9\u9762\u4e00\u5b9a\u7684\u4f18\u52bf: >>> from timeit import Timer >>> Timer ( 't=a; a=b; b=t' , 'a=1; b=2' ) . timeit () 0.57535828626024577 >>> Timer ( 'a,b = b,a' , 'a=1; b=2' ) . timeit () 0.54962537085770791 \u4e0e timeit \u7684\u7cbe\u7ec6\u7c92\u5ea6\u7ea7\u522b\u76f8\u53cd\uff0c profile \u548c pstats \u6a21\u5757\u63d0\u4f9b\u4e86\u7528\u4e8e\u5728\u8f83\u5927\u7684\u4ee3\u7801\u5757\u4e2d\u8bc6\u522b\u65f6\u95f4\u5173\u952e\u90e8\u5206\u7684\u5de5\u5177\u3002","title":"1.10 \u6027\u80fd\u6d4b\u91cf"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%A7%88/#111","text":"\u5f00\u53d1\u9ad8\u8d28\u91cf\u8f6f\u4ef6\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u4e3a\u6bcf\u4e2a\u51fd\u6570\u7f16\u5199\u6d4b\u8bd5\uff0c\u5e76\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7ecf\u5e38\u8fd0\u884c\u8fd9\u4e9b\u6d4b\u8bd5\u3002 doctest \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5de5\u5177\uff0c\u7528\u4e8e\u626b\u63cf\u6a21\u5757\u5e76\u9a8c\u8bc1\u7a0b\u5e8f\u6587\u6863\u5b57\u7b26\u4e32\u4e2d\u5d4c\u5165\u7684\u6d4b\u8bd5\u3002\u6d4b\u8bd5\u6784\u9020\u5c31\u50cf\u5c06\u5178\u578b\u8c03\u7528\u53ca\u5176\u7ed3\u679c\u526a\u5207\u5e76\u7c98\u8d34\u5230\u6587\u6863\u5b57\u7b26\u4e32\u4e00\u6837\u7b80\u5355\u3002\u8fd9\u901a\u8fc7\u5411\u7528\u6237\u63d0\u4f9b\u793a\u4f8b\u6765\u6539\u8fdb\u6587\u6863\uff0c\u5e76\u4e14\u5b83\u5141\u8bb8 doctest \u6a21\u5757\u786e\u4fdd\u4ee3\u7801\u4fdd\u6301\u5bf9\u6587\u6863\u7684\u771f\u5b9e: def average ( values ): \"\"\"Computes the arithmetic mean of a list of numbers. >>> print(average([20, 30, 70])) 40.0 \"\"\" return sum ( values ) / len ( values ) import doctest doctest . testmod () # automatically validate the embedded tests unittest \u6a21\u5757\u4e0d\u50cf doctest \u6a21\u5757\u90a3\u6837\u6613\u4e8e\u4f7f\u7528\uff0c\u4f46\u5b83\u5141\u8bb8\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6\u4e2d\u7ef4\u62a4\u66f4\u5168\u9762\u7684\u6d4b\u8bd5\u96c6: import unittest class TestStatisticalFunctions ( unittest . TestCase ): def test_average ( self ): self . assertEqual ( average ([ 20 , 30 , 70 ]), 40.0 ) self . assertEqual ( round ( average ([ 1 , 5 , 7 ]), 1 ), 4.3 ) with self . assertRaises ( ZeroDivisionError ): average ([]) with self . assertRaises ( TypeError ): average ( 20 , 30 , 70 ) unittest . main () # Calling from the command line invokes all tests ...","title":"1.11 \u6d4b\u8bd5\u6a21\u5757"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A8%A1%E5%9D%97/","text":"\u6a21\u5757 \u00b6 \u5982\u679c\u4ece Python \u89e3\u91ca\u5668\u9000\u51fa\u518d\u8fdb\u5165\uff0c\u90a3\u4e48\u4e4b\u524d\u5b9a\u4e49\u7684\u6240\u6709\u7684\u65b9\u6cd5\u548c\u53d8\u91cf\u5c31\u90fd\u6d88\u5931\u4e86\u3002\u4e3a\u6b64 Python \u63d0\u4f9b\u4e86\u4e00\u4e2a\u529e\u6cd5\uff0c\u628a\u8fd9\u4e9b\u5b9a\u4e49\u5b58\u653e\u5728\u6587\u4ef6\u4e2d\uff0c\u4e3a\u4e00\u4e9b\u811a\u672c\u6216\u8005\u4ea4\u4e92\u5f0f\u7684\u89e3\u91ca\u5668\u5b9e\u4f8b\u4f7f\u7528\uff0c\u8fd9\u4e2a\u6587\u4ef6\u88ab\u79f0\u4e3a\u6a21\u5757\u3002 \u6a21\u5757\u662f\u5305\u542b Python \u5b9a\u4e49\u548c\u8bed\u53e5\u7684\u6587\u4ef6\uff1b\u5176\u6587\u4ef6\u540d\u662f\u6a21\u5757\u540d\u52a0\u540e\u7f00\u540d .py \uff0c\u6a21\u5757\u540d\u547d\u540d\u89c4\u5219\u4e0e\u53d8\u91cf\u547d\u540d\u4e00\u81f4\u3002\u5728\u6a21\u5757\u5185\u90e8\uff0c\u901a\u8fc7\u5168\u5c40\u53d8\u91cf __name__ \u53ef\u4ee5\u83b7\u53d6\u6a21\u5757\u540d\uff08\u5373\u5b57\u7b26\u4e32\uff09\u3002 \u4f8b\u5982\uff0c\u7528\u6587\u672c\u7f16\u8f91\u5668\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efa fibo.py \u6587\u4ef6\uff0c\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a # \u6587\u4ef6\u540d\uff1afibo.py # Fibonacci numbers module def fib ( n ): # write Fibonacci series up to n a , b = 0 , 1 while a < n : print ( a , end = ' ' ) a , b = b , a + b print () def fib2 ( n ): # return Fibonacci series up to n result = [] a , b = 0 , 1 while a < n : result . append ( a ) a , b = b , a + b return result \u73b0\u5728\uff0c\u8fdb\u5165 Python \u89e3\u91ca\u5668\uff0c\u7528\u4ee5\u4e0b\u547d\u4ee4\u5bfc\u5165\u8be5\u6a21\u5757\uff1a import fibo \u8fd9\u9879\u64cd\u4f5c\u4e0d\u76f4\u63a5\u628a fibo \u51fd\u6570\u5b9a\u4e49\u7684\u540d\u79f0\u5bfc\u5165\u5230\u5f53\u524d\u7b26\u53f7\u8868\uff0c\u53ea\u5bfc\u5165\u6a21\u5757\u540d fibo \u3002\u8981\u4f7f\u7528\u6a21\u5757\u540d\u8bbf\u95ee\u51fd\u6570\uff1a >>> fibo . fib ( 1000 ) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 >>> fibo . fib2 ( 100 ) [ 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 , 89 ] >>> fibo . __name__ 'fibo' \u5982\u679c\u7ecf\u5e38\u4f7f\u7528\u67d0\u4e2a\u51fd\u6570\uff0c\u53ef\u4ee5\u628a\u5b83\u8d4b\u503c\u7ed9\u5c40\u90e8\u53d8\u91cf\uff1a >>> fib = fibo . fib >>> fib ( 500 ) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 1.1 \u6a21\u5757\u8be6\u89e3 \u00b6 \u6a21\u5757\u5305\u542b\u53ef\u6267\u884c\u8bed\u53e5\u53ca\u51fd\u6570\u5b9a\u4e49\u3002\u8fd9\u4e9b\u8bed\u53e5\u7528\u4e8e\u521d\u59cb\u5316\u6a21\u5757\uff0c\u4e14\u4ec5\u5728 import \u8bed\u53e5 \u7b2c\u4e00\u6b21 \u9047\u5230\u6a21\u5757\u540d\u65f6\u6267\u884c (\u6587\u4ef6\u4f5c\u4e3a\u811a\u672c\u8fd0\u884c\u65f6\uff0c\u4e5f\u4f1a\u6267\u884c\u8fd9\u4e9b\u8bed\u53e5\u3002) \u6a21\u5757\u6709\u81ea\u5df1\u7684\u79c1\u6709\u7b26\u53f7\u8868\uff0c\u7528\u4f5c\u6a21\u5757\u4e2d\u6240\u6709\u51fd\u6570\u7684\u5168\u5c40\u7b26\u53f7\u8868\u3002\u56e0\u6b64\uff0c\u5728\u6a21\u5757\u5185\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u65f6\uff0c\u4e0d\u7528\u62c5\u5fc3\u4e0e\u7528\u6237\u5b9a\u4e49\u7684\u5168\u5c40\u53d8\u91cf\u53d1\u751f\u51b2\u7a81\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u53ef\u4ee5\u7528\u4e0e\u8bbf\u95ee\u6a21\u5757\u51fd\u6570\u4e00\u6837\u7684\u6807\u8bb0\u6cd5\uff0c\u8bbf\u95ee\u6a21\u5757\u7684\u5168\u5c40\u53d8\u91cf\uff0c modname.itemname \u3002 \u53ef\u4ee5\u628a\u5176\u4ed6\u6a21\u5757\u5bfc\u5165\u6a21\u5757\u3002\u6309\u60ef\u4f8b\uff0c\u6240\u6709 import \u8bed\u53e5\u90fd\u653e\u5728\u6a21\u5757\uff08\u6216\u811a\u672c\uff09\u5f00\u5934\uff0c\u4f46\u8fd9\u4e0d\u662f\u5fc5\u987b\u7684\u3002\u5bfc\u5165\u7684\u6a21\u5757\u540d\u5b58\u5728\u5bfc\u5165\u6a21\u5757\u7684\u5168\u5c40\u7b26\u53f7\u8868\u91cc\u3002 import \u8bed\u53e5\u6709\u4e00\u4e2a\u53d8\u4f53\uff0c\u53ef\u4ee5\u76f4\u63a5\u628a\u6a21\u5757\u91cc\u7684\u540d\u79f0\u5bfc\u5165\u5230\u53e6\u4e00\u4e2a\u6a21\u5757\u3002\u4f8b\u5982\uff1a >>> from fibo import fib , fib2 >>> fib ( 500 ) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 \u8fd9\u6bb5\u4ee3\u7801\u4e0d\u4f1a\u628a\u6a21\u5757\u540d\u5bfc\u5165\u5230\u5c40\u90e8\u7b26\u53f7\u8868\u91cc\uff08\u56e0\u6b64\uff0c\u672c\u4f8b\u6ca1\u6709\u5b9a\u4e49 fibo \uff09\u3002 \u8fd8\u6709\u4e00\u79cd\u53d8\u4f53\u53ef\u4ee5\u5bfc\u5165\u6a21\u5757\u5185\u5b9a\u4e49\u7684\u6240\u6709\u540d\u79f0\uff1a >>> from fibo import * >>> fib ( 500 ) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 \u8fd9\u79cd\u65b9\u5f0f\u4f1a\u5bfc\u5165\u6240\u6709\u4e0d\u4ee5\u4e0b\u5212\u7ebf\uff08 _ \uff09\u5f00\u5934\u7684\u540d\u79f0 \u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4e0d\u8981\u7528\u8fd9\u4e2a\u529f\u80fd\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5411\u89e3\u91ca\u5668\u5bfc\u5165\u4e86\u4e00\u6279\u672a\u77e5\u7684\u540d\u79f0\uff0c\u53ef\u80fd\u4f1a\u8986\u76d6\u5df2\u7ecf\u5b9a\u4e49\u7684\u540d\u79f0\u3002 \u6ce8\u610f\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e0d\u5efa\u8bae\u4ece\u6a21\u5757\u6216\u5305\u5185\u5bfc\u5165 * \uff0c \u56e0\u4e3a\uff0c\u8fd9\u9879\u64cd\u4f5c\u7ecf\u5e38\u8ba9\u4ee3\u7801\u53d8\u5f97\u96be\u4ee5\u7406\u89e3\u3002\u4e0d\u8fc7\uff0c\u4e3a\u4e86\u5728\u4ea4\u4e92\u5f0f\u7f16\u8bd1\u5668\u4e2d\u5c11\u6253\u51e0\u4e2a\u5b57\uff0c\u8fd9\u4e48\u7528\u4e5f\u6ca1\u95ee\u9898\u3002 \u6a21\u5757\u540d\u540e\u4f7f\u7528 as \u65f6\uff0c\u76f4\u63a5\u628a as \u540e\u7684\u540d\u79f0\u4e0e\u5bfc\u5165\u6a21\u5757\u7ed1\u5b9a\u3002 >>> import fibo as fib >>> fib . fib ( 500 ) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 \u4e0e import fibo \u4e00\u6837\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4e5f\u53ef\u4ee5\u6709\u6548\u5730\u5bfc\u5165\u6a21\u5757\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u5bfc\u5165\u7684\u540d\u79f0\u662f fib \u3002 from \u4e2d\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6548\u679c\u7c7b\u4f3c\uff1a >>> from fibo import fib as fibonacci >>> fibonacci ( 500 ) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 \u6ce8\u89e3: \u4e3a\u4e86\u4fdd\u8bc1\u8fd0\u884c\u6548\u7387\uff0c\u6bcf\u6b21\u89e3\u91ca\u5668\u4f1a\u8bdd\u53ea\u5bfc\u5165\u4e00\u6b21\u6a21\u5757\u3002\u5982\u679c\u66f4\u6539\u4e86\u6a21\u5757\u5185\u5bb9\uff0c\u5fc5\u987b\u91cd\u542f\u89e3\u91ca\u5668\uff1b\u4ec5\u4ea4\u4e92\u6d4b\u8bd5\u4e00\u4e2a\u6a21\u5757\u65f6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 importlib.reload() \uff0c\u4f8b\u5982 import importlib; importlib.reload(modulename) \u3002 1.2 __name__ \u5c5e\u6027 \u00b6 \u4e00\u4e2a\u6a21\u5757\u88ab\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u7b2c\u4e00\u6b21\u5f15\u5165\u65f6\uff0c\u5176\u4e3b\u7a0b\u5e8f\u5c06\u8fd0\u884c\u3002\u5982\u679c\u6211\u4eec\u60f3\u5728\u6a21\u5757\u88ab\u5f15\u5165\u65f6\uff0c\u6a21\u5757\u4e2d\u7684\u67d0\u4e00\u7a0b\u5e8f\u5757\u4e0d\u6267\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u7528__name__\u5c5e\u6027\u6765\u4f7f\u8be5\u7a0b\u5e8f\u5757\u4ec5\u5728\u8be5\u6a21\u5757\u81ea\u8eab\u8fd0\u884c\u65f6\u6267\u884c\u3002 \u8bf4\u660e\uff1a \u6bcf\u4e2a\u6a21\u5757\u90fd\u6709\u4e00\u4e2a__name__\u5c5e\u6027\uff0c\u5f53\u5176\u503c\u662f' main '\u65f6\uff0c\u8868\u660e\u8be5\u6a21\u5757\u81ea\u8eab\u5728\u8fd0\u884c\uff0c\u5426\u5219\u662f\u88ab\u5f15\u5165\uff1b __name__ \u4e0e __main__ \u5e95\u4e0b\u662f\u53cc\u4e0b\u5212\u7ebf\u3002 # Filename:using_name.py if __name__ == '__main__' : print ( '\u7a0b\u5e8f\u81ea\u8eab\u5728\u8fd0\u884c' ) else : print ( '\u6211\u6765\u81ea\u53e6\u4e00\u6a21\u5757' ) \u4ee5\u811a\u672c\u65b9\u5f0f\u6267\u884c\u6a21\u5757\u7ed3\u679c\uff1a # \u6a21\u5757\u662f\u7528IDLE\u7f16\u5199\uff0c\u8981\u6267\u884c\u6a21\u5757\uff0c\u53ea\u9700\u5c06\u7f16\u5199\u597d\u7684\u4ee3\u7801\uff0c\u4fdd\u5b58-F5 = RESTART : C : \\ Users \\ Administrator \\ AppData \\ Local \\ Programs \\ Python \\ Python39 \\ using_name . py \u7a0b\u5e8f\u81ea\u8eab\u5728\u8fd0\u884c \u65e2\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6587\u4ef6\u5f53\u811a\u672c\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u7528\u4f5c\u5bfc\u5165\u7684\u6a21\u5757\uff1b\u5bfc\u5165\u6a21\u5757\u65f6\uff1a import using_name # \u6211\u6765\u81ea\u53e6\u4e00\u4e2a\u6a21\u5757 1.3 dir() \u51fd\u6570 \u00b6 \u5185\u7f6e\u51fd\u6570 dir() \u7528\u4e8e\u67e5\u627e\u6a21\u5757\u5b9a\u4e49\u7684\u540d\u79f0\u3002\u8fd4\u56de\u7ed3\u679c\u662f\u7ecf\u8fc7\u6392\u5e8f\u7684\u5b57\u7b26\u4e32\u5217\u8868\uff1a import fibo print ( dir ( fibo )) # \u8f93\u51fa\u7ed3\u679c\uff1a ''' ['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'fib', 'fib2'] ''' \u5982\u679c\u6ca1\u6709\u7ed9\u5b9a\u53c2\u6570\uff0c\u90a3\u4e48 dir() \u51fd\u6570\u4f1a\u7f57\u5217\u51fa\u5f53\u524d\u5b9a\u4e49\u7684\u6240\u6709\u540d\u79f0: a = ( 1 , 2 , 3 , 4 ) import fibo print ( dir ()) # \u8f93\u51fa\u7ed3\u679c\uff1a ''' ['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'a', 'fibo']''' b = [ 1 , 2 , 3 , 4 ] print ( dir ()) # \u8f93\u51fa\u7ed3\u679c\uff1a ''' ['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'a', 'b', 'fibo']''' 1.4 \u6807\u51c6\u6a21\u5757 \u00b6 Python \u9644\u5e26\u4e86\u6807\u51c6\u6a21\u5757\u5e93\uff0c\u8be6\u89c1 Python \u6807\u51c6\u5e93\u53c2\u8003\u624b\u518c\u3002\u7279\u522b\u8981\u6ce8\u610f\u5185\u5d4c\u5230 Python \u89e3\u91ca\u5668\u4e2d\u7684\u6a21\u5757 sys \u3002\u53d8\u91cf sys.ps1 \u548c sys.ps2 \u5219\u7528\u6765\u5b9a\u4e49\u4e3b\u6b21\u63d0\u793a\u7684\u5b57\u7b26\u4e32\uff1a >>> import sys >>> sys . ps1 '>>> ' >>> sys . ps2 '... ' >>> sys . ps1 = 'C> ' C > print ( 'Yuck!' ) Yuck ! C > \u53ea\u6709\u89e3\u91ca\u5668\u7528\u4e8e\u4ea4\u4e92\u6a21\u5f0f\u65f6\uff0c\u624d\u5b9a\u4e49\u8fd9\u4e24\u4e2a\u53d8\u91cf\u3002 \u53d8\u91cf sys.path \u662f\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u7528\u4e8e\u786e\u5b9a\u89e3\u91ca\u5668\u7684\u6a21\u5757\u641c\u7d22\u8def\u5f84\uff1b\u5bfc\u5165 spam \u6a21\u5757\u65f6\uff0c\u89e3\u91ca\u5668\u9996\u5148\u67e5\u627e\u540d\u4e3a spam \u7684\u5185\u7f6e\u6a21\u5757\uff0c\u5982\u679c\u6ca1\u627e\u5230\uff0c\u89e3\u91ca\u5668\u518d\u4ece sys.path \u53d8\u91cf\u4e2d\u7684\u76ee\u5f55\u5217\u8868\u91cc\u67e5\u627e spam.py \u6587\u4ef6\u3002\u8be5\u53d8\u91cf\u4ee5\u73af\u5883\u53d8\u91cf PYTHONPATH \u63d0\u53d6\u7684\u9ed8\u8ba4\u8def\u5f84\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5982\u672a\u8bbe\u7f6e PYTHONPATH \uff0c\u5219\u4f7f\u7528\u5185\u7f6e\u7684\u9ed8\u8ba4\u8def\u5f84\u3002\u53ef\u4ee5\u7528\u6807\u51c6\u5217\u8868\u64cd\u4f5c\u4fee\u6539\u8be5\u53d8\u91cf\uff1a >>> import sys >>> sys . path . append ( '/ufs/guido/lib/python' ) 1.5 \u5305 \u00b6 \u5305\u662f\u4e00\u79cd\u7ba1\u7406 Python \u6a21\u5757\u547d\u540d\u7a7a\u95f4\u7684\u5f62\u5f0f\uff0c\u91c7\u7528\"\u70b9\u6a21\u5757\u540d\u79f0\"\u3002 \u6bd4\u5982\u4e00\u4e2a\u6a21\u5757\u7684\u540d\u79f0\u662f A.B\uff0c \u90a3\u4e48\u4ed6\u8868\u793a\u4e00\u4e2a\u5305 A\u4e2d\u7684\u5b50\u6a21\u5757 B \u3002 \u5c31\u597d\u50cf\u4f7f\u7528\u6a21\u5757\u7684\u65f6\u5019\uff0c\u4f60\u4e0d\u7528\u62c5\u5fc3\u4e0d\u540c\u6a21\u5757\u4e4b\u95f4\u7684\u5168\u5c40\u53d8\u91cf\u76f8\u4e92\u5f71\u54cd\u4e00\u6837\uff0c\u91c7\u7528\u70b9\u6a21\u5757\u540d\u79f0\u8fd9\u79cd\u5f62\u5f0f\u4e5f\u4e0d\u7528\u62c5\u5fc3\u4e0d\u540c\u5e93\u4e4b\u95f4\u7684\u6a21\u5757\u91cd\u540d\u7684\u60c5\u51b5\u3002 \u8fd9\u6837\u4e0d\u540c\u7684\u4f5c\u8005\u90fd\u53ef\u4ee5\u63d0\u4f9b NumPy \u6a21\u5757\uff0c\u6216\u8005\u662f Python \u56fe\u5f62\u5e93\u3002 \u4e0d\u59a8\u5047\u8bbe\u4f60\u60f3\u8bbe\u8ba1\u4e00\u5957\u7edf\u4e00\u5904\u7406\u58f0\u97f3\u6587\u4ef6\u548c\u6570\u636e\u7684\u6a21\u5757\uff08\u6216\u8005\u79f0\u4e4b\u4e3a\u4e00\u4e2a\"\u5305\"\uff09\u3002 \u73b0\u5b58\u5f88\u591a\u79cd\u4e0d\u540c\u7684\u97f3\u9891\u6587\u4ef6\u683c\u5f0f\uff08\u57fa\u672c\u4e0a\u90fd\u662f\u901a\u8fc7\u540e\u7f00\u540d\u533a\u5206\u7684\uff0c\u4f8b\u5982\uff1a .wav\uff0c:file:.aiff\uff0c:file:.au\uff0c\uff09\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u6709\u4e00\u7ec4\u4e0d\u65ad\u589e\u52a0\u7684\u6a21\u5757\uff0c\u7528\u6765\u5728\u4e0d\u540c\u7684\u683c\u5f0f\u4e4b\u95f4\u8f6c\u6362\u3002 \u5e76\u4e14\u9488\u5bf9\u8fd9\u4e9b\u97f3\u9891\u6570\u636e\uff0c\u8fd8\u6709\u5f88\u591a\u4e0d\u540c\u7684\u64cd\u4f5c\uff08\u6bd4\u5982\u6df7\u97f3\uff0c\u6dfb\u52a0\u56de\u58f0\uff0c\u589e\u52a0\u5747\u8861\u5668\u529f\u80fd\uff0c\u521b\u5efa\u4eba\u9020\u7acb\u4f53\u58f0\u6548\u679c\uff09\uff0c\u6240\u4ee5\u4f60\u8fd8\u9700\u8981\u4e00\u7ec4\u600e\u4e48\u4e5f\u5199\u4e0d\u5b8c\u7684\u6a21\u5757\u6765\u5904\u7406\u8fd9\u4e9b\u64cd\u4f5c\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e86\u4e00\u79cd\u53ef\u80fd\u7684\u5305\u7ed3\u6784\uff08\u5728\u5206\u5c42\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff09: ound / Top - level package __init__ . py Initialize the sound package formats / Subpackage for file format conversions __init__ . py wavread . py wavwrite . py aiffread . py aiffwrite . py auread . py auwrite . py ... effects / Subpackage for sound effects __init__ . py echo . py surround . py reverse . py ... filters / Subpackage for filters __init__ . py equalizer . py vocoder . py karaoke . py ... \u5bfc\u5165\u5305\u65f6\uff0cPython \u641c\u7d22 sys.path \u91cc\u7684\u76ee\u5f55\uff0c\u67e5\u627e\u5305\u7684\u5b50\u76ee\u5f55\u3002 Python \u53ea\u628a\u542b __init__.py \u6587\u4ef6\u7684\u76ee\u5f55\u5f53\u6210\u5305\u3002\u8fd9\u6837\u53ef\u4ee5\u9632\u6b62\u4ee5 string \u7b49\u901a\u7528\u540d\u79f0\u547d\u540d\u7684\u76ee\u5f55\uff0c\u65e0\u610f\u4e2d\u5c4f\u853d\u51fa\u73b0\u5728\u540e\u65b9\u6a21\u5757\u641c\u7d22\u8def\u5f84\u4e2d\u7684\u6709\u6548\u6a21\u5757\u3002 \u6700\u7b80\u60c5\u51b5\u4e0b\uff0c __init__.py \u53ea\u662f\u4e00\u4e2a\u7a7a\u6587\u4ef6\uff0c\u4f46\u8be5\u6587\u4ef6\u4e5f\u53ef\u4ee5\u6267\u884c\u5305\u7684\u521d\u59cb\u5316\u4ee3\u7801\uff0c\u6216\u8bbe\u7f6e __all__ \u53d8\u91cf\uff0c\u8be6\u89c1\u4e0b\u6587\u3002 \u8fd8\u53ef\u4ee5\u4ece\u5305\u4e2d\u5bfc\u5165\u5355\u4e2a\u6a21\u5757\uff0c\u4f8b\u5982\uff1a import sound.effects.echo \u8fd9\u6bb5\u4ee3\u7801\u52a0\u8f7d\u5b50\u6a21\u5757 sound.effects.echo \uff0c\u4f46\u5f15\u7528\u65f6\u5fc5\u987b\u4f7f\u7528\u5b50\u6a21\u5757\u7684\u5168\u540d\uff1a sound . effects . echo . echofilter ( input , output , delay = 0.7 , atten = 4 ) \u53e6\u4e00\u79cd\u5bfc\u5165\u5b50\u6a21\u5757\u7684\u65b9\u6cd5\u662f \uff1a from sound.effects import echo \u8fd9\u6bb5\u4ee3\u7801\u8fd8\u53ef\u4ee5\u52a0\u8f7d\u5b50\u6a21\u5757 echo \uff0c\u5e76\u4e14\u4e0d\u52a0\u5305\u524d\u7f00\u4e5f\u53ef\u4ee5\u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u4f7f\u7528\uff1a echo . echofilter ( input , output , delay = 0.7 , atten = 4 ) \u53e6\u4e00\u79cd\u53d8\u4f53\u662f\u76f4\u63a5\u5bfc\u5165\u6240\u9700\u7684\u51fd\u6570\u6216\u53d8\u91cf\uff1a from sound.effects.echo import echofilter \u540c\u6837\uff0c\u8fd9\u6837\u4e5f\u4f1a\u52a0\u8f7d\u5b50\u6a21\u5757 echo \uff0c\u4f46\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u51fd\u6570 echofilter() \uff1a echofilter ( input , output , delay = 0.7 , atten = 4 ) \u6ce8\u610f\uff0c\u4f7f\u7528 from package import item \u65f6\uff0citem \u53ef\u4ee5\u662f\u5305\u7684\u5b50\u6a21\u5757\uff08\u6216\u5b50\u5305\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f\u5305\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u3001\u7c7b\u6216\u53d8\u91cf\u7b49\u5176\u4ed6\u540d\u79f0\u3002 import \u8bed\u53e5\u9996\u5148\u6d4b\u8bd5\u5305\u4e2d\u662f\u5426\u5b9a\u4e49\u4e86 item\uff1b\u5982\u679c\u672a\u5728\u5305\u4e2d\u5b9a\u4e49\uff0c\u5219\u5047\u5b9a item \u662f\u6a21\u5757\uff0c\u5e76\u5c1d\u8bd5\u52a0\u8f7d\u3002\u5982\u679c\u627e\u4e0d\u5230 item\uff0c\u5219\u89e6\u53d1 ImportError \u5f02\u5e38\u3002 \u76f8\u53cd\uff0c\u4f7f\u7528 import item.subitem.subsubitem \u53e5\u6cd5\u65f6\uff0c\u9664\u6700\u540e\u4e00\u9879\u5916\uff0c\u6bcf\u4e2a item \u90fd\u5fc5\u987b\u662f\u5305\uff1b\u6700\u540e\u4e00\u9879\u53ef\u4ee5\u662f\u6a21\u5757\u6216\u5305\uff0c\u4f46\u4e0d\u80fd\u662f\u4e0a\u4e00\u9879\u4e2d\u5b9a\u4e49\u7684\u7c7b\u3001\u51fd\u6570\u6216\u53d8\u91cf\u3002 1.5.1 \u4ece\u5305\u4e2d\u5bfc\u5165* \u00b6 \u4f7f\u7528 from sound.effects import * \u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u8be5\u8bed\u53e5\u5728\u6587\u4ef6\u7cfb\u7edf\u67e5\u627e\u5e76\u5bfc\u5165\u5305\u7684\u6240\u6709\u5b50\u6a21\u5757\u3002\u8fd9\u9879\u64cd\u4f5c\u82b1\u8d39\u7684\u65f6\u95f4\u8f83\u957f\uff0c\u5e76\u4e14\u5bfc\u5165\u5b50\u6a21\u5757\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e0d\u5fc5\u8981\u7684\u526f\u4f5c\u7528\uff0c\u8fd9\u79cd\u526f\u4f5c\u7528\u53ea\u6709\u5728\u663e\u5f0f\u5bfc\u5165\u5b50\u6a21\u5757\u65f6\u624d\u4f1a\u53d1\u751f\u3002 \u552f\u4e00\u7684\u89e3\u51b3\u65b9\u6848\u662f\u63d0\u4f9b\u5305\u7684\u663e\u5f0f\u7d22\u5f15\u3002 import \u8bed\u53e5\u4f7f\u7528\u5982\u4e0b\u60ef\u4f8b\uff1a\u5982\u679c\u5305\u7684 __init__.py \u4ee3\u7801\u5b9a\u4e49\u4e86\u5217\u8868 __all__ \uff0c\u8fd0\u884c from package import * \u65f6\uff0c\u5b83\u5c31\u662f\u7528\u4e8e\u5bfc\u5165\u7684\u6a21\u5757\u540d\u5217\u8868\u3002\u53d1\u5e03\u5305\u7684\u65b0\u7248\u672c\u65f6\uff0c\u5305\u7684\u4f5c\u8005\u5e94\u66f4\u65b0\u6b64\u5217\u8868\u3002\u5982\u679c\u5305\u7684\u4f5c\u8005\u8ba4\u4e3a\u6ca1\u6709\u5fc5\u8981\u5728\u5305\u4e2d\u6267\u884c\u5bfc\u5165 * \u64cd\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u63d0\u4f9b\u6b64\u5217\u8868\u3002\u4f8b\u5982\uff0c sound/effects/__init__.py \u6587\u4ef6\u5305\u542b\u4ee5\u4e0b\u4ee3\u7801\uff1a __all__ = [ \"echo\" , \"surround\" , \"reverse\" ] \u5373\uff0c from sound.effects import * \u5c06\u5bfc\u5165 sound \u5305\u4e2d\u7684\u8fd9\u4e09\u4e2a\u547d\u540d\u5b50\u6a21\u5757\u3002 \u5982\u679c\u6ca1\u6709\u5b9a\u4e49 __all__ \uff0c from sound.effects import * \u8bed\u53e5 \u4e0d\u4f1a \u628a\u5305 sound.effects \u4e2d\u6240\u6709\u5b50\u6a21\u5757\u90fd\u5bfc\u5165\u5230\u5f53\u524d\u547d\u540d\u7a7a\u95f4\uff1b\u8be5\u8bed\u53e5\u53ea\u786e\u4fdd\u5bfc\u5165\u5305 sound.effects \uff08\u53ef\u80fd\u8fd8\u4f1a\u8fd0\u884c __init__.py \u4e2d\u7684\u521d\u59cb\u5316\u4ee3\u7801\uff09\uff0c\u7136\u540e\uff0c\u518d\u5bfc\u5165\u5305\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\u3002\u8fd9\u4e9b\u540d\u79f0\u5305\u62ec __init__.py \u4e2d\u5b9a\u4e49\u7684\u4efb\u4f55\u540d\u79f0\uff08\u4ee5\u53ca\u663e\u5f0f\u52a0\u8f7d\u7684\u5b50\u6a21\u5757\uff09\uff0c\u8fd8\u5305\u62ec\u4e4b\u524d import \u8bed\u53e5\u663e\u5f0f\u52a0\u8f7d\u7684\u5305\u91cc\u7684\u5b50\u6a21\u5757\u3002\u8bf7\u770b\u4ee5\u4e0b\u4ee3\u7801\uff1a import sound.effects.echo import sound.effects.surround from sound.effects import * \u672c\u4f8b\u4e2d\uff0c\u6267\u884c from...import \u8bed\u53e5\u65f6\uff0c\u5c06\u628a echo \u548c surround \u6a21\u5757\u5bfc\u5165\u81f3\u5f53\u524d\u547d\u540d\u7a7a\u95f4\uff0c\u56e0\u4e3a\uff0c\u5b83\u4eec\u662f\u5728 sound.effects \u5305\u91cc\u5b9a\u4e49\u7684\u3002\uff08\u8be5\u5bfc\u5165\u64cd\u4f5c\u5728\u5b9a\u4e49\u4e86 __all__ \u65f6\u4e5f\u6709\u6548\u3002\uff09 \u867d\u7136\uff0c\u53ef\u4ee5\u628a\u6a21\u5757\u8bbe\u8ba1\u4e3a\u7528 import * \u65f6\u53ea\u5bfc\u51fa\u9075\u5faa\u6307\u5b9a\u6a21\u5f0f\u7684\u540d\u79f0\uff0c\u4f46\u4ecd\u4e0d\u63d0\u5021\u5728\u751f\u4ea7\u4ee3\u7801\u4e2d\u4f7f\u7528\u8fd9\u79cd\u505a\u6cd5\u3002 \u8bb0\u4f4f\uff0c\u4f7f\u7528 from package import specific_submodule \u6ca1\u6709\u4efb\u4f55\u95ee\u9898\uff01 \u5b9e\u9645\u4e0a\uff0c\u9664\u4e86\u5bfc\u5165\u6a21\u5757\u4f7f\u7528\u4e0d\u540c\u5305\u7684\u540c\u540d\u5b50\u6a21\u5757\u4e4b\u5916\uff0c\u8fd9\u79cd\u65b9\u5f0f\u662f\u63a8\u8350\u7528\u6cd5\u3002 1.5.2 \u5b50\u5305\u53c2\u8003 \u00b6 \u5305\u4e2d\u542b\u6709\u591a\u4e2a\u5b50\u5305\u65f6\uff08\u4e0e\u793a\u4f8b\u4e2d\u7684 sound \u5305\u4e00\u6837\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528\u7edd\u5bf9\u5bfc\u5165\u5f15\u7528\u5144\u5f1f\u5305\u4e2d\u7684\u5b50\u6a21\u5757\u3002\u4f8b\u5982\uff0c\u8981\u5728\u6a21\u5757 sound.filters.vocoder \u4e2d\u4f7f\u7528 sound.effects \u5305\u7684 echo \u6a21\u5757\u65f6\uff0c\u53ef\u4ee5\u7528 from sound.effects import echo \u5bfc\u5165\u3002 \u8fd8\u53ef\u4ee5\u7528 import \u8bed\u53e5\u7684 from module import name \u5f62\u5f0f\u6267\u884c\u76f8\u5bf9\u5bfc\u5165\u3002\u8fd9\u4e9b\u5bfc\u5165\u8bed\u53e5\u4f7f\u7528\u524d\u5bfc\u53e5\u70b9\u8868\u793a\u76f8\u5bf9\u5bfc\u5165\u4e2d\u7684\u5f53\u524d\u5305\u548c\u7236\u5305\u3002\u4f8b\u5982\uff0c\u76f8\u5bf9\u4e8e surround \u6a21\u5757\uff0c\u53ef\u4ee5\u4f7f\u7528\uff1a from . import echo from .. import formats from ..filters import equalizer \u6ce8\u610f\uff0c\u76f8\u5bf9\u5bfc\u5165\u57fa\u4e8e\u5f53\u524d\u6a21\u5757\u540d\u3002\u56e0\u4e3a\u4e3b\u6a21\u5757\u540d\u662f \"__main__\" \uff0c\u6240\u4ee5 Python \u7a0b\u5e8f\u7684\u4e3b\u6a21\u5757\u5fc5\u987b\u59cb\u7ec8\u4f7f\u7528\u7edd\u5bf9\u5bfc\u5165\u3002 1.5.3 \u591a\u76ee\u5f55\u4e2d\u7684\u5305 \u00b6 \u5305\u8fd8\u652f\u6301\u7279\u6b8a\u5c5e\u6027 __path__ \u3002\u8be5\u5c5e\u6027\u521d\u59cb\u5316\u4e3a\u5728\u5305\u7684 __init__.py \u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u6267\u884c\u524d\u6240\u5728\u7684\u76ee\u5f55\u540d\u5217\u8868\u3002\u8fd9\u4e2a\u53d8\u91cf\u53ef\u4ee5\u4fee\u6539\uff0c\u4f46\u8fd9\u6837\u505a\u4f1a\u5f71\u54cd\u5c06\u6765\u641c\u7d22\u5305\u4e2d\u6a21\u5757\u548c\u5b50\u5305\u7684\u64cd\u4f5c\u3002 \u8fd9\u4e2a\u529f\u80fd\u867d\u7136\u4e0d\u5e38\u7528\uff0c\u4f46\u53ef\u7528\u4e8e\u6269\u5c55\u5305\u4e2d\u7684\u6a21\u5757\u96c6\u3002","title":"\u6a21\u5757"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A8%A1%E5%9D%97/#_1","text":"\u5982\u679c\u4ece Python \u89e3\u91ca\u5668\u9000\u51fa\u518d\u8fdb\u5165\uff0c\u90a3\u4e48\u4e4b\u524d\u5b9a\u4e49\u7684\u6240\u6709\u7684\u65b9\u6cd5\u548c\u53d8\u91cf\u5c31\u90fd\u6d88\u5931\u4e86\u3002\u4e3a\u6b64 Python \u63d0\u4f9b\u4e86\u4e00\u4e2a\u529e\u6cd5\uff0c\u628a\u8fd9\u4e9b\u5b9a\u4e49\u5b58\u653e\u5728\u6587\u4ef6\u4e2d\uff0c\u4e3a\u4e00\u4e9b\u811a\u672c\u6216\u8005\u4ea4\u4e92\u5f0f\u7684\u89e3\u91ca\u5668\u5b9e\u4f8b\u4f7f\u7528\uff0c\u8fd9\u4e2a\u6587\u4ef6\u88ab\u79f0\u4e3a\u6a21\u5757\u3002 \u6a21\u5757\u662f\u5305\u542b Python \u5b9a\u4e49\u548c\u8bed\u53e5\u7684\u6587\u4ef6\uff1b\u5176\u6587\u4ef6\u540d\u662f\u6a21\u5757\u540d\u52a0\u540e\u7f00\u540d .py \uff0c\u6a21\u5757\u540d\u547d\u540d\u89c4\u5219\u4e0e\u53d8\u91cf\u547d\u540d\u4e00\u81f4\u3002\u5728\u6a21\u5757\u5185\u90e8\uff0c\u901a\u8fc7\u5168\u5c40\u53d8\u91cf __name__ \u53ef\u4ee5\u83b7\u53d6\u6a21\u5757\u540d\uff08\u5373\u5b57\u7b26\u4e32\uff09\u3002 \u4f8b\u5982\uff0c\u7528\u6587\u672c\u7f16\u8f91\u5668\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efa fibo.py \u6587\u4ef6\uff0c\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a # \u6587\u4ef6\u540d\uff1afibo.py # Fibonacci numbers module def fib ( n ): # write Fibonacci series up to n a , b = 0 , 1 while a < n : print ( a , end = ' ' ) a , b = b , a + b print () def fib2 ( n ): # return Fibonacci series up to n result = [] a , b = 0 , 1 while a < n : result . append ( a ) a , b = b , a + b return result \u73b0\u5728\uff0c\u8fdb\u5165 Python \u89e3\u91ca\u5668\uff0c\u7528\u4ee5\u4e0b\u547d\u4ee4\u5bfc\u5165\u8be5\u6a21\u5757\uff1a import fibo \u8fd9\u9879\u64cd\u4f5c\u4e0d\u76f4\u63a5\u628a fibo \u51fd\u6570\u5b9a\u4e49\u7684\u540d\u79f0\u5bfc\u5165\u5230\u5f53\u524d\u7b26\u53f7\u8868\uff0c\u53ea\u5bfc\u5165\u6a21\u5757\u540d fibo \u3002\u8981\u4f7f\u7528\u6a21\u5757\u540d\u8bbf\u95ee\u51fd\u6570\uff1a >>> fibo . fib ( 1000 ) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 >>> fibo . fib2 ( 100 ) [ 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 , 89 ] >>> fibo . __name__ 'fibo' \u5982\u679c\u7ecf\u5e38\u4f7f\u7528\u67d0\u4e2a\u51fd\u6570\uff0c\u53ef\u4ee5\u628a\u5b83\u8d4b\u503c\u7ed9\u5c40\u90e8\u53d8\u91cf\uff1a >>> fib = fibo . fib >>> fib ( 500 ) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377","title":"\u6a21\u5757"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A8%A1%E5%9D%97/#11","text":"\u6a21\u5757\u5305\u542b\u53ef\u6267\u884c\u8bed\u53e5\u53ca\u51fd\u6570\u5b9a\u4e49\u3002\u8fd9\u4e9b\u8bed\u53e5\u7528\u4e8e\u521d\u59cb\u5316\u6a21\u5757\uff0c\u4e14\u4ec5\u5728 import \u8bed\u53e5 \u7b2c\u4e00\u6b21 \u9047\u5230\u6a21\u5757\u540d\u65f6\u6267\u884c (\u6587\u4ef6\u4f5c\u4e3a\u811a\u672c\u8fd0\u884c\u65f6\uff0c\u4e5f\u4f1a\u6267\u884c\u8fd9\u4e9b\u8bed\u53e5\u3002) \u6a21\u5757\u6709\u81ea\u5df1\u7684\u79c1\u6709\u7b26\u53f7\u8868\uff0c\u7528\u4f5c\u6a21\u5757\u4e2d\u6240\u6709\u51fd\u6570\u7684\u5168\u5c40\u7b26\u53f7\u8868\u3002\u56e0\u6b64\uff0c\u5728\u6a21\u5757\u5185\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u65f6\uff0c\u4e0d\u7528\u62c5\u5fc3\u4e0e\u7528\u6237\u5b9a\u4e49\u7684\u5168\u5c40\u53d8\u91cf\u53d1\u751f\u51b2\u7a81\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u53ef\u4ee5\u7528\u4e0e\u8bbf\u95ee\u6a21\u5757\u51fd\u6570\u4e00\u6837\u7684\u6807\u8bb0\u6cd5\uff0c\u8bbf\u95ee\u6a21\u5757\u7684\u5168\u5c40\u53d8\u91cf\uff0c modname.itemname \u3002 \u53ef\u4ee5\u628a\u5176\u4ed6\u6a21\u5757\u5bfc\u5165\u6a21\u5757\u3002\u6309\u60ef\u4f8b\uff0c\u6240\u6709 import \u8bed\u53e5\u90fd\u653e\u5728\u6a21\u5757\uff08\u6216\u811a\u672c\uff09\u5f00\u5934\uff0c\u4f46\u8fd9\u4e0d\u662f\u5fc5\u987b\u7684\u3002\u5bfc\u5165\u7684\u6a21\u5757\u540d\u5b58\u5728\u5bfc\u5165\u6a21\u5757\u7684\u5168\u5c40\u7b26\u53f7\u8868\u91cc\u3002 import \u8bed\u53e5\u6709\u4e00\u4e2a\u53d8\u4f53\uff0c\u53ef\u4ee5\u76f4\u63a5\u628a\u6a21\u5757\u91cc\u7684\u540d\u79f0\u5bfc\u5165\u5230\u53e6\u4e00\u4e2a\u6a21\u5757\u3002\u4f8b\u5982\uff1a >>> from fibo import fib , fib2 >>> fib ( 500 ) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 \u8fd9\u6bb5\u4ee3\u7801\u4e0d\u4f1a\u628a\u6a21\u5757\u540d\u5bfc\u5165\u5230\u5c40\u90e8\u7b26\u53f7\u8868\u91cc\uff08\u56e0\u6b64\uff0c\u672c\u4f8b\u6ca1\u6709\u5b9a\u4e49 fibo \uff09\u3002 \u8fd8\u6709\u4e00\u79cd\u53d8\u4f53\u53ef\u4ee5\u5bfc\u5165\u6a21\u5757\u5185\u5b9a\u4e49\u7684\u6240\u6709\u540d\u79f0\uff1a >>> from fibo import * >>> fib ( 500 ) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 \u8fd9\u79cd\u65b9\u5f0f\u4f1a\u5bfc\u5165\u6240\u6709\u4e0d\u4ee5\u4e0b\u5212\u7ebf\uff08 _ \uff09\u5f00\u5934\u7684\u540d\u79f0 \u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4e0d\u8981\u7528\u8fd9\u4e2a\u529f\u80fd\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5411\u89e3\u91ca\u5668\u5bfc\u5165\u4e86\u4e00\u6279\u672a\u77e5\u7684\u540d\u79f0\uff0c\u53ef\u80fd\u4f1a\u8986\u76d6\u5df2\u7ecf\u5b9a\u4e49\u7684\u540d\u79f0\u3002 \u6ce8\u610f\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e0d\u5efa\u8bae\u4ece\u6a21\u5757\u6216\u5305\u5185\u5bfc\u5165 * \uff0c \u56e0\u4e3a\uff0c\u8fd9\u9879\u64cd\u4f5c\u7ecf\u5e38\u8ba9\u4ee3\u7801\u53d8\u5f97\u96be\u4ee5\u7406\u89e3\u3002\u4e0d\u8fc7\uff0c\u4e3a\u4e86\u5728\u4ea4\u4e92\u5f0f\u7f16\u8bd1\u5668\u4e2d\u5c11\u6253\u51e0\u4e2a\u5b57\uff0c\u8fd9\u4e48\u7528\u4e5f\u6ca1\u95ee\u9898\u3002 \u6a21\u5757\u540d\u540e\u4f7f\u7528 as \u65f6\uff0c\u76f4\u63a5\u628a as \u540e\u7684\u540d\u79f0\u4e0e\u5bfc\u5165\u6a21\u5757\u7ed1\u5b9a\u3002 >>> import fibo as fib >>> fib . fib ( 500 ) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 \u4e0e import fibo \u4e00\u6837\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4e5f\u53ef\u4ee5\u6709\u6548\u5730\u5bfc\u5165\u6a21\u5757\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u5bfc\u5165\u7684\u540d\u79f0\u662f fib \u3002 from \u4e2d\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6548\u679c\u7c7b\u4f3c\uff1a >>> from fibo import fib as fibonacci >>> fibonacci ( 500 ) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 \u6ce8\u89e3: \u4e3a\u4e86\u4fdd\u8bc1\u8fd0\u884c\u6548\u7387\uff0c\u6bcf\u6b21\u89e3\u91ca\u5668\u4f1a\u8bdd\u53ea\u5bfc\u5165\u4e00\u6b21\u6a21\u5757\u3002\u5982\u679c\u66f4\u6539\u4e86\u6a21\u5757\u5185\u5bb9\uff0c\u5fc5\u987b\u91cd\u542f\u89e3\u91ca\u5668\uff1b\u4ec5\u4ea4\u4e92\u6d4b\u8bd5\u4e00\u4e2a\u6a21\u5757\u65f6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 importlib.reload() \uff0c\u4f8b\u5982 import importlib; importlib.reload(modulename) \u3002","title":"1.1 \u6a21\u5757\u8be6\u89e3"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A8%A1%E5%9D%97/#12-__name__","text":"\u4e00\u4e2a\u6a21\u5757\u88ab\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u7b2c\u4e00\u6b21\u5f15\u5165\u65f6\uff0c\u5176\u4e3b\u7a0b\u5e8f\u5c06\u8fd0\u884c\u3002\u5982\u679c\u6211\u4eec\u60f3\u5728\u6a21\u5757\u88ab\u5f15\u5165\u65f6\uff0c\u6a21\u5757\u4e2d\u7684\u67d0\u4e00\u7a0b\u5e8f\u5757\u4e0d\u6267\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u7528__name__\u5c5e\u6027\u6765\u4f7f\u8be5\u7a0b\u5e8f\u5757\u4ec5\u5728\u8be5\u6a21\u5757\u81ea\u8eab\u8fd0\u884c\u65f6\u6267\u884c\u3002 \u8bf4\u660e\uff1a \u6bcf\u4e2a\u6a21\u5757\u90fd\u6709\u4e00\u4e2a__name__\u5c5e\u6027\uff0c\u5f53\u5176\u503c\u662f' main '\u65f6\uff0c\u8868\u660e\u8be5\u6a21\u5757\u81ea\u8eab\u5728\u8fd0\u884c\uff0c\u5426\u5219\u662f\u88ab\u5f15\u5165\uff1b __name__ \u4e0e __main__ \u5e95\u4e0b\u662f\u53cc\u4e0b\u5212\u7ebf\u3002 # Filename:using_name.py if __name__ == '__main__' : print ( '\u7a0b\u5e8f\u81ea\u8eab\u5728\u8fd0\u884c' ) else : print ( '\u6211\u6765\u81ea\u53e6\u4e00\u6a21\u5757' ) \u4ee5\u811a\u672c\u65b9\u5f0f\u6267\u884c\u6a21\u5757\u7ed3\u679c\uff1a # \u6a21\u5757\u662f\u7528IDLE\u7f16\u5199\uff0c\u8981\u6267\u884c\u6a21\u5757\uff0c\u53ea\u9700\u5c06\u7f16\u5199\u597d\u7684\u4ee3\u7801\uff0c\u4fdd\u5b58-F5 = RESTART : C : \\ Users \\ Administrator \\ AppData \\ Local \\ Programs \\ Python \\ Python39 \\ using_name . py \u7a0b\u5e8f\u81ea\u8eab\u5728\u8fd0\u884c \u65e2\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6587\u4ef6\u5f53\u811a\u672c\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u7528\u4f5c\u5bfc\u5165\u7684\u6a21\u5757\uff1b\u5bfc\u5165\u6a21\u5757\u65f6\uff1a import using_name # \u6211\u6765\u81ea\u53e6\u4e00\u4e2a\u6a21\u5757","title":"1.2 __name__\u5c5e\u6027"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A8%A1%E5%9D%97/#13-dir","text":"\u5185\u7f6e\u51fd\u6570 dir() \u7528\u4e8e\u67e5\u627e\u6a21\u5757\u5b9a\u4e49\u7684\u540d\u79f0\u3002\u8fd4\u56de\u7ed3\u679c\u662f\u7ecf\u8fc7\u6392\u5e8f\u7684\u5b57\u7b26\u4e32\u5217\u8868\uff1a import fibo print ( dir ( fibo )) # \u8f93\u51fa\u7ed3\u679c\uff1a ''' ['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'fib', 'fib2'] ''' \u5982\u679c\u6ca1\u6709\u7ed9\u5b9a\u53c2\u6570\uff0c\u90a3\u4e48 dir() \u51fd\u6570\u4f1a\u7f57\u5217\u51fa\u5f53\u524d\u5b9a\u4e49\u7684\u6240\u6709\u540d\u79f0: a = ( 1 , 2 , 3 , 4 ) import fibo print ( dir ()) # \u8f93\u51fa\u7ed3\u679c\uff1a ''' ['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'a', 'fibo']''' b = [ 1 , 2 , 3 , 4 ] print ( dir ()) # \u8f93\u51fa\u7ed3\u679c\uff1a ''' ['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'a', 'b', 'fibo']'''","title":"1.3 dir() \u51fd\u6570"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A8%A1%E5%9D%97/#14","text":"Python \u9644\u5e26\u4e86\u6807\u51c6\u6a21\u5757\u5e93\uff0c\u8be6\u89c1 Python \u6807\u51c6\u5e93\u53c2\u8003\u624b\u518c\u3002\u7279\u522b\u8981\u6ce8\u610f\u5185\u5d4c\u5230 Python \u89e3\u91ca\u5668\u4e2d\u7684\u6a21\u5757 sys \u3002\u53d8\u91cf sys.ps1 \u548c sys.ps2 \u5219\u7528\u6765\u5b9a\u4e49\u4e3b\u6b21\u63d0\u793a\u7684\u5b57\u7b26\u4e32\uff1a >>> import sys >>> sys . ps1 '>>> ' >>> sys . ps2 '... ' >>> sys . ps1 = 'C> ' C > print ( 'Yuck!' ) Yuck ! C > \u53ea\u6709\u89e3\u91ca\u5668\u7528\u4e8e\u4ea4\u4e92\u6a21\u5f0f\u65f6\uff0c\u624d\u5b9a\u4e49\u8fd9\u4e24\u4e2a\u53d8\u91cf\u3002 \u53d8\u91cf sys.path \u662f\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u7528\u4e8e\u786e\u5b9a\u89e3\u91ca\u5668\u7684\u6a21\u5757\u641c\u7d22\u8def\u5f84\uff1b\u5bfc\u5165 spam \u6a21\u5757\u65f6\uff0c\u89e3\u91ca\u5668\u9996\u5148\u67e5\u627e\u540d\u4e3a spam \u7684\u5185\u7f6e\u6a21\u5757\uff0c\u5982\u679c\u6ca1\u627e\u5230\uff0c\u89e3\u91ca\u5668\u518d\u4ece sys.path \u53d8\u91cf\u4e2d\u7684\u76ee\u5f55\u5217\u8868\u91cc\u67e5\u627e spam.py \u6587\u4ef6\u3002\u8be5\u53d8\u91cf\u4ee5\u73af\u5883\u53d8\u91cf PYTHONPATH \u63d0\u53d6\u7684\u9ed8\u8ba4\u8def\u5f84\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5982\u672a\u8bbe\u7f6e PYTHONPATH \uff0c\u5219\u4f7f\u7528\u5185\u7f6e\u7684\u9ed8\u8ba4\u8def\u5f84\u3002\u53ef\u4ee5\u7528\u6807\u51c6\u5217\u8868\u64cd\u4f5c\u4fee\u6539\u8be5\u53d8\u91cf\uff1a >>> import sys >>> sys . path . append ( '/ufs/guido/lib/python' )","title":"1.4 \u6807\u51c6\u6a21\u5757"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A8%A1%E5%9D%97/#15","text":"\u5305\u662f\u4e00\u79cd\u7ba1\u7406 Python \u6a21\u5757\u547d\u540d\u7a7a\u95f4\u7684\u5f62\u5f0f\uff0c\u91c7\u7528\"\u70b9\u6a21\u5757\u540d\u79f0\"\u3002 \u6bd4\u5982\u4e00\u4e2a\u6a21\u5757\u7684\u540d\u79f0\u662f A.B\uff0c \u90a3\u4e48\u4ed6\u8868\u793a\u4e00\u4e2a\u5305 A\u4e2d\u7684\u5b50\u6a21\u5757 B \u3002 \u5c31\u597d\u50cf\u4f7f\u7528\u6a21\u5757\u7684\u65f6\u5019\uff0c\u4f60\u4e0d\u7528\u62c5\u5fc3\u4e0d\u540c\u6a21\u5757\u4e4b\u95f4\u7684\u5168\u5c40\u53d8\u91cf\u76f8\u4e92\u5f71\u54cd\u4e00\u6837\uff0c\u91c7\u7528\u70b9\u6a21\u5757\u540d\u79f0\u8fd9\u79cd\u5f62\u5f0f\u4e5f\u4e0d\u7528\u62c5\u5fc3\u4e0d\u540c\u5e93\u4e4b\u95f4\u7684\u6a21\u5757\u91cd\u540d\u7684\u60c5\u51b5\u3002 \u8fd9\u6837\u4e0d\u540c\u7684\u4f5c\u8005\u90fd\u53ef\u4ee5\u63d0\u4f9b NumPy \u6a21\u5757\uff0c\u6216\u8005\u662f Python \u56fe\u5f62\u5e93\u3002 \u4e0d\u59a8\u5047\u8bbe\u4f60\u60f3\u8bbe\u8ba1\u4e00\u5957\u7edf\u4e00\u5904\u7406\u58f0\u97f3\u6587\u4ef6\u548c\u6570\u636e\u7684\u6a21\u5757\uff08\u6216\u8005\u79f0\u4e4b\u4e3a\u4e00\u4e2a\"\u5305\"\uff09\u3002 \u73b0\u5b58\u5f88\u591a\u79cd\u4e0d\u540c\u7684\u97f3\u9891\u6587\u4ef6\u683c\u5f0f\uff08\u57fa\u672c\u4e0a\u90fd\u662f\u901a\u8fc7\u540e\u7f00\u540d\u533a\u5206\u7684\uff0c\u4f8b\u5982\uff1a .wav\uff0c:file:.aiff\uff0c:file:.au\uff0c\uff09\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u6709\u4e00\u7ec4\u4e0d\u65ad\u589e\u52a0\u7684\u6a21\u5757\uff0c\u7528\u6765\u5728\u4e0d\u540c\u7684\u683c\u5f0f\u4e4b\u95f4\u8f6c\u6362\u3002 \u5e76\u4e14\u9488\u5bf9\u8fd9\u4e9b\u97f3\u9891\u6570\u636e\uff0c\u8fd8\u6709\u5f88\u591a\u4e0d\u540c\u7684\u64cd\u4f5c\uff08\u6bd4\u5982\u6df7\u97f3\uff0c\u6dfb\u52a0\u56de\u58f0\uff0c\u589e\u52a0\u5747\u8861\u5668\u529f\u80fd\uff0c\u521b\u5efa\u4eba\u9020\u7acb\u4f53\u58f0\u6548\u679c\uff09\uff0c\u6240\u4ee5\u4f60\u8fd8\u9700\u8981\u4e00\u7ec4\u600e\u4e48\u4e5f\u5199\u4e0d\u5b8c\u7684\u6a21\u5757\u6765\u5904\u7406\u8fd9\u4e9b\u64cd\u4f5c\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e86\u4e00\u79cd\u53ef\u80fd\u7684\u5305\u7ed3\u6784\uff08\u5728\u5206\u5c42\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff09: ound / Top - level package __init__ . py Initialize the sound package formats / Subpackage for file format conversions __init__ . py wavread . py wavwrite . py aiffread . py aiffwrite . py auread . py auwrite . py ... effects / Subpackage for sound effects __init__ . py echo . py surround . py reverse . py ... filters / Subpackage for filters __init__ . py equalizer . py vocoder . py karaoke . py ... \u5bfc\u5165\u5305\u65f6\uff0cPython \u641c\u7d22 sys.path \u91cc\u7684\u76ee\u5f55\uff0c\u67e5\u627e\u5305\u7684\u5b50\u76ee\u5f55\u3002 Python \u53ea\u628a\u542b __init__.py \u6587\u4ef6\u7684\u76ee\u5f55\u5f53\u6210\u5305\u3002\u8fd9\u6837\u53ef\u4ee5\u9632\u6b62\u4ee5 string \u7b49\u901a\u7528\u540d\u79f0\u547d\u540d\u7684\u76ee\u5f55\uff0c\u65e0\u610f\u4e2d\u5c4f\u853d\u51fa\u73b0\u5728\u540e\u65b9\u6a21\u5757\u641c\u7d22\u8def\u5f84\u4e2d\u7684\u6709\u6548\u6a21\u5757\u3002 \u6700\u7b80\u60c5\u51b5\u4e0b\uff0c __init__.py \u53ea\u662f\u4e00\u4e2a\u7a7a\u6587\u4ef6\uff0c\u4f46\u8be5\u6587\u4ef6\u4e5f\u53ef\u4ee5\u6267\u884c\u5305\u7684\u521d\u59cb\u5316\u4ee3\u7801\uff0c\u6216\u8bbe\u7f6e __all__ \u53d8\u91cf\uff0c\u8be6\u89c1\u4e0b\u6587\u3002 \u8fd8\u53ef\u4ee5\u4ece\u5305\u4e2d\u5bfc\u5165\u5355\u4e2a\u6a21\u5757\uff0c\u4f8b\u5982\uff1a import sound.effects.echo \u8fd9\u6bb5\u4ee3\u7801\u52a0\u8f7d\u5b50\u6a21\u5757 sound.effects.echo \uff0c\u4f46\u5f15\u7528\u65f6\u5fc5\u987b\u4f7f\u7528\u5b50\u6a21\u5757\u7684\u5168\u540d\uff1a sound . effects . echo . echofilter ( input , output , delay = 0.7 , atten = 4 ) \u53e6\u4e00\u79cd\u5bfc\u5165\u5b50\u6a21\u5757\u7684\u65b9\u6cd5\u662f \uff1a from sound.effects import echo \u8fd9\u6bb5\u4ee3\u7801\u8fd8\u53ef\u4ee5\u52a0\u8f7d\u5b50\u6a21\u5757 echo \uff0c\u5e76\u4e14\u4e0d\u52a0\u5305\u524d\u7f00\u4e5f\u53ef\u4ee5\u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u4f7f\u7528\uff1a echo . echofilter ( input , output , delay = 0.7 , atten = 4 ) \u53e6\u4e00\u79cd\u53d8\u4f53\u662f\u76f4\u63a5\u5bfc\u5165\u6240\u9700\u7684\u51fd\u6570\u6216\u53d8\u91cf\uff1a from sound.effects.echo import echofilter \u540c\u6837\uff0c\u8fd9\u6837\u4e5f\u4f1a\u52a0\u8f7d\u5b50\u6a21\u5757 echo \uff0c\u4f46\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u51fd\u6570 echofilter() \uff1a echofilter ( input , output , delay = 0.7 , atten = 4 ) \u6ce8\u610f\uff0c\u4f7f\u7528 from package import item \u65f6\uff0citem \u53ef\u4ee5\u662f\u5305\u7684\u5b50\u6a21\u5757\uff08\u6216\u5b50\u5305\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f\u5305\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u3001\u7c7b\u6216\u53d8\u91cf\u7b49\u5176\u4ed6\u540d\u79f0\u3002 import \u8bed\u53e5\u9996\u5148\u6d4b\u8bd5\u5305\u4e2d\u662f\u5426\u5b9a\u4e49\u4e86 item\uff1b\u5982\u679c\u672a\u5728\u5305\u4e2d\u5b9a\u4e49\uff0c\u5219\u5047\u5b9a item \u662f\u6a21\u5757\uff0c\u5e76\u5c1d\u8bd5\u52a0\u8f7d\u3002\u5982\u679c\u627e\u4e0d\u5230 item\uff0c\u5219\u89e6\u53d1 ImportError \u5f02\u5e38\u3002 \u76f8\u53cd\uff0c\u4f7f\u7528 import item.subitem.subsubitem \u53e5\u6cd5\u65f6\uff0c\u9664\u6700\u540e\u4e00\u9879\u5916\uff0c\u6bcf\u4e2a item \u90fd\u5fc5\u987b\u662f\u5305\uff1b\u6700\u540e\u4e00\u9879\u53ef\u4ee5\u662f\u6a21\u5757\u6216\u5305\uff0c\u4f46\u4e0d\u80fd\u662f\u4e0a\u4e00\u9879\u4e2d\u5b9a\u4e49\u7684\u7c7b\u3001\u51fd\u6570\u6216\u53d8\u91cf\u3002","title":"1.5 \u5305"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A8%A1%E5%9D%97/#151","text":"\u4f7f\u7528 from sound.effects import * \u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u8be5\u8bed\u53e5\u5728\u6587\u4ef6\u7cfb\u7edf\u67e5\u627e\u5e76\u5bfc\u5165\u5305\u7684\u6240\u6709\u5b50\u6a21\u5757\u3002\u8fd9\u9879\u64cd\u4f5c\u82b1\u8d39\u7684\u65f6\u95f4\u8f83\u957f\uff0c\u5e76\u4e14\u5bfc\u5165\u5b50\u6a21\u5757\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e0d\u5fc5\u8981\u7684\u526f\u4f5c\u7528\uff0c\u8fd9\u79cd\u526f\u4f5c\u7528\u53ea\u6709\u5728\u663e\u5f0f\u5bfc\u5165\u5b50\u6a21\u5757\u65f6\u624d\u4f1a\u53d1\u751f\u3002 \u552f\u4e00\u7684\u89e3\u51b3\u65b9\u6848\u662f\u63d0\u4f9b\u5305\u7684\u663e\u5f0f\u7d22\u5f15\u3002 import \u8bed\u53e5\u4f7f\u7528\u5982\u4e0b\u60ef\u4f8b\uff1a\u5982\u679c\u5305\u7684 __init__.py \u4ee3\u7801\u5b9a\u4e49\u4e86\u5217\u8868 __all__ \uff0c\u8fd0\u884c from package import * \u65f6\uff0c\u5b83\u5c31\u662f\u7528\u4e8e\u5bfc\u5165\u7684\u6a21\u5757\u540d\u5217\u8868\u3002\u53d1\u5e03\u5305\u7684\u65b0\u7248\u672c\u65f6\uff0c\u5305\u7684\u4f5c\u8005\u5e94\u66f4\u65b0\u6b64\u5217\u8868\u3002\u5982\u679c\u5305\u7684\u4f5c\u8005\u8ba4\u4e3a\u6ca1\u6709\u5fc5\u8981\u5728\u5305\u4e2d\u6267\u884c\u5bfc\u5165 * \u64cd\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u63d0\u4f9b\u6b64\u5217\u8868\u3002\u4f8b\u5982\uff0c sound/effects/__init__.py \u6587\u4ef6\u5305\u542b\u4ee5\u4e0b\u4ee3\u7801\uff1a __all__ = [ \"echo\" , \"surround\" , \"reverse\" ] \u5373\uff0c from sound.effects import * \u5c06\u5bfc\u5165 sound \u5305\u4e2d\u7684\u8fd9\u4e09\u4e2a\u547d\u540d\u5b50\u6a21\u5757\u3002 \u5982\u679c\u6ca1\u6709\u5b9a\u4e49 __all__ \uff0c from sound.effects import * \u8bed\u53e5 \u4e0d\u4f1a \u628a\u5305 sound.effects \u4e2d\u6240\u6709\u5b50\u6a21\u5757\u90fd\u5bfc\u5165\u5230\u5f53\u524d\u547d\u540d\u7a7a\u95f4\uff1b\u8be5\u8bed\u53e5\u53ea\u786e\u4fdd\u5bfc\u5165\u5305 sound.effects \uff08\u53ef\u80fd\u8fd8\u4f1a\u8fd0\u884c __init__.py \u4e2d\u7684\u521d\u59cb\u5316\u4ee3\u7801\uff09\uff0c\u7136\u540e\uff0c\u518d\u5bfc\u5165\u5305\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\u3002\u8fd9\u4e9b\u540d\u79f0\u5305\u62ec __init__.py \u4e2d\u5b9a\u4e49\u7684\u4efb\u4f55\u540d\u79f0\uff08\u4ee5\u53ca\u663e\u5f0f\u52a0\u8f7d\u7684\u5b50\u6a21\u5757\uff09\uff0c\u8fd8\u5305\u62ec\u4e4b\u524d import \u8bed\u53e5\u663e\u5f0f\u52a0\u8f7d\u7684\u5305\u91cc\u7684\u5b50\u6a21\u5757\u3002\u8bf7\u770b\u4ee5\u4e0b\u4ee3\u7801\uff1a import sound.effects.echo import sound.effects.surround from sound.effects import * \u672c\u4f8b\u4e2d\uff0c\u6267\u884c from...import \u8bed\u53e5\u65f6\uff0c\u5c06\u628a echo \u548c surround \u6a21\u5757\u5bfc\u5165\u81f3\u5f53\u524d\u547d\u540d\u7a7a\u95f4\uff0c\u56e0\u4e3a\uff0c\u5b83\u4eec\u662f\u5728 sound.effects \u5305\u91cc\u5b9a\u4e49\u7684\u3002\uff08\u8be5\u5bfc\u5165\u64cd\u4f5c\u5728\u5b9a\u4e49\u4e86 __all__ \u65f6\u4e5f\u6709\u6548\u3002\uff09 \u867d\u7136\uff0c\u53ef\u4ee5\u628a\u6a21\u5757\u8bbe\u8ba1\u4e3a\u7528 import * \u65f6\u53ea\u5bfc\u51fa\u9075\u5faa\u6307\u5b9a\u6a21\u5f0f\u7684\u540d\u79f0\uff0c\u4f46\u4ecd\u4e0d\u63d0\u5021\u5728\u751f\u4ea7\u4ee3\u7801\u4e2d\u4f7f\u7528\u8fd9\u79cd\u505a\u6cd5\u3002 \u8bb0\u4f4f\uff0c\u4f7f\u7528 from package import specific_submodule \u6ca1\u6709\u4efb\u4f55\u95ee\u9898\uff01 \u5b9e\u9645\u4e0a\uff0c\u9664\u4e86\u5bfc\u5165\u6a21\u5757\u4f7f\u7528\u4e0d\u540c\u5305\u7684\u540c\u540d\u5b50\u6a21\u5757\u4e4b\u5916\uff0c\u8fd9\u79cd\u65b9\u5f0f\u662f\u63a8\u8350\u7528\u6cd5\u3002","title":"1.5.1 \u4ece\u5305\u4e2d\u5bfc\u5165*"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A8%A1%E5%9D%97/#152","text":"\u5305\u4e2d\u542b\u6709\u591a\u4e2a\u5b50\u5305\u65f6\uff08\u4e0e\u793a\u4f8b\u4e2d\u7684 sound \u5305\u4e00\u6837\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528\u7edd\u5bf9\u5bfc\u5165\u5f15\u7528\u5144\u5f1f\u5305\u4e2d\u7684\u5b50\u6a21\u5757\u3002\u4f8b\u5982\uff0c\u8981\u5728\u6a21\u5757 sound.filters.vocoder \u4e2d\u4f7f\u7528 sound.effects \u5305\u7684 echo \u6a21\u5757\u65f6\uff0c\u53ef\u4ee5\u7528 from sound.effects import echo \u5bfc\u5165\u3002 \u8fd8\u53ef\u4ee5\u7528 import \u8bed\u53e5\u7684 from module import name \u5f62\u5f0f\u6267\u884c\u76f8\u5bf9\u5bfc\u5165\u3002\u8fd9\u4e9b\u5bfc\u5165\u8bed\u53e5\u4f7f\u7528\u524d\u5bfc\u53e5\u70b9\u8868\u793a\u76f8\u5bf9\u5bfc\u5165\u4e2d\u7684\u5f53\u524d\u5305\u548c\u7236\u5305\u3002\u4f8b\u5982\uff0c\u76f8\u5bf9\u4e8e surround \u6a21\u5757\uff0c\u53ef\u4ee5\u4f7f\u7528\uff1a from . import echo from .. import formats from ..filters import equalizer \u6ce8\u610f\uff0c\u76f8\u5bf9\u5bfc\u5165\u57fa\u4e8e\u5f53\u524d\u6a21\u5757\u540d\u3002\u56e0\u4e3a\u4e3b\u6a21\u5757\u540d\u662f \"__main__\" \uff0c\u6240\u4ee5 Python \u7a0b\u5e8f\u7684\u4e3b\u6a21\u5757\u5fc5\u987b\u59cb\u7ec8\u4f7f\u7528\u7edd\u5bf9\u5bfc\u5165\u3002","title":"1.5.2 \u5b50\u5305\u53c2\u8003"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%A8%A1%E5%9D%97/#153","text":"\u5305\u8fd8\u652f\u6301\u7279\u6b8a\u5c5e\u6027 __path__ \u3002\u8be5\u5c5e\u6027\u521d\u59cb\u5316\u4e3a\u5728\u5305\u7684 __init__.py \u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u6267\u884c\u524d\u6240\u5728\u7684\u76ee\u5f55\u540d\u5217\u8868\u3002\u8fd9\u4e2a\u53d8\u91cf\u53ef\u4ee5\u4fee\u6539\uff0c\u4f46\u8fd9\u6837\u505a\u4f1a\u5f71\u54cd\u5c06\u6765\u641c\u7d22\u5305\u4e2d\u6a21\u5757\u548c\u5b50\u5305\u7684\u64cd\u4f5c\u3002 \u8fd9\u4e2a\u529f\u80fd\u867d\u7136\u4e0d\u5e38\u7528\uff0c\u4f46\u53ef\u7528\u4e8e\u6269\u5c55\u5305\u4e2d\u7684\u6a21\u5757\u96c6\u3002","title":"1.5.3 \u591a\u76ee\u5f55\u4e2d\u7684\u5305"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","text":"\u6b63\u5219\u8868\u8fbe\u5f0f \u00b6 \u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u5b57\u7b26\u5e8f\u5217\uff0c\u5b83\u80fd\u5e2e\u52a9\u4f60\u65b9\u4fbf\u7684\u68c0\u67e5\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u4e0e\u67d0\u79cd\u6a21\u5f0f\u5339\u914d\u3002re \u6a21\u5757\u4f7f Python \u8bed\u8a00\u62e5\u6709\u5168\u90e8\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u529f\u80fd\u3002compile \u51fd\u6570\u6839\u636e\u4e00\u4e2a\u6a21\u5f0f\u5b57\u7b26\u4e32\u548c\u53ef\u9009\u7684\u6807\u5fd7\u53c2\u6570\u751f\u6210\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u8c61\uff1b\u8be5\u5bf9\u8c61\u62e5\u6709\u4e00\u7cfb\u5217\u65b9\u6cd5\u7528\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u548c\u66ff\u6362\u3002re \u6a21\u5757\u4e5f\u63d0\u4f9b\u4e86\u4e0e\u8fd9\u4e9b\u65b9\u6cd5\u529f\u80fd\u5b8c\u5168\u4e00\u81f4\u7684\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u4f7f\u7528\u4e00\u4e2a\u6a21\u5f0f\u5b57\u7b26\u4e32\u505a\u4e3a\u5b83\u4eec\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002 1.1 \u8bed\u6cd5\u7b80\u4ecb \u00b6 \u7531\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u7528\u4e8e\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u64cd\u4f5c\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u4ece\u6700\u5e38\u89c1\u7684\u4efb\u52a1\u5f00\u59cb\uff1a\u5339\u914d\u5b57\u7b26\u3002 \u5927\u591a\u6570\u5b57\u6bcd\u548c\u5b57\u7b26\u53ea\u4f1a\u5339\u914d\u81ea\u5df1\u3002 \u4f8b\u5982\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f test \u5c06\u5b8c\u5168\u5339\u914d\u5b57\u7b26\u4e32 test \u3002 \u4f46\u662f\uff0c\u4e00\u4e9b\u7279\u6b8a\u7684\u5143\u5b57\u7b26\u6216\u901a\u914d\u7b26\u9664\u80fd\u8868\u793a\u5b83\u4eec\u7684\u666e\u901a\u542b\u4e49\u5916\uff1b\u5b83\u4eec\u8fd8\u53ef\u4ee5\u5339\u914d\u4e00\u4e9b\u4e0e\u4f17\u4e0d\u540c\u7684\u4e1c\u897f\uff0c\u6216\u8005\u901a\u8fc7\u91cd\u590d\u5b83\u4eec\u6216\u6539\u53d8\u5b83\u4eec\u7684\u542b\u4e49\u6765\u5f71\u54cd\u6b63\u5219\u7684\u5176\u4ed6\u90e8\u5206\u3002 . \u9ed8\u8ba4\u5339\u914d\u9664\u6362\u884c\u7b26\u5916\u7684\u4efb\u610f\u5b57\u7b26\uff1b\u5982\u679c\u6307\u5b9a\u4e86\u6807\u7b7e DOTALL \uff0c\u5b83\u5c06\u5339\u914d\u5305\u62ec\u6362\u884c\u7b26\u7684\u4efb\u610f\u5b57\u7b26\u3002 [] \u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u96c6\u5408 (1) \u5b57\u7b26\u53ef\u4ee5\u5355\u72ec\u5217\u51fa\uff0c\u4f8b\u5982\uff1a [amk] \u5339\u914da\u6216m\u6216k\u3002 (2) \u901a\u8fc7 - \u8868\u793a\u5b57\u7b26\u8303\u56f4\uff0c\u4f8b\u5982\uff1a [a-z] \u53ea\u5339\u914d\u5c0f\u5199\u5b57\u6bcd\uff1b\u5982\u679c - \u8fdb\u884c\u4e86\u8f6c\u4e49 \uff08\u6bd4\u5982 [a\\-z] \uff09\u6216\u8005\u5b83\u7684\u4f4d\u7f6e\u5728\u9996\u4f4d\u6216\u8005\u672b\u5c3e\uff08\u5982 [-a] \u6216 [a-] \uff09\uff0c\u5b83\u5c31\u53ea\u8868\u793a\u666e\u901a\u5b57\u7b26 '-' \u3002 (3) ^ \u652f\u6301\u53cd\u53d6\uff0c\u4f8b\u5982\uff1a [^5] \u5c06\u5339\u914d\u9664 '5' \u4e4b\u5916\u7684\u4efb\u4f55\u5b57\u7b26\uff1b\u5982\u679c\u63d2\u5165\u7b26\u51fa\u73b0\u5728\u5b57\u7b26\u7c7b\u7684\u5176\u4ed6\u4f4d\u7f6e\uff0c\u5219\u5b83\u6ca1\u6709\u7279\u6b8a\u542b\u4e49\u3002 \u4f8b\u5982\uff1a [5^] \u5c06\u5339\u914d '5' \u6216 '^' \u3002 (4) \u8981\u5339\u914d\u4e00\u4e2a\u5b57\u7b26 ']' \uff0c\u53ef\u4ee5\u901a\u8fc7\u8f6c\u4e49\u7b26 \\ \uff1a \\[ ^ (1) \u5339\u914d\u5b57\u7b26\u4e32\u5f00\u5934 (2) \u5728 [] \u5f00\u59cb\u4f4d\u7f6e\uff0c\u8868\u793a\u53cd\u53d6 * \u5bf9\u5b83\u524d\u9762\u7684\u6b63\u5219\u5f0f\u5339\u914d0\u5230\u4efb\u610f\u6b21\u91cd\u590d\uff0c \u5c3d\u91cf\u591a\u7684\u5339\u914d\u5b57\u7b26\u4e32\u3002 ab* \u4f1a\u5339\u914d 'a' \uff0c 'ab' \uff0c\u6216\u8005 'a' \u540e\u9762\u8ddf\u968f\u4efb\u610f\u4e2a 'b' \u3002 + \u5bf9\u5b83\u524d\u9762\u7684\u6b63\u5219\u5f0f\u5339\u914d1\u5230\u4efb\u610f\u6b21\u91cd\u590d\u3002 ab+ \u4f1a\u5339\u914d 'a' \u540e\u9762\u8ddf\u968f1\u4e2a\u4ee5\u4e0a\u5230\u4efb\u610f\u4e2a 'b' \uff0c\u5b83\u4e0d\u4f1a\u5339\u914d 'a' \u3002 ? (1) \u5bf9\u5b83\u524d\u9762\u7684\u6b63\u5219\u5f0f\u5339\u914d0\u52301\u6b21\u91cd\u590d\u3002 ab? \u4f1a\u5339\u914d 'a' \u6216\u8005 'ab' \u3002 (2) \u8d2a\u5a6a\u6a21\u5f0f\u5f00\u5173 {m} \u5bf9\u5176\u4e4b\u524d\u7684\u6b63\u5219\u5f0f\u6307\u5b9a\u5339\u914d m \u4e2a\u91cd\u590d\uff1b\u5c11\u4e8e m \u7684\u8bdd\u5c31\u4f1a\u5bfc\u81f4\u5339\u914d\u5931\u8d25\u3002\u6bd4\u5982\uff0c a{6} \u5c06\u5339\u914d6\u4e2a 'a' , \u4f46\u662f\u4e0d\u80fd\u662f5\u4e2a\u3002 {m,n} \u5bf9\u6b63\u5219\u5f0f\u8fdb\u884c m \u5230 n \u6b21\u5339\u914d\uff0c\u5728 m \u548c n \u4e4b\u95f4\u53d6\u5c3d\u91cf\u591a\u3002 \u6bd4\u5982\uff0c a{3,5} \u5c06\u5339\u914d 3 \u5230 5\u4e2a 'a' \u3002\u5ffd\u7565 m \u610f\u4e3a\u6307\u5b9a\u4e0b\u754c\u4e3a0\uff0c\u5ffd\u7565 n \u6307\u5b9a\u4e0a\u754c\u4e3a\u65e0\u9650\u6b21\u3002 \u6bd4\u5982 a{4,}b \u5c06\u5339\u914d 'aaaab' \u6216\u80051000\u4e2a 'a' \u5c3e\u968f\u4e00\u4e2a 'b' \uff0c\u4f46\u4e0d\u80fd\u5339\u914d 'aaab' \u3002\u9017\u53f7\u4e0d\u80fd\u7701\u7565\uff0c\u5426\u5219\u65e0\u6cd5\u8fa8\u522b\u4fee\u9970\u7b26\u5e94\u8be5\u5ffd\u7565\u54ea\u4e2a\u8fb9\u754c\u3002 {m,n}? \u524d\u4e00\u4e2a\u4fee\u9970\u7b26\u7684\u975e\u8d2a\u5a6a\u6a21\u5f0f\uff0c\u53ea\u5339\u914d\u5c3d\u91cf\u5c11\u7684\u5b57\u7b26\u6b21\u6570\u3002\u6bd4\u5982\uff0c\u5bf9\u4e8e 'aaaaaa' \uff0c a{3,5} \u5339\u914d 5\u4e2a 'a' \uff0c\u800c a{3,5}? \u53ea\u5339\u914d3\u4e2a 'a' \u3002 $ \u5339\u914d\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u3002 \\ (1) \u8f6c\u4e49\u5b57\u7b26 (2) \u4e00\u4e9b\u4ee5 '\\' \u5f00\u5934\u7684\u7279\u6b8a\u5e8f\u5217\u8868\u793a\u901a\u5e38\u6709\u7528\u7684\u9884\u5b9a\u4e49\u5b57\u7b26\u96c6\uff0c\u4f8b\u5982\u6570\u5b57\u96c6\u3001\u5b57\u6bcd\u96c6\u6216\u4efb\u4f55\u975e\u7a7a\u683c\u7684\u96c6\u5408\u3002 \u6a21\u5f0f \u63cf\u8ff0 \\d \u5339\u914d\u4efb\u4f55\u5341\u8fdb\u5236\u6570\u5b57\uff1b\u8fd9\u7b49\u4ef7\u4e8e\u7c7b [0-9] \u3002 \\D \u5339\u914d\u4efb\u4f55\u975e\u6570\u5b57\u5b57\u7b26\uff1b\u8fd9\u7b49\u4ef7\u4e8e\u7c7b [^0-9] \u3002 \\s \u5339\u914d\u4efb\u4f55\u7a7a\u767d\u5b57\u7b26\uff1b\u8fd9\u7b49\u4ef7\u4e8e\u7c7b [ \\t\\n\\r\\f\\v] \u3002 \\S \u5339\u914d\u4efb\u4f55\u975e\u7a7a\u767d\u5b57\u7b26\uff1b\u8fd9\u76f8\u5f53\u4e8e\u7c7b [^ \\t\\n\\r\\f\\v] \u3002 \\w \u5339\u914d\u4efb\u4f55\u5b57\u6bcd\u3001\u6570\u5b57\u548c_\uff1b\u8fd9\u76f8\u5f53\u4e8e\u7c7b [a-zA-Z0-9_] \u3002 \\W \u5339\u914d\u4efb\u4f55\u975e\u5b57\u6bcd\u3001\u6570\u5b57\u548c_\uff1b\u8fd9\u76f8\u5f53\u4e8e\u7c7b [^a-zA-Z0-9_] \u3002 | A|B \uff0c A \u548c B \u53ef\u4ee5\u662f\u4efb\u610f\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u521b\u5efa\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5339\u914d A \u6216\u8005 B \uff1b\u4efb\u610f\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u53ef\u4ee5\u7528 '|' \u8fde\u63a5\u3002 (...) \u5206\u7ec4 \u6b63\u5219\u8868\u8fbe\u5f0f\u4fee\u9970\u7b26-\u53ef\u9009\u53c2\u6570\uff1a \u4fee\u9970\u7b26 \u63cf\u8ff0 re.I \u4f7f\u5339\u914d\u5bf9\u5927\u5c0f\u5199\u4e0d\u654f\u611f re.L \u505a\u672c\u5730\u5316\u8bc6\u522b\uff08locale-aware\uff09\u5339\u914d re.M \u591a\u884c\u5339\u914d\uff0c\u5f71\u54cd ^ \u548c $ re.S \u4f7f . \u5339\u914d\u5305\u62ec\u6362\u884c\u5728\u5185\u7684\u6240\u6709\u5b57\u7b26 re.U \u6839\u636eUnicode\u5b57\u7b26\u96c6\u89e3\u6790\u5b57\u7b26\u3002\u8fd9\u4e2a\u6807\u5fd7\u5f71\u54cd \\w, \\W, \\b, \\B re.X \u8be5\u6807\u5fd7\u901a\u8fc7\u7ed9\u4e88\u4f60\u66f4\u7075\u6d3b\u7684\u683c\u5f0f\u4ee5\u4fbf\u4f60\u5c06\u6b63\u5219\u8868\u8fbe\u5f0f\u5199\u5f97\u66f4\u6613\u4e8e\u7406\u89e3\u3002 \u5339\u914d\u5bf9\u8c61\uff08Match Objects\uff09\u5c5e\u6027\u548c\u65b9\u6cd5\uff1a \u4e00\u65e6\u4f60\u6709\u4e00\u4e2a\u8868\u793a\u7f16\u8bd1\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5bf9\u8c61\uff0c\u4f60\u7528\u5b83\u505a\u4ec0\u4e48\uff1f \u6a21\u5f0f\u5bf9\u8c61\u6709\u51e0\u79cd\u65b9\u6cd5\u548c\u5c5e\u6027\u3002 \u8fd9\u91cc\u53ea\u4ecb\u7ecd\u6700\u91cd\u8981\u7684\u5185\u5bb9\uff1b\u8bf7\u53c2\u9605 re \u6587\u6863\u83b7\u53d6\u5b8c\u6574\u5217\u8868\u3002 \u5339\u914d\u5bf9\u8c61\u65b9\u6cd5 \u63cf\u8ff0 group() \u8fd4\u56de\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5339\u914d\u7684\u5b50\u7ec4\u3002\u4e0d\u4f20\u53c2\u6570\u6216\u4f20\u51650\uff0c\u5219\u8f93\u51fa\u6574\u4e2a\u5339\u914d\u7684\u5b57\u7b26\u4e32\uff1b\u5982\u679c\u5b83\u662f\u4e00\u4e2a\u8303\u56f4 [1..99]\uff0c\u7ed3\u679c\u5c31\u662f\u76f8\u5e94\u7684\u62ec\u53f7\u7ec4\u5b57\u7b26\u4e32\uff1b\u5982\u679c\u4e00\u4e2a\u7ec4\u53f7\u662f\u8d1f\u6570\uff0c\u6216\u8005\u5927\u4e8e\u6837\u5f0f\u4e2d\u5b9a\u4e49\u7684\u7ec4\u6570\uff0c\u4e00\u4e2a IndexError \u7d22\u5f15\u9519\u8bef\u5c31 raise \u3002\u5982\u679c\u4e00\u4e2a\u7ec4\u5305\u542b\u5728\u6837\u5f0f\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u88ab\u5339\u914d\u591a\u6b21\uff0c\u5c31\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5339\u914d\u3002 groups() \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u6240\u6709\u5339\u914d\u7684\u5b50\u7ec4\uff0c\u5728\u6837\u5f0f\u4e2d\u51fa\u73b0\u7684\u4ece1\u5230\u4efb\u610f\u591a\u7684\u7ec4\u5408\u3002 default \u53c2\u6570\u7528\u4e8e\u4e0d\u53c2\u4e0e\u5339\u914d\u7684\u60c5\u51b5\uff0c\u9ed8\u8ba4\u4e3a None \u3002 groupdict() \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u4e86\u6240\u6709\u7684 \u547d\u540d \u5b50\u7ec4\u3002key\u5c31\u662f\u7ec4\u540d\u3002 default \u53c2\u6570\u7528\u4e8e\u4e0d\u53c2\u4e0e\u5339\u914d\u7684\u7ec4\u5408\uff1b\u9ed8\u8ba4\u4e3a None \u3002 start() \u8fd4\u56de\u5339\u914d\u7684\u5f00\u59cb\u4f4d\u7f6e end() \u8fd4\u56de\u5339\u914d\u7684\u7ed3\u675f\u4f4d\u7f6e span() \u8fd4\u56de\u5305\u542b\u5339\u914d (start, end) \u4f4d\u7f6e\u7684\u5143\u7ec4 1.2 \u5904\u7406\u51fd\u6570\u4ecb\u7ecd \u00b6 1.2.1 compile() \u00b6 re.compile(pattern,flags=0) \u5c06\u8868\u8fbe\u5f0f\u7f16\u8bd1\u6210\u4e00\u4e2a\u6b63\u5219\u5bf9\u8c61\uff0c\u901a\u8fc7\u5bf9\u8c61 match() \u3001 search() \u65b9\u6cd5\u53ef\u4ee5\u5339\u914d\u5bf9\u8c61\u3002 prog = re.compile(pattern) result = prog.match(string) \u7b49\u4ef7\u4e8e result = re.match(pattern, string) \u5982\u679c\u9700\u8981\u591a\u6b21\u4f7f\u7528\u8fd9\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u8bdd\uff0c\u4f7f\u7528 re.compile() \u548c\u4fdd\u5b58\u8fd9\u4e2a\u6b63\u5219\u5bf9\u8c61\u4ee5\u4fbf\u590d\u7528\uff0c\u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u66f4\u52a0\u9ad8\u6548\u3002 1.2.2 match() \u00b6 re.match(pattern, string, flags=0) \u5c1d\u8bd5\u4ece\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u5339\u914d\u4e00\u4e2a\u6a21\u5f0f\uff0c\u5982\u679c\u8d77\u59cb\u4f4d\u7f6e\u5339\u914d\u4e0d\u6210\u529f\u7684\u8bdd\uff0c match() \u5c31\u8fd4\u56denone\u3002 import re # re.match() string = '\u6211\u662fmatch\u51fd\u6570' s1 = re . match ( '\u6211' , string ) print ( s1 ) # <re.Match object; span=(0, 1), match='\u6211'> print ( s1 . group ()) # \u6211 print ( s1 . group ( 0 )) # \u6211 print ( s1 . span ()) # (0,1) s2 = re . match ( 'match' , string ) print ( s2 ) # None s3 = re . match ( '(.*)match(.*)' , string ) print ( s3 . group ()) # \u6211\u662fmatch\u51fd\u6570 print ( s3 . group ( 0 )) # \u6211\u662fmatch\u51fd\u6570 print ( s3 . group ( 1 )) # \u6211\u662f print ( s3 . group ( 2 )) # \u51fd\u6570 print ( s3 . groups ()) # ('\u6211\u662f', '\u51fd\u6570') print ( s3 . groups ()[ 0 ]) # \u6211\u662f 1.2.3 search() \u00b6 re.search(pattern, string, flags=0) \u626b\u63cf\u6574\u4e2a\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de\u7b2c\u4e00\u4e2a\u6210\u529f\u7684\u5339\u914d\u3002 import re # re.search(pattern, string, flags=0) string = '\u6211\u662fsearch\u51fd\u6570' s1 = re . search ( 'search' , string ) print ( s1 . group ()) # search 1.2.4 findall() \u00b6 re.findall(pattern, string, flags=0) \u5bf9 string \u8fd4\u56de\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684 pattern \u7684\u5339\u914d\u5217\u8868\uff0c string \u4ece\u5de6\u5230\u53f3\u8fdb\u884c\u626b\u63cf\uff0c\u5339\u914d\u6309\u627e\u5230\u7684\u987a\u5e8f\u8fd4\u56de\u3002\u5982\u679c\u6837\u5f0f\u91cc\u5b58\u5728\u4e00\u5230\u591a\u4e2a\u7ec4\uff0c\u5c31\u8fd4\u56de\u4e00\u4e2a\u7ec4\u5408\u5217\u8868\uff1b\u5c31\u662f\u4e00\u4e2a\u5143\u7ec4\u7684\u5217\u8868\uff08\u5982\u679c\u6837\u5f0f\u91cc\u6709\u8d85\u8fc7\u4e00\u4e2a\u7ec4\u5408\u7684\u8bdd\uff09;\u7a7a\u5339\u914d\u4e5f\u4f1a\u5305\u542b\u5728\u7ed3\u679c\u91cc\u3002 import re # re.findall(pattern, string, flags=0) string = '\u6211\u662ffindall\u51fd\u6570\uff0c\u80fd\u5339\u914d\u6240\u6709\uff1bmatch \u548c search \u662f\u53ea\u5339\u914d1\u6b21\u3002' s1 = re . findall ( '[a-z]+' , string ) print ( s1 ) # ['findall', 'match', 'search'] 1.2.5 finditer() \u00b6 re.finditer(pattern, string, flags=0) pattern \u5728 string \u91cc\u6240\u6709\u7684\u975e\u91cd\u590d\u5339\u914d\uff0c\u8fd4\u56de\u4e3a\u4e00\u4e2a\u8fed\u4ee3\u5668 iterator \u4fdd\u5b58\u4e86 \u5339\u914d\u5bf9\u8c61 \u3002 string \u4ece\u5de6\u5230\u53f3\u626b\u63cf\uff0c\u5339\u914d\u6309\u987a\u5e8f\u6392\u5217\uff1b\u7a7a\u5339\u914d\u4e5f\u5305\u542b\u5728\u7ed3\u679c\u91cc\u3002 import re # re.finditer() string = '\u6211\u662ffindall\u51fd\u6570\uff0c\u80fd\u5339\u914dall\uff1bmatch \u548c search \u662f\u53ea\u5339\u914done\u6b21\u3002' s1 = re . finditer ( '[a-z]+' , string ) print ( s1 ) # <callable_iterator object at 0x00000210AC2D6F70> for s in s1 : print ( s . group ()) # Output: # findall # all # match # search # one 1.2.6 split() \u00b6 re.split(pattern, string, maxsplit=0, flags=0) \u7528 pattern \u5206\u5f00 string \u3002 \u5982\u679c\u5728 pattern \u4e2d\u6355\u83b7\u5230\u62ec\u53f7\uff0c\u90a3\u4e48\u6240\u6709\u7684\u7ec4\u91cc\u7684\u6587\u5b57\u4e5f\u4f1a\u5305\u542b\u5728\u5217\u8868\u91cc\u3002\u5982\u679c maxsplit \u975e\u96f6\uff0c \u6700\u591a\u8fdb\u884c maxsplit \u6b21\u5206\u9694\uff0c \u5269\u4e0b\u7684\u5b57\u7b26\u5168\u90e8\u8fd4\u56de\u5230\u5217\u8868\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002 import re # re.split() string = '\u6211\u662fsplit\u51fd\u6570\uff0c\u8d1f\u8d23\u5206\u5272\u5b57\u7b26\u4e32\u3002' print ( re . split ( '\\W+' , string )) # ['\u6211\u662fsplit\u51fd\u6570', '\u8d1f\u8d23\u5206\u5272\u5b57\u7b26\u4e32', ''] print ( re . split ( '(\\W+)' , string )) # ['\u6211\u662fsplit\u51fd\u6570', '\uff0c', '\u8d1f\u8d23\u5206\u5272\u5b57\u7b26\u4e32', '\u3002', ''] print ( re . split ( '\\W+' , string , 1 )) # ['\u6211\u662fsplit\u51fd\u6570', '\u8d1f\u8d23\u5206\u5272\u5b57\u7b26\u4e32\u3002'] print ( re . split ( 'a' , string )) # ['\u6211\u662fsplit\u51fd\u6570\uff0c\u8d1f\u8d23\u5206\u5272\u5b57\u7b26\u4e32\u3002'] \u627e\u4e0d\u5230\uff0c\u4e0d\u5206\u5272 1.2.7 sub() \u00b6 re.sub(pattern, repl, string, count=0, flags=0) import re string = '\u6211\u662fsubb\u51fd\u6570\uff0c\u6211\u80fd\u67e5\u627e\u66ff\u6362' print ( re . sub ( 'subb' , 'sub' , string )) # \u6211\u662fsub\u51fd\u6570\uff0c\u6211\u80fd\u67e5\u627e\u66ff\u6362","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#_1","text":"\u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u5b57\u7b26\u5e8f\u5217\uff0c\u5b83\u80fd\u5e2e\u52a9\u4f60\u65b9\u4fbf\u7684\u68c0\u67e5\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u4e0e\u67d0\u79cd\u6a21\u5f0f\u5339\u914d\u3002re \u6a21\u5757\u4f7f Python \u8bed\u8a00\u62e5\u6709\u5168\u90e8\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u529f\u80fd\u3002compile \u51fd\u6570\u6839\u636e\u4e00\u4e2a\u6a21\u5f0f\u5b57\u7b26\u4e32\u548c\u53ef\u9009\u7684\u6807\u5fd7\u53c2\u6570\u751f\u6210\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u8c61\uff1b\u8be5\u5bf9\u8c61\u62e5\u6709\u4e00\u7cfb\u5217\u65b9\u6cd5\u7528\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u548c\u66ff\u6362\u3002re \u6a21\u5757\u4e5f\u63d0\u4f9b\u4e86\u4e0e\u8fd9\u4e9b\u65b9\u6cd5\u529f\u80fd\u5b8c\u5168\u4e00\u81f4\u7684\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u4f7f\u7528\u4e00\u4e2a\u6a21\u5f0f\u5b57\u7b26\u4e32\u505a\u4e3a\u5b83\u4eec\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#11","text":"\u7531\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u7528\u4e8e\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u64cd\u4f5c\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u4ece\u6700\u5e38\u89c1\u7684\u4efb\u52a1\u5f00\u59cb\uff1a\u5339\u914d\u5b57\u7b26\u3002 \u5927\u591a\u6570\u5b57\u6bcd\u548c\u5b57\u7b26\u53ea\u4f1a\u5339\u914d\u81ea\u5df1\u3002 \u4f8b\u5982\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f test \u5c06\u5b8c\u5168\u5339\u914d\u5b57\u7b26\u4e32 test \u3002 \u4f46\u662f\uff0c\u4e00\u4e9b\u7279\u6b8a\u7684\u5143\u5b57\u7b26\u6216\u901a\u914d\u7b26\u9664\u80fd\u8868\u793a\u5b83\u4eec\u7684\u666e\u901a\u542b\u4e49\u5916\uff1b\u5b83\u4eec\u8fd8\u53ef\u4ee5\u5339\u914d\u4e00\u4e9b\u4e0e\u4f17\u4e0d\u540c\u7684\u4e1c\u897f\uff0c\u6216\u8005\u901a\u8fc7\u91cd\u590d\u5b83\u4eec\u6216\u6539\u53d8\u5b83\u4eec\u7684\u542b\u4e49\u6765\u5f71\u54cd\u6b63\u5219\u7684\u5176\u4ed6\u90e8\u5206\u3002 . \u9ed8\u8ba4\u5339\u914d\u9664\u6362\u884c\u7b26\u5916\u7684\u4efb\u610f\u5b57\u7b26\uff1b\u5982\u679c\u6307\u5b9a\u4e86\u6807\u7b7e DOTALL \uff0c\u5b83\u5c06\u5339\u914d\u5305\u62ec\u6362\u884c\u7b26\u7684\u4efb\u610f\u5b57\u7b26\u3002 [] \u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u96c6\u5408 (1) \u5b57\u7b26\u53ef\u4ee5\u5355\u72ec\u5217\u51fa\uff0c\u4f8b\u5982\uff1a [amk] \u5339\u914da\u6216m\u6216k\u3002 (2) \u901a\u8fc7 - \u8868\u793a\u5b57\u7b26\u8303\u56f4\uff0c\u4f8b\u5982\uff1a [a-z] \u53ea\u5339\u914d\u5c0f\u5199\u5b57\u6bcd\uff1b\u5982\u679c - \u8fdb\u884c\u4e86\u8f6c\u4e49 \uff08\u6bd4\u5982 [a\\-z] \uff09\u6216\u8005\u5b83\u7684\u4f4d\u7f6e\u5728\u9996\u4f4d\u6216\u8005\u672b\u5c3e\uff08\u5982 [-a] \u6216 [a-] \uff09\uff0c\u5b83\u5c31\u53ea\u8868\u793a\u666e\u901a\u5b57\u7b26 '-' \u3002 (3) ^ \u652f\u6301\u53cd\u53d6\uff0c\u4f8b\u5982\uff1a [^5] \u5c06\u5339\u914d\u9664 '5' \u4e4b\u5916\u7684\u4efb\u4f55\u5b57\u7b26\uff1b\u5982\u679c\u63d2\u5165\u7b26\u51fa\u73b0\u5728\u5b57\u7b26\u7c7b\u7684\u5176\u4ed6\u4f4d\u7f6e\uff0c\u5219\u5b83\u6ca1\u6709\u7279\u6b8a\u542b\u4e49\u3002 \u4f8b\u5982\uff1a [5^] \u5c06\u5339\u914d '5' \u6216 '^' \u3002 (4) \u8981\u5339\u914d\u4e00\u4e2a\u5b57\u7b26 ']' \uff0c\u53ef\u4ee5\u901a\u8fc7\u8f6c\u4e49\u7b26 \\ \uff1a \\[ ^ (1) \u5339\u914d\u5b57\u7b26\u4e32\u5f00\u5934 (2) \u5728 [] \u5f00\u59cb\u4f4d\u7f6e\uff0c\u8868\u793a\u53cd\u53d6 * \u5bf9\u5b83\u524d\u9762\u7684\u6b63\u5219\u5f0f\u5339\u914d0\u5230\u4efb\u610f\u6b21\u91cd\u590d\uff0c \u5c3d\u91cf\u591a\u7684\u5339\u914d\u5b57\u7b26\u4e32\u3002 ab* \u4f1a\u5339\u914d 'a' \uff0c 'ab' \uff0c\u6216\u8005 'a' \u540e\u9762\u8ddf\u968f\u4efb\u610f\u4e2a 'b' \u3002 + \u5bf9\u5b83\u524d\u9762\u7684\u6b63\u5219\u5f0f\u5339\u914d1\u5230\u4efb\u610f\u6b21\u91cd\u590d\u3002 ab+ \u4f1a\u5339\u914d 'a' \u540e\u9762\u8ddf\u968f1\u4e2a\u4ee5\u4e0a\u5230\u4efb\u610f\u4e2a 'b' \uff0c\u5b83\u4e0d\u4f1a\u5339\u914d 'a' \u3002 ? (1) \u5bf9\u5b83\u524d\u9762\u7684\u6b63\u5219\u5f0f\u5339\u914d0\u52301\u6b21\u91cd\u590d\u3002 ab? \u4f1a\u5339\u914d 'a' \u6216\u8005 'ab' \u3002 (2) \u8d2a\u5a6a\u6a21\u5f0f\u5f00\u5173 {m} \u5bf9\u5176\u4e4b\u524d\u7684\u6b63\u5219\u5f0f\u6307\u5b9a\u5339\u914d m \u4e2a\u91cd\u590d\uff1b\u5c11\u4e8e m \u7684\u8bdd\u5c31\u4f1a\u5bfc\u81f4\u5339\u914d\u5931\u8d25\u3002\u6bd4\u5982\uff0c a{6} \u5c06\u5339\u914d6\u4e2a 'a' , \u4f46\u662f\u4e0d\u80fd\u662f5\u4e2a\u3002 {m,n} \u5bf9\u6b63\u5219\u5f0f\u8fdb\u884c m \u5230 n \u6b21\u5339\u914d\uff0c\u5728 m \u548c n \u4e4b\u95f4\u53d6\u5c3d\u91cf\u591a\u3002 \u6bd4\u5982\uff0c a{3,5} \u5c06\u5339\u914d 3 \u5230 5\u4e2a 'a' \u3002\u5ffd\u7565 m \u610f\u4e3a\u6307\u5b9a\u4e0b\u754c\u4e3a0\uff0c\u5ffd\u7565 n \u6307\u5b9a\u4e0a\u754c\u4e3a\u65e0\u9650\u6b21\u3002 \u6bd4\u5982 a{4,}b \u5c06\u5339\u914d 'aaaab' \u6216\u80051000\u4e2a 'a' \u5c3e\u968f\u4e00\u4e2a 'b' \uff0c\u4f46\u4e0d\u80fd\u5339\u914d 'aaab' \u3002\u9017\u53f7\u4e0d\u80fd\u7701\u7565\uff0c\u5426\u5219\u65e0\u6cd5\u8fa8\u522b\u4fee\u9970\u7b26\u5e94\u8be5\u5ffd\u7565\u54ea\u4e2a\u8fb9\u754c\u3002 {m,n}? \u524d\u4e00\u4e2a\u4fee\u9970\u7b26\u7684\u975e\u8d2a\u5a6a\u6a21\u5f0f\uff0c\u53ea\u5339\u914d\u5c3d\u91cf\u5c11\u7684\u5b57\u7b26\u6b21\u6570\u3002\u6bd4\u5982\uff0c\u5bf9\u4e8e 'aaaaaa' \uff0c a{3,5} \u5339\u914d 5\u4e2a 'a' \uff0c\u800c a{3,5}? \u53ea\u5339\u914d3\u4e2a 'a' \u3002 $ \u5339\u914d\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u3002 \\ (1) \u8f6c\u4e49\u5b57\u7b26 (2) \u4e00\u4e9b\u4ee5 '\\' \u5f00\u5934\u7684\u7279\u6b8a\u5e8f\u5217\u8868\u793a\u901a\u5e38\u6709\u7528\u7684\u9884\u5b9a\u4e49\u5b57\u7b26\u96c6\uff0c\u4f8b\u5982\u6570\u5b57\u96c6\u3001\u5b57\u6bcd\u96c6\u6216\u4efb\u4f55\u975e\u7a7a\u683c\u7684\u96c6\u5408\u3002 \u6a21\u5f0f \u63cf\u8ff0 \\d \u5339\u914d\u4efb\u4f55\u5341\u8fdb\u5236\u6570\u5b57\uff1b\u8fd9\u7b49\u4ef7\u4e8e\u7c7b [0-9] \u3002 \\D \u5339\u914d\u4efb\u4f55\u975e\u6570\u5b57\u5b57\u7b26\uff1b\u8fd9\u7b49\u4ef7\u4e8e\u7c7b [^0-9] \u3002 \\s \u5339\u914d\u4efb\u4f55\u7a7a\u767d\u5b57\u7b26\uff1b\u8fd9\u7b49\u4ef7\u4e8e\u7c7b [ \\t\\n\\r\\f\\v] \u3002 \\S \u5339\u914d\u4efb\u4f55\u975e\u7a7a\u767d\u5b57\u7b26\uff1b\u8fd9\u76f8\u5f53\u4e8e\u7c7b [^ \\t\\n\\r\\f\\v] \u3002 \\w \u5339\u914d\u4efb\u4f55\u5b57\u6bcd\u3001\u6570\u5b57\u548c_\uff1b\u8fd9\u76f8\u5f53\u4e8e\u7c7b [a-zA-Z0-9_] \u3002 \\W \u5339\u914d\u4efb\u4f55\u975e\u5b57\u6bcd\u3001\u6570\u5b57\u548c_\uff1b\u8fd9\u76f8\u5f53\u4e8e\u7c7b [^a-zA-Z0-9_] \u3002 | A|B \uff0c A \u548c B \u53ef\u4ee5\u662f\u4efb\u610f\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u521b\u5efa\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5339\u914d A \u6216\u8005 B \uff1b\u4efb\u610f\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u53ef\u4ee5\u7528 '|' \u8fde\u63a5\u3002 (...) \u5206\u7ec4 \u6b63\u5219\u8868\u8fbe\u5f0f\u4fee\u9970\u7b26-\u53ef\u9009\u53c2\u6570\uff1a \u4fee\u9970\u7b26 \u63cf\u8ff0 re.I \u4f7f\u5339\u914d\u5bf9\u5927\u5c0f\u5199\u4e0d\u654f\u611f re.L \u505a\u672c\u5730\u5316\u8bc6\u522b\uff08locale-aware\uff09\u5339\u914d re.M \u591a\u884c\u5339\u914d\uff0c\u5f71\u54cd ^ \u548c $ re.S \u4f7f . \u5339\u914d\u5305\u62ec\u6362\u884c\u5728\u5185\u7684\u6240\u6709\u5b57\u7b26 re.U \u6839\u636eUnicode\u5b57\u7b26\u96c6\u89e3\u6790\u5b57\u7b26\u3002\u8fd9\u4e2a\u6807\u5fd7\u5f71\u54cd \\w, \\W, \\b, \\B re.X \u8be5\u6807\u5fd7\u901a\u8fc7\u7ed9\u4e88\u4f60\u66f4\u7075\u6d3b\u7684\u683c\u5f0f\u4ee5\u4fbf\u4f60\u5c06\u6b63\u5219\u8868\u8fbe\u5f0f\u5199\u5f97\u66f4\u6613\u4e8e\u7406\u89e3\u3002 \u5339\u914d\u5bf9\u8c61\uff08Match Objects\uff09\u5c5e\u6027\u548c\u65b9\u6cd5\uff1a \u4e00\u65e6\u4f60\u6709\u4e00\u4e2a\u8868\u793a\u7f16\u8bd1\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5bf9\u8c61\uff0c\u4f60\u7528\u5b83\u505a\u4ec0\u4e48\uff1f \u6a21\u5f0f\u5bf9\u8c61\u6709\u51e0\u79cd\u65b9\u6cd5\u548c\u5c5e\u6027\u3002 \u8fd9\u91cc\u53ea\u4ecb\u7ecd\u6700\u91cd\u8981\u7684\u5185\u5bb9\uff1b\u8bf7\u53c2\u9605 re \u6587\u6863\u83b7\u53d6\u5b8c\u6574\u5217\u8868\u3002 \u5339\u914d\u5bf9\u8c61\u65b9\u6cd5 \u63cf\u8ff0 group() \u8fd4\u56de\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5339\u914d\u7684\u5b50\u7ec4\u3002\u4e0d\u4f20\u53c2\u6570\u6216\u4f20\u51650\uff0c\u5219\u8f93\u51fa\u6574\u4e2a\u5339\u914d\u7684\u5b57\u7b26\u4e32\uff1b\u5982\u679c\u5b83\u662f\u4e00\u4e2a\u8303\u56f4 [1..99]\uff0c\u7ed3\u679c\u5c31\u662f\u76f8\u5e94\u7684\u62ec\u53f7\u7ec4\u5b57\u7b26\u4e32\uff1b\u5982\u679c\u4e00\u4e2a\u7ec4\u53f7\u662f\u8d1f\u6570\uff0c\u6216\u8005\u5927\u4e8e\u6837\u5f0f\u4e2d\u5b9a\u4e49\u7684\u7ec4\u6570\uff0c\u4e00\u4e2a IndexError \u7d22\u5f15\u9519\u8bef\u5c31 raise \u3002\u5982\u679c\u4e00\u4e2a\u7ec4\u5305\u542b\u5728\u6837\u5f0f\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u88ab\u5339\u914d\u591a\u6b21\uff0c\u5c31\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5339\u914d\u3002 groups() \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u6240\u6709\u5339\u914d\u7684\u5b50\u7ec4\uff0c\u5728\u6837\u5f0f\u4e2d\u51fa\u73b0\u7684\u4ece1\u5230\u4efb\u610f\u591a\u7684\u7ec4\u5408\u3002 default \u53c2\u6570\u7528\u4e8e\u4e0d\u53c2\u4e0e\u5339\u914d\u7684\u60c5\u51b5\uff0c\u9ed8\u8ba4\u4e3a None \u3002 groupdict() \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u4e86\u6240\u6709\u7684 \u547d\u540d \u5b50\u7ec4\u3002key\u5c31\u662f\u7ec4\u540d\u3002 default \u53c2\u6570\u7528\u4e8e\u4e0d\u53c2\u4e0e\u5339\u914d\u7684\u7ec4\u5408\uff1b\u9ed8\u8ba4\u4e3a None \u3002 start() \u8fd4\u56de\u5339\u914d\u7684\u5f00\u59cb\u4f4d\u7f6e end() \u8fd4\u56de\u5339\u914d\u7684\u7ed3\u675f\u4f4d\u7f6e span() \u8fd4\u56de\u5305\u542b\u5339\u914d (start, end) \u4f4d\u7f6e\u7684\u5143\u7ec4","title":"1.1 \u8bed\u6cd5\u7b80\u4ecb"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#12","text":"","title":"1.2 \u5904\u7406\u51fd\u6570\u4ecb\u7ecd"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#121-compile","text":"re.compile(pattern,flags=0) \u5c06\u8868\u8fbe\u5f0f\u7f16\u8bd1\u6210\u4e00\u4e2a\u6b63\u5219\u5bf9\u8c61\uff0c\u901a\u8fc7\u5bf9\u8c61 match() \u3001 search() \u65b9\u6cd5\u53ef\u4ee5\u5339\u914d\u5bf9\u8c61\u3002 prog = re.compile(pattern) result = prog.match(string) \u7b49\u4ef7\u4e8e result = re.match(pattern, string) \u5982\u679c\u9700\u8981\u591a\u6b21\u4f7f\u7528\u8fd9\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u8bdd\uff0c\u4f7f\u7528 re.compile() \u548c\u4fdd\u5b58\u8fd9\u4e2a\u6b63\u5219\u5bf9\u8c61\u4ee5\u4fbf\u590d\u7528\uff0c\u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u66f4\u52a0\u9ad8\u6548\u3002","title":"1.2.1 compile()"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#122-match","text":"re.match(pattern, string, flags=0) \u5c1d\u8bd5\u4ece\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u5339\u914d\u4e00\u4e2a\u6a21\u5f0f\uff0c\u5982\u679c\u8d77\u59cb\u4f4d\u7f6e\u5339\u914d\u4e0d\u6210\u529f\u7684\u8bdd\uff0c match() \u5c31\u8fd4\u56denone\u3002 import re # re.match() string = '\u6211\u662fmatch\u51fd\u6570' s1 = re . match ( '\u6211' , string ) print ( s1 ) # <re.Match object; span=(0, 1), match='\u6211'> print ( s1 . group ()) # \u6211 print ( s1 . group ( 0 )) # \u6211 print ( s1 . span ()) # (0,1) s2 = re . match ( 'match' , string ) print ( s2 ) # None s3 = re . match ( '(.*)match(.*)' , string ) print ( s3 . group ()) # \u6211\u662fmatch\u51fd\u6570 print ( s3 . group ( 0 )) # \u6211\u662fmatch\u51fd\u6570 print ( s3 . group ( 1 )) # \u6211\u662f print ( s3 . group ( 2 )) # \u51fd\u6570 print ( s3 . groups ()) # ('\u6211\u662f', '\u51fd\u6570') print ( s3 . groups ()[ 0 ]) # \u6211\u662f","title":"1.2.2 match()"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#123-search","text":"re.search(pattern, string, flags=0) \u626b\u63cf\u6574\u4e2a\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de\u7b2c\u4e00\u4e2a\u6210\u529f\u7684\u5339\u914d\u3002 import re # re.search(pattern, string, flags=0) string = '\u6211\u662fsearch\u51fd\u6570' s1 = re . search ( 'search' , string ) print ( s1 . group ()) # search","title":"1.2.3 search()"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#124-findall","text":"re.findall(pattern, string, flags=0) \u5bf9 string \u8fd4\u56de\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684 pattern \u7684\u5339\u914d\u5217\u8868\uff0c string \u4ece\u5de6\u5230\u53f3\u8fdb\u884c\u626b\u63cf\uff0c\u5339\u914d\u6309\u627e\u5230\u7684\u987a\u5e8f\u8fd4\u56de\u3002\u5982\u679c\u6837\u5f0f\u91cc\u5b58\u5728\u4e00\u5230\u591a\u4e2a\u7ec4\uff0c\u5c31\u8fd4\u56de\u4e00\u4e2a\u7ec4\u5408\u5217\u8868\uff1b\u5c31\u662f\u4e00\u4e2a\u5143\u7ec4\u7684\u5217\u8868\uff08\u5982\u679c\u6837\u5f0f\u91cc\u6709\u8d85\u8fc7\u4e00\u4e2a\u7ec4\u5408\u7684\u8bdd\uff09;\u7a7a\u5339\u914d\u4e5f\u4f1a\u5305\u542b\u5728\u7ed3\u679c\u91cc\u3002 import re # re.findall(pattern, string, flags=0) string = '\u6211\u662ffindall\u51fd\u6570\uff0c\u80fd\u5339\u914d\u6240\u6709\uff1bmatch \u548c search \u662f\u53ea\u5339\u914d1\u6b21\u3002' s1 = re . findall ( '[a-z]+' , string ) print ( s1 ) # ['findall', 'match', 'search']","title":"1.2.4 findall()"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#125-finditer","text":"re.finditer(pattern, string, flags=0) pattern \u5728 string \u91cc\u6240\u6709\u7684\u975e\u91cd\u590d\u5339\u914d\uff0c\u8fd4\u56de\u4e3a\u4e00\u4e2a\u8fed\u4ee3\u5668 iterator \u4fdd\u5b58\u4e86 \u5339\u914d\u5bf9\u8c61 \u3002 string \u4ece\u5de6\u5230\u53f3\u626b\u63cf\uff0c\u5339\u914d\u6309\u987a\u5e8f\u6392\u5217\uff1b\u7a7a\u5339\u914d\u4e5f\u5305\u542b\u5728\u7ed3\u679c\u91cc\u3002 import re # re.finditer() string = '\u6211\u662ffindall\u51fd\u6570\uff0c\u80fd\u5339\u914dall\uff1bmatch \u548c search \u662f\u53ea\u5339\u914done\u6b21\u3002' s1 = re . finditer ( '[a-z]+' , string ) print ( s1 ) # <callable_iterator object at 0x00000210AC2D6F70> for s in s1 : print ( s . group ()) # Output: # findall # all # match # search # one","title":"1.2.5 finditer()"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#126-split","text":"re.split(pattern, string, maxsplit=0, flags=0) \u7528 pattern \u5206\u5f00 string \u3002 \u5982\u679c\u5728 pattern \u4e2d\u6355\u83b7\u5230\u62ec\u53f7\uff0c\u90a3\u4e48\u6240\u6709\u7684\u7ec4\u91cc\u7684\u6587\u5b57\u4e5f\u4f1a\u5305\u542b\u5728\u5217\u8868\u91cc\u3002\u5982\u679c maxsplit \u975e\u96f6\uff0c \u6700\u591a\u8fdb\u884c maxsplit \u6b21\u5206\u9694\uff0c \u5269\u4e0b\u7684\u5b57\u7b26\u5168\u90e8\u8fd4\u56de\u5230\u5217\u8868\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002 import re # re.split() string = '\u6211\u662fsplit\u51fd\u6570\uff0c\u8d1f\u8d23\u5206\u5272\u5b57\u7b26\u4e32\u3002' print ( re . split ( '\\W+' , string )) # ['\u6211\u662fsplit\u51fd\u6570', '\u8d1f\u8d23\u5206\u5272\u5b57\u7b26\u4e32', ''] print ( re . split ( '(\\W+)' , string )) # ['\u6211\u662fsplit\u51fd\u6570', '\uff0c', '\u8d1f\u8d23\u5206\u5272\u5b57\u7b26\u4e32', '\u3002', ''] print ( re . split ( '\\W+' , string , 1 )) # ['\u6211\u662fsplit\u51fd\u6570', '\u8d1f\u8d23\u5206\u5272\u5b57\u7b26\u4e32\u3002'] print ( re . split ( 'a' , string )) # ['\u6211\u662fsplit\u51fd\u6570\uff0c\u8d1f\u8d23\u5206\u5272\u5b57\u7b26\u4e32\u3002'] \u627e\u4e0d\u5230\uff0c\u4e0d\u5206\u5272","title":"1.2.6 split()"},{"location":"python%E5%9F%BA%E7%A1%80/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#127-sub","text":"re.sub(pattern, repl, string, count=0, flags=0) import re string = '\u6211\u662fsubb\u51fd\u6570\uff0c\u6211\u80fd\u67e5\u627e\u66ff\u6362' print ( re . sub ( 'subb' , 'sub' , string )) # \u6211\u662fsub\u51fd\u6570\uff0c\u6211\u80fd\u67e5\u627e\u66ff\u6362","title":"1.2.7 sub()"},{"location":"python%E5%9F%BA%E7%A1%80/%E7%B1%BB/","text":"\u7c7b \u00b6 \u7c7b\u628a\u6570\u636e\u4e0e\u529f\u80fd\u7ed1\u5b9a\u5728\u4e00\u8d77\u3002\u521b\u5efa\u65b0\u7c7b\u5c31\u662f\u521b\u5efa\u65b0\u7684\u5bf9\u8c61 \u7c7b\u578b \uff0c\u4ece\u800c\u521b\u5efa\u8be5\u7c7b\u578b\u7684\u65b0 \u5b9e\u4f8b \u3002\u7c7b\u5b9e\u4f8b\u5177\u6709\u591a\u79cd\u4fdd\u6301\u81ea\u8eab\u72b6\u6001\u7684\u5c5e\u6027\u3002\u7c7b\u5b9e\u4f8b\u8fd8\u652f\u6301\uff08\u5728\u7c7b\u4e2d\u5b9a\u4e49\u7684\uff09\u6539\u53d8\u81ea\u8eab\u72b6\u6001\u7684\u65b9\u6cd5\u3002 1.1 \u547d\u540d\u7a7a\u95f4\u548c\u4f5c\u7528\u57df \u00b6 \u5728\u4ecb\u7ecd\u7c7b\u4e4b\u524d\uff0c\u9996\u5148\u4ecb\u7ecd\u4e00\u4e9b Python \u7684\u4f5c\u7528\u57df\u89c4\u5219\u3002\u7c7b\u5b9a\u4e49\u5bf9\u547d\u540d\u7a7a\u95f4\u6709\u4e00\u4e9b\u5de7\u5999\u7684\u6280\u5de7\uff0c\u4f60\u9700\u8981\u77e5\u9053\u4f5c\u7528\u57df\u548c\u547d\u540d\u7a7a\u95f4\u5982\u4f55\u5de5\u4f5c\u624d\u80fd\u5b8c\u5168\u7406\u89e3\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\u3002 1.1.1 \u547d\u540d\u7a7a\u95f4 \u00b6 namespace \uff08 \u547d\u540d\u7a7a\u95f4 \uff09\u662f\u4e00\u4e2a\u4ece\u540d\u5b57\u5230\u5bf9\u8c61\u7684\u6620\u5c04\uff1b\u5927\u90e8\u5206\u547d\u540d\u7a7a\u95f4\u5f53\u524d\u90fd\u7531 Python\u5b57\u5178 \u5b9e\u73b0\uff0c\u4f46\u4e00\u822c\u60c5\u51b5\u4e0b\u57fa\u672c\u4e0d\u4f1a\u53bb\u5173\u6ce8\u5b83\u4eec\uff08\u9664\u4e86\u8981\u9762\u5bf9\u6027\u80fd\u95ee\u9898\u65f6\uff09\uff0c\u800c\u4e14\u4e5f\u6709\u53ef\u80fd\u5728\u5c06\u6765\u66f4\u6539\u3002 \u547d\u540d\u7a7a\u95f4\u63d0\u4f9b\u4e86\u5728\u9879\u76ee\u4e2d\u907f\u514d\u540d\u5b57\u51b2\u7a81\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u5404\u4e2a\u547d\u540d\u7a7a\u95f4\u662f\u72ec\u7acb\u7684\uff0c\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684\uff0c\u6240\u4ee5\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u4e0d\u80fd\u6709\u91cd\u540d\uff0c\u4f46\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u662f\u53ef\u4ee5\u91cd\u540d\u800c\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\u3002 \u51e0\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u4f8b\u5b50\uff1a \u5185\u7f6e\u540d\u79f0\uff08built-in names \uff09\uff0c \u5b58\u653e\u5185\u7f6e\u51fd\u6570\u7684\u96c6\u5408\uff0c\u6bd4\u5982\u51fd\u6570\u540d abs \u3001 char \u548c\u5f02\u5e38\u540d\u79f0 BaseException \u3001 Exception \u7b49\u7b49\u3002 \u5168\u5c40\u540d\u79f0\uff08global names\uff09 \uff0c\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u8bb0\u5f55\u4e86\u6a21\u5757\u7684\u53d8\u91cf\uff0c\u5305\u62ec\u51fd\u6570\u3001\u7c7b\u3001\u5176\u5b83\u5bfc\u5165\u7684\u6a21\u5757\u3001\u6a21\u5757\u7ea7\u7684\u53d8\u91cf\u548c\u5e38\u91cf\u3002 \u5c40\u90e8\u540d\u79f0\uff08local names\uff09 \uff0c\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u8bb0\u5f55\u4e86\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u5305\u62ec\u51fd\u6570\u7684\u53c2\u6570\u548c\u5c40\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u3002\uff08\u7c7b\u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\u4e5f\u662f\uff09 \u547d\u540d\u7a7a\u95f4\u67e5\u627e\u987a\u5e8f: \u5047\u8bbe\u6211\u4eec\u8981\u4f7f\u7528\u53d8\u91cf fibo\uff0c\u5219 Python \u7684\u67e5\u627e\u987a\u5e8f\u4e3a\uff1a \u5c40\u90e8\u7684\u547d\u540d\u7a7a\u95f4\u53bb -> \u5168\u5c40\u547d\u540d\u7a7a\u95f4 -> \u5185\u7f6e\u547d\u540d\u7a7a\u95f4 \u3002 \u5982\u679c\u627e\u4e0d\u5230\u53d8\u91cf fibo\uff0c\u5b83\u5c06\u653e\u5f03\u67e5\u627e\u5e76\u5f15\u53d1\u4e00\u4e2a NameError \u5f02\u5e38: >>> fibo Traceback ( most recent call last ): File \"<pyshell#0>\" , line 1 , in < module > fibo NameError : name 'fibo' is not defined \u547d\u540d\u7a7a\u95f4\u7684\u751f\u547d\u5468\u671f\uff1a \u5728\u4e0d\u540c\u65f6\u523b\u521b\u5efa\u7684\u547d\u540d\u7a7a\u95f4\u62e5\u6709\u4e0d\u540c\u7684\u751f\u5b58\u671f\u3002\u5305\u542b\u5185\u7f6e\u540d\u79f0\u7684\u547d\u540d\u7a7a\u95f4\u662f\u5728 Python \u89e3\u91ca\u5668\u542f\u52a8\u65f6\u521b\u5efa\u7684\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u5220\u9664\u3002\u6a21\u5757\u7684\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u5728\u6a21\u5757\u5b9a\u4e49\u88ab\u8bfb\u5165\u65f6\u521b\u5efa\uff1b\u901a\u5e38\uff0c\u6a21\u5757\u547d\u540d\u7a7a\u95f4\u4e5f\u4f1a\u6301\u7eed\u5230\u89e3\u91ca\u5668\u9000\u51fa\u3002\u88ab\u89e3\u91ca\u5668\u7684\u9876\u5c42\u8c03\u7528\u6267\u884c\u7684\u8bed\u53e5\uff0c\u4ece\u4e00\u4e2a\u811a\u672c\u6587\u4ef6\u8bfb\u53d6\u6216\u4ea4\u4e92\u5f0f\u5730\u8bfb\u53d6\uff0c\u88ab\u8ba4\u4e3a\u662f __main__ \u6a21\u5757\u8c03\u7528\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u5b83\u4eec\u62e5\u6709\u81ea\u5df1\u7684\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u3002\uff08\u5185\u7f6e\u540d\u79f0\u5b9e\u9645\u4e0a\u4e5f\u5b58\u5728\u4e8e\u4e00\u4e2a\u6a21\u5757\u4e2d\uff1b\u8fd9\u4e2a\u6a21\u5757\u79f0\u4f5c builtins \u3002\uff09 \u4e00\u4e2a\u51fd\u6570\u7684\u672c\u5730\u547d\u540d\u7a7a\u95f4\u5728\u8fd9\u4e2a\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u521b\u5efa\uff0c\u5e76\u5728\u51fd\u6570\u8fd4\u56de\u6216\u629b\u51fa\u4e00\u4e2a\u4e0d\u5728\u51fd\u6570\u5185\u90e8\u5904\u7406\u7684\u9519\u8bef\u65f6\u88ab\u5220\u9664\u3002\u5f53\u7136\uff0c\u6bcf\u6b21\u9012\u5f52\u8c03\u7528\u90fd\u4f1a\u6709\u5b83\u81ea\u5df1\u7684\u672c\u5730\u547d\u540d\u7a7a\u95f4\u3002 1.1.2 \u4f5c\u7528\u57df \u00b6 \u4e00\u4e2a \u4f5c\u7528\u57df \u662f\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u53ef\u76f4\u63a5\u8bbf\u95ee\u7684 Python \u7a0b\u5e8f\u7684\u6587\u672c\u533a\u57df\u3002 \u8fd9\u91cc\u7684 \u201c\u53ef\u76f4\u63a5\u8bbf\u95ee\u201d \u610f\u5473\u7740\u5bf9\u540d\u79f0\u7684\u975e\u9650\u5b9a\u5f15\u7528\u4f1a\u5c1d\u8bd5\u5728\u547d\u540d\u7a7a\u95f4\u4e2d\u67e5\u627e\u540d\u79f0\u3002 \u5728\u4e00\u4e2a python \u7a0b\u5e8f\u4e2d\uff0c\u76f4\u63a5\u8bbf\u95ee\u4e00\u4e2a\u53d8\u91cf\uff0c\u4f1a\u4ece\u5185\u5230\u5916\u4f9d\u6b21\u8bbf\u95ee\u6240\u6709\u7684\u4f5c\u7528\u57df\u76f4\u5230\u627e\u5230\uff0c\u5426\u5219\u4f1a\u62a5\u672a\u5b9a\u4e49\u7684\u9519\u8bef\u3002 Python \u4e2d\uff0c\u7a0b\u5e8f\u7684\u53d8\u91cf\u5e76\u4e0d\u662f\u5728\u54ea\u4e2a\u4f4d\u7f6e\u90fd\u53ef\u4ee5\u8bbf\u95ee\u7684\uff0c\u8bbf\u95ee\u6743\u9650\u51b3\u5b9a\u4e8e\u8fd9\u4e2a\u53d8\u91cf\u662f\u5728\u54ea\u91cc\u8d4b\u503c\u7684\u3002 \u53d8\u91cf\u7684\u4f5c\u7528\u57df\u51b3\u5b9a\u4e86\u5728\u54ea\u4e00\u90e8\u5206\u7a0b\u5e8f\u53ef\u4ee5\u8bbf\u95ee\u54ea\u4e2a\u7279\u5b9a\u7684\u53d8\u91cf\u540d\u79f0\u3002Python\u7684\u4f5c\u7528\u57df\u4e00\u5171\u67094\u79cd\uff0c\u5206\u522b\u662f\uff1a L\uff08Local\uff09 \uff1a\u6700\u5185\u5c42\uff0c\u5305\u542b\u5c40\u90e8\u53d8\u91cf\uff0c\u6bd4\u5982\u4e00\u4e2a\u51fd\u6570/\u65b9\u6cd5\u5185\u90e8\u3002 E\uff08Enclosing\uff09 \uff1a\u5305\u542b\u4e86\u975e\u5c40\u90e8(non-local)\u4e5f\u975e\u5168\u5c40(non-global)\u7684\u53d8\u91cf\u3002\u6bd4\u5982\u4e24\u4e2a\u5d4c\u5957\u51fd\u6570\uff0c\u4e00\u4e2a\u51fd\u6570\uff08\u6216\u7c7b\uff09 A \u91cc\u9762\u53c8\u5305\u542b\u4e86\u4e00\u4e2a\u51fd\u6570 B \uff0c\u90a3\u4e48\u5bf9\u4e8e B \u4e2d\u7684\u540d\u79f0\u6765\u8bf4 A \u4e2d\u7684\u4f5c\u7528\u57df\u5c31\u4e3a nonlocal\u3002 G\uff08Global\uff09 \uff1a\u5f53\u524d\u811a\u672c\u7684\u6700\u5916\u5c42\uff0c\u6bd4\u5982\u5f53\u524d\u6a21\u5757\u7684\u5168\u5c40\u53d8\u91cf\u3002 B\uff08Built-in\uff09 \uff1a \u5305\u542b\u4e86\u5185\u5efa\u7684\u53d8\u91cf/\u5173\u952e\u5b57\u7b49\u3002\uff0c\u6700\u540e\u88ab\u641c\u7d22 \u89c4\u5219\u987a\u5e8f\uff1a L \u2013> E \u2013> G \u2013>gt; B \u3002 \u5728\u5c40\u90e8\u627e\u4e0d\u5230\uff0c\u4fbf\u4f1a\u53bb\u5c40\u90e8\u5916\u7684\u5c40\u90e8\u627e\uff08\u4f8b\u5982\u95ed\u5305\uff09\uff0c\u518d\u627e\u4e0d\u5230\u5c31\u4f1a\u53bb\u5168\u5c40\u627e\uff0c\u518d\u8005\u53bb\u5185\u7f6e\u4e2d\u627e\u3002 1.1.3 \u547d\u540d\u7a7a\u95f4\u548c\u4f5c\u7528\u57df\u793a\u4f8b \u00b6 \u4e2a\u4f8b\u5b50\u6f14\u793a\u4e86\u5982\u4f55\u5f15\u7528\u4e0d\u540c\u4f5c\u7528\u57df\u548c\u540d\u79f0\u7a7a\u95f4\uff0c\u4ee5\u53ca global \u548c nonlocal \u4f1a\u5982\u4f55\u5f71\u54cd\u53d8\u91cf\u7ed1\u5b9a: def scope_test (): def do_local (): spam = \"local spam\" def do_nonlocal (): nonlocal spam spam = \"nonlocal spam\" def do_global (): global spam spam = \"global spam\" spam = \"test spam\" do_local () print ( \"After local assignment:\" , spam ) do_nonlocal () print ( \"After nonlocal assignment:\" , spam ) do_global () print ( \"After global assignment:\" , spam ) scope_test () print ( \"In global scope:\" , spam ) # \u8f93\u51fa\u7ed3\u679c ''' After local assignment: test spam After nonlocal assignment: nonlocal spam After global assignment: nonlocal spam In global scope: global spam ''' \u8bf7\u6ce8\u610f: \u5c40\u90e8 \u8d4b\u503c\uff08\u8fd9\u662f\u9ed8\u8ba4\u72b6\u6001\uff09\u4e0d\u4f1a\u6539\u53d8 scope_test \u5bf9 spam \u7684\u7ed1\u5b9a\u3002 nonlocal \u8d4b\u503c\u4f1a\u6539\u53d8 scope_test \u5bf9 spam \u7684\u7ed1\u5b9a\uff0c\u800c global \u8d4b\u503c\u4f1a\u6539\u53d8\u6a21\u5757\u5c42\u7ea7\u7684\u7ed1\u5b9a\u3002 1.2 \u7c7b \u00b6 \u7b80\u4ecb \u7c7b(Class): \u7528\u6765\u63cf\u8ff0\u5177\u6709\u76f8\u540c\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u7684\u5bf9\u8c61\u7684\u96c6\u5408\u3002\u5b83\u5b9a\u4e49\u4e86\u8be5\u96c6\u5408\u4e2d\u6bcf\u4e2a\u5bf9\u8c61\u6240\u5171\u6709\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u3002\u5bf9\u8c61\u662f\u7c7b\u7684\u5b9e\u4f8b\u3002 \u65b9\u6cd5\uff1a \u7c7b\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u3002 \u7c7b\u53d8\u91cf\uff1a \u7c7b\u53d8\u91cf\u5728\u6574\u4e2a\u5b9e\u4f8b\u5316\u7684\u5bf9\u8c61\u4e2d\u662f\u516c\u7528\u7684\u3002\u7c7b\u53d8\u91cf\u5b9a\u4e49\u5728\u7c7b\u4e2d\u4e14\u5728\u51fd\u6570\u4f53\u4e4b\u5916\u3002\u7c7b\u53d8\u91cf\u901a\u5e38\u4e0d\u4f5c\u4e3a\u5b9e\u4f8b\u53d8\u91cf\u4f7f\u7528\u3002 \u6570\u636e\u6210\u5458\uff1a \u7c7b\u53d8\u91cf\u6216\u8005\u5b9e\u4f8b\u53d8\u91cf\u7528\u4e8e\u5904\u7406\u7c7b\u53ca\u5176\u5b9e\u4f8b\u5bf9\u8c61\u7684\u76f8\u5173\u7684\u6570\u636e\u3002 \u65b9\u6cd5\u91cd\u5199\uff1a \u5982\u679c\u4ece\u7236\u7c7b\u7ee7\u627f\u7684\u65b9\u6cd5\u4e0d\u80fd\u6ee1\u8db3\u5b50\u7c7b\u7684\u9700\u6c42\uff0c\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u6539\u5199\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53eb\u65b9\u6cd5\u7684\u8986\u76d6\uff08override\uff09\uff0c\u4e5f\u79f0\u4e3a\u65b9\u6cd5\u7684\u91cd\u5199\u3002 \u5c40\u90e8\u53d8\u91cf\uff1a \u5b9a\u4e49\u5728\u65b9\u6cd5\u4e2d\u7684\u53d8\u91cf\uff0c\u53ea\u4f5c\u7528\u4e8e\u5f53\u524d\u5b9e\u4f8b\u7684\u7c7b\u3002 \u5b9e\u4f8b\u53d8\u91cf\uff1a \u5728\u7c7b\u7684\u58f0\u660e\u4e2d\uff0c\u5c5e\u6027\u662f\u7528\u53d8\u91cf\u6765\u8868\u793a\u7684\uff0c\u8fd9\u79cd\u53d8\u91cf\u5c31\u79f0\u4e3a\u5b9e\u4f8b\u53d8\u91cf\uff0c\u5b9e\u4f8b\u53d8\u91cf\u5c31\u662f\u4e00\u4e2a\u7528 self \u4fee\u9970\u7684\u53d8\u91cf\u3002 \u7ee7\u627f\uff1a \u5373\u4e00\u4e2a\u6d3e\u751f\u7c7b\uff08derived class\uff09\u7ee7\u627f\u57fa\u7c7b\uff08base class\uff09\u7684\u5b57\u6bb5\u548c\u65b9\u6cd5\u3002\u7ee7\u627f\u4e5f\u5141\u8bb8\u628a\u4e00\u4e2a\u6d3e\u751f\u7c7b\u7684\u5bf9\u8c61\u4f5c\u4e3a\u4e00\u4e2a\u57fa\u7c7b\u5bf9\u8c61\u5bf9\u5f85\u3002\u4f8b\u5982\uff0c\u6709\u8fd9\u6837\u4e00\u4e2a\u8bbe\u8ba1\uff1a\u4e00\u4e2aDog\u7c7b\u578b\u7684\u5bf9\u8c61\u6d3e\u751f\u81eaAnimal\u7c7b\uff0c\u8fd9\u662f\u6a21\u62df\"\u662f\u4e00\u4e2a\uff08is-a\uff09\"\u5173\u7cfb\uff08\u4f8b\u56fe\uff0cDog\u662f\u4e00\u4e2aAnimal\uff09\u3002 \u5b9e\u4f8b\u5316\uff1a \u521b\u5efa\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\uff0c\u7c7b\u7684\u5177\u4f53\u5bf9\u8c61\u3002 \u5bf9\u8c61\uff1a \u901a\u8fc7\u7c7b\u5b9a\u4e49\u7684\u6570\u636e\u7ed3\u6784\u5b9e\u4f8b\u3002\u5bf9\u8c61\u5305\u62ec\u4e24\u4e2a\u6570\u636e\u6210\u5458\uff08\u7c7b\u53d8\u91cf\u548c\u5b9e\u4f8b\u53d8\u91cf\uff09\u548c\u65b9\u6cd5\u3002 1.2.1 \u7c7b\u5b9a\u4e49\u8bed\u6cd5 \u00b6 \u6700\u7b80\u5355\u7684\u7c7b\u5b9a\u4e49\u770b\u8d77\u6765\u50cf\u8fd9\u6837: class ClassName : < statement - 1 > . . . < statement - N > \u7c7b\u5b9a\u4e49\u4e0e\u51fd\u6570\u5b9a\u4e49 ( def \u8bed\u53e5) \u4e00\u6837\u5fc5\u987b\u88ab\u6267\u884c\u624d\u4f1a\u8d77\u4f5c\u7528\u3002\u5728\u7c7b\u5185\u90e8\u7684\u51fd\u6570\u5b9a\u4e49\u901a\u5e38\u5177\u6709\u4e00\u79cd\u7279\u522b\u5f62\u5f0f\u7684\u53c2\u6570\u5217\u8868\uff1b\u5f53\u8fdb\u5165\u7c7b\u5b9a\u4e49\u65f6\uff0c\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u5e76\u5c06\u5176\u7528\u4f5c\u5c40\u90e8\u4f5c\u7528\u57df\uff1b\u7c7b\u5b9e\u4f8b\u5316\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u5176\u5c5e\u6027\uff0c\u5b9e\u9645\u4e0a\uff0c\u521b\u5efa\u4e00\u4e2a\u7c7b\u4e4b\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u7c7b\u540d\u8bbf\u95ee\u5176\u5c5e\u6027\u3002 1.2.2 \u7c7b\u5bf9\u8c61 \u00b6 \u7c7b\u5bf9\u8c61\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a\u5c5e\u6027\u5f15\u7528\u548c\u5b9e\u4f8b\u5316\u3002 \u5c5e\u6027\u5f15\u7528 \u4f7f\u7528 Python \u4e2d\u6240\u6709\u5c5e\u6027\u5f15\u7528\u6240\u4f7f\u7528\u7684\u6807\u51c6\u8bed\u6cd5: obj.name \u3002 \u6709\u6548\u7684\u5c5e\u6027\u540d\u79f0\u662f\u7c7b\u5bf9\u8c61\u88ab\u521b\u5efa\u65f6\u5b58\u5728\u4e8e\u7c7b\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u6240\u6709\u540d\u79f0\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u7c7b\u5b9a\u4e49\u662f\u8fd9\u6837\u7684: class MyClass : \"\"\"A simple example class\"\"\" i = 12345 def f ( self ): return 'hello world' \u90a3\u4e48 MyClass.i \u548c MyClass.f \u5c31\u662f\u6709\u6548\u7684\u5c5e\u6027\u5f15\u7528\uff0c\u5c06\u5206\u522b\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u548c\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61\u3002 \u7c7b\u5c5e\u6027\u4e5f\u53ef\u4ee5\u88ab\u8d4b\u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u8d4b\u503c\u6765\u66f4\u6539 MyClass.i \u7684\u503c\u3002 __doc__ \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7684\u5c5e\u6027\uff0c Myclass.__doc__ \u5c06\u8fd4\u56de\u6240\u5c5e\u7c7b\u7684\u6587\u6863\u5b57\u7b26\u4e32: \"A simple example class\" \u3002 \u7c7b\u7684 \u5b9e\u4f8b\u5316 \u4f7f\u7528\u51fd\u6570\u8868\u793a\u6cd5\u3002 \u53ef\u4ee5\u628a\u7c7b\u5bf9\u8c61\u89c6\u4e3a\u662f\u8fd4\u56de\u8be5\u7c7b\u7684\u4e00\u4e2a\u65b0\u5b9e\u4f8b\u7684\u4e0d\u5e26\u53c2\u6570\u7684\u51fd\u6570\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff08\u5047\u8bbe\u4f7f\u7528\u4e0a\u8ff0\u7684\u7c7b\uff09: x = MyClass() \u521b\u5efa\u7c7b\u7684\u65b0 \u5b9e\u4f8b \u5e76\u5c06\u6b64\u5bf9\u8c61\u5206\u914d\u7ed9\u5c40\u90e8\u53d8\u91cf x \u3002 \u5b9e\u4f8b\u5316\u64cd\u4f5c\uff08\u201c\u8c03\u7528\u201d\u7c7b\u5bf9\u8c61\uff09\u4f1a\u521b\u5efa\u4e00\u4e2a\u7a7a\u5bf9\u8c61\u3002 \u8bb8\u591a\u7c7b\u559c\u6b22\u521b\u5efa\u5e26\u6709\u7279\u5b9a\u521d\u59cb\u72b6\u6001\u7684\u81ea\u5b9a\u4e49\u5b9e\u4f8b\u3002 \u4e3a\u6b64\u7c7b\u5b9a\u4e49\u53ef\u80fd\u5305\u542b\u4e00\u4e2a\u540d\u4e3a __init__() \u7684\u7279\u6b8a\u65b9\u6cd5\uff08\u6784\u9020\u65b9\u6cd5\uff09\uff0c\u5c31\u50cf\u8fd9\u6837: def __init__ ( self ): self . data = [] \u5f53\u4e00\u4e2a\u7c7b\u5b9a\u4e49\u4e86 __init__() \u65b9\u6cd5\u65f6\uff0c\u7c7b\u7684\u5b9e\u4f8b\u5316\u64cd\u4f5c\u4f1a\u81ea\u52a8\u4e3a\u65b0\u521b\u5efa\u7684\u7c7b\u5b9e\u4f8b\u53d1\u8d77\u8c03\u7528 __init__() \u3002 \u56e0\u6b64\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u8bed\u53e5\u83b7\u5f97\u4e00\u4e2a\u7ecf\u521d\u59cb\u5316\u7684\u65b0\u5b9e\u4f8b: x = MyClass() \u5f53\u7136\uff0c __init__() \u65b9\u6cd5\u8fd8\u53ef\u4ee5\u6709\u989d\u5916\u53c2\u6570\u4ee5\u5b9e\u73b0\u66f4\u9ad8\u7075\u6d3b\u6027\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u63d0\u4f9b\u7ed9\u7c7b\u5b9e\u4f8b\u5316\u8fd0\u7b97\u7b26\u7684\u53c2\u6570\u5c06\u88ab\u4f20\u9012\u7ed9 __init__() \u3002 \u4f8b\u5982\uff0c: class Complex : def __init__ ( self , realpart , imagpart ): self . r = realpart self . i = imagpart x = Complex ( 3.0 , - 4.5 ) print ( x . r , x . i ) # 3.0, -4.5 1.2.3 \u5b9e\u4f8b\u5bf9\u8c61 \u00b6 \u73b0\u5728\u6211\u4eec\u80fd\u7528\u5b9e\u4f8b\u5bf9\u8c61\u505a\u4ec0\u4e48\uff1f \u5b9e\u4f8b\u5bf9\u8c61\u7406\u89e3\u7684\u552f\u4e00\u64cd\u4f5c\u662f\u5c5e\u6027\u5f15\u7528\u3002 \u6709\u4e24\u79cd\u6709\u6548\u7684\u5c5e\u6027\u540d\u79f0\uff1a\u6570\u636e\u5c5e\u6027\u548c\u65b9\u6cd5\u3002 \u6570\u636e\u5c5e\u6027 \u5bf9\u5e94\u4e8e Smalltalk \u4e2d\u7684\u201c\u5b9e\u4f8b\u53d8\u91cf\u201d\uff0c\u4ee5\u53ca C++ \u4e2d\u7684\u201c\u6570\u636e\u6210\u5458\u201d\u3002 \u6570\u636e\u5c5e\u6027\u4e0d\u9700\u8981\u58f0\u660e\uff1b\u50cf\u5c40\u90e8\u53d8\u91cf\u4e00\u6837\uff0c\u5b83\u4eec\u5c06\u5728\u7b2c\u4e00\u6b21\u88ab\u8d4b\u503c\u65f6\u4ea7\u751f\u3002 \u4f8b\u5982\uff0c\u5982\u679c x \u662f\u4e0a\u9762\u521b\u5efa\u7684 MyClass \u7684\u5b9e\u4f8b\uff0c\u5219\u4ee5\u4e0b\u4ee3\u7801\u6bb5\u5c06\u6253\u5370\u6570\u503c 16 \uff0c\u4e14\u4e0d\u4fdd\u7559\u4efb\u4f55\u8ffd\u8e2a\u4fe1\u606f: x . counter = 1 while x . counter < 10 : x . counter = x . counter * 2 print ( x . counter ) del x . counter \u53e6\u4e00\u7c7b\u5b9e\u4f8b\u5c5e\u6027\u5f15\u7528\u79f0\u4e3a \u65b9\u6cd5 \u3002 \u65b9\u6cd5\u662f\u201c\u4ece\u5c5e\u4e8e\u201d\u5bf9\u8c61\u7684\u51fd\u6570\u3002 \uff08\u5728 Python \u4e2d\uff0c\u65b9\u6cd5\u8fd9\u4e2a\u672f\u8bed\u5e76\u4e0d\u662f\u7c7b\u5b9e\u4f8b\u6240\u7279\u6709\u7684\uff1a\u5176\u4ed6\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u6709\u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c\u5217\u8868\u5bf9\u8c61\u5177\u6709 append, insert, remove, sort \u7b49\u65b9\u6cd5\u3002 \u7136\u800c\uff0c\u5728\u4ee5\u4e0b\u8ba8\u8bba\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u65b9\u6cd5\u4e00\u8bcd\u5c06\u4e13\u6307\u7c7b\u5b9e\u4f8b\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u9664\u975e\u53e6\u5916\u663e\u5f0f\u5730\u8bf4\u660e\u3002\uff09 \u5b9e\u4f8b\u5bf9\u8c61\u7684\u6709\u6548\u65b9\u6cd5\u540d\u79f0\u4f9d\u8d56\u4e8e\u5176\u6240\u5c5e\u7684\u7c7b\u3002 \u6839\u636e\u5b9a\u4e49\uff0c\u4e00\u4e2a\u7c7b\u4e2d\u6240\u6709\u662f\u51fd\u6570\u5bf9\u8c61\u7684\u5c5e\u6027\u90fd\u662f\u5b9a\u4e49\u4e86\u5176\u5b9e\u4f8b\u7684\u76f8\u5e94\u65b9\u6cd5\u3002 \u56e0\u6b64\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c x.f \u662f\u6709\u6548\u7684\u65b9\u6cd5\u5f15\u7528\uff0c\u56e0\u4e3a MyClass.f \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u800c x.i \u4e0d\u662f\u65b9\u6cd5\uff0c\u56e0\u4e3a MyClass.i \u4e0d\u662f\u4e00\u4e2a\u51fd\u6570\u3002 \u4f46\u662f x.f \u4e0e MyClass.f \u5e76\u4e0d\u662f\u4e00\u56de\u4e8b\uff1a x.f \u662f\u4e00\u4e2a \u65b9\u6cd5\u5bf9\u8c61 \uff0c\u4e0d\u662f\u51fd\u6570\u5bf9\u8c61\u3002 1.2.4 self \u00b6 \u7c7b\u7684\u65b9\u6cd5\u4e0e\u666e\u901a\u7684\u51fd\u6570\u53ea\u6709\u4e00\u4e2a\u7279\u522b\u7684\u533a\u522b\uff1a\u5b83\u4eec\u5fc5\u987b\u6709\u4e00\u4e2a\u989d\u5916\u7684**\u7b2c\u4e00\u4e2a\u53c2\u6570\u540d\u79f0**, \u6309\u7167\u60ef\u4f8b\u5b83\u7684\u540d\u79f0\u662f self\u3002 class MyClass : \"\"\"A simple example class\"\"\" i = 12345 def f ( self ): print ( self ) print ( self . __class__ ) x = MyClass () x . f () # \u8f93\u51fa\u7ed3\u679c < __main__ . MyClass object at 0x000001FD7830AF70 > < class ' __main__ . MyClass '> \u7ed3\u679c\u4e3a\u7c7b\u7684\u5bf9\u8c61\uff0c\u4e0e\u4e4b\u524d\u663e\u793a\u4e3a \u7c7b\u7684\u5b9e\u4f8b \u4e0d\u540c\uff1b self \u4e0d\u662f python \u5173\u952e\u5b57\uff0c\u6211\u4eec\u628a\u4ed6\u6362\u6210 \u5176\u4ed6\u5b57\u7b26\u4e32\u4e5f\u662f\u53ef\u4ee5\u6b63\u5e38\u6267\u884c\u7684\uff1b self \u8fd9\u4e00\u540d\u79f0\u5728 Python \u4e2d\u7edd\u5bf9\u6ca1\u6709\u7279\u6b8a\u542b\u4e49\u3002 1.2.5 \u65b9\u6cd5\u5bf9\u8c61 \u00b6 \u901a\u5e38\uff0c\u65b9\u6cd5\u5728\u7ed1\u5b9a\u540e\u7acb\u5373\u88ab\u8c03\u7528: x . f () \u5728 MyClass \u793a\u4f8b\u4e2d\uff0c\u8fd9\u5c06\u8fd4\u56de\u5b57\u7b26\u4e32 'hello world' \u3002 \u4f46\u662f\uff0c\u7acb\u5373\u8c03\u7528\u4e00\u4e2a\u65b9\u6cd5\u5e76\u4e0d\u662f\u5fc5\u987b\u7684: x.f \u662f\u4e00\u4e2a\u65b9\u6cd5\u5bf9\u8c61\uff0c\u5b83\u53ef\u4ee5\u88ab\u4fdd\u5b58\u8d77\u6765\u4ee5\u540e\u518d\u8c03\u7528\u3002 \u4f8b\u5982: xf = x . f while True : print ( xf ()) \u5c06\u7ee7\u7eed\u6253\u5370 hello world \uff0c\u76f4\u5230\u7ed3\u675f\u3002 \u5f53\u4e00\u4e2a\u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\u5230\u5e95\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f \u4f60\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\u4e0a\u9762\u8c03\u7528 x.f() \u65f6\u5e76\u6ca1\u6709\u5e26\u53c2\u6570\uff0c\u867d\u7136 f() \u7684\u51fd\u6570\u5b9a\u4e49\u6307\u5b9a\u4e86\u4e00\u4e2a\u53c2\u6570\uff1b\u65b9\u6cd5\u7684\u7279\u6b8a\u4e4b\u5904\u5c31\u5728\u4e8e\u5b9e\u4f8b\u5bf9\u8c61\u4f1a\u4f5c\u4e3a\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u88ab\u4f20\u5165\u3002 1.2.6 \u7c7b\u548c\u5b9e\u4f8b\u53d8\u91cf \u00b6 \u4e00\u822c\u6765\u8bf4\uff0c\u5b9e\u4f8b\u53d8\u91cf\u7528\u4e8e\u6bcf\u4e2a\u5b9e\u4f8b\u7684\u552f\u4e00\u6570\u636e\uff0c\u800c**\u7c7b\u53d8\u91cf\u7528\u4e8e\u7c7b\u7684\u6240\u6709\u5b9e\u4f8b\u5171\u4eab\u7684\u5c5e\u6027\u548c\u65b9\u6cd5** : class Dog : kind = 'canine' # class variable shared by all instances def __init__ ( self , name ): self . name = name # instance variable unique to each instance >>> d = Dog ( 'Fido' ) >>> e = Dog ( 'Buddy' ) >>> d . kind # shared by all dogs 'canine' >>> e . kind # shared by all dogs 'canine' >>> d . name # unique to d 'Fido' >>> e . name # unique to e 'Buddy' 1.3 \u8865\u5145\u8bf4\u660e \u00b6 \u5982\u679c\u540c\u6837\u7684\u5c5e\u6027\u540d\u79f0\u540c\u65f6\u51fa\u73b0\u5728\u5b9e\u4f8b\u548c\u7c7b\u4e2d\uff0c\u5219\u5c5e\u6027\u67e5\u627e\u4f1a \u4f18\u5148\u9009\u62e9\u5b9e\u4f8b : >>> class Warehouse : purpose = 'storage' region = 'west' >>> w1 = Warehouse () >>> print ( w1 . purpose , w1 . region ) storage west >>> w2 = Warehouse () >>> w2 . region = 'east' >>> print ( w2 . purpose , w2 . region ) storage east \u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5e38\u5e38\u88ab\u547d\u540d\u4e3a self \u3002 \u8fd9\u4e5f\u4e0d\u8fc7\u5c31\u662f\u4e00\u4e2a\u7ea6\u5b9a: self \u8fd9\u4e00\u540d\u79f0\u5728 Python \u4e2d\u7edd\u5bf9\u6ca1\u6709\u7279\u6b8a\u542b\u4e49\u3002 \u4f46\u662f\u8981\u6ce8\u610f\uff0c\u4e0d\u9075\u5faa\u6b64\u7ea6\u5b9a\u4f1a\u4f7f\u5f97\u4f60\u7684\u4ee3\u7801\u5bf9\u5176\u4ed6 Python \u7a0b\u5e8f\u5458\u6765\u8bf4\u7f3a\u4e4f\u53ef\u8bfb\u6027\uff0c\u800c\u4e14\u4e5f\u53ef\u4ee5\u60f3\u50cf\u4e00\u4e2a \u7c7b\u6d4f\u89c8\u5668 \u7a0b\u5e8f\u7684\u7f16\u5199\u53ef\u80fd\u4f1a\u4f9d\u8d56\u4e8e\u8fd9\u6837\u7684\u7ea6\u5b9a\u3002 \u4efb\u4f55\u4e00\u4e2a\u4f5c\u4e3a\u7c7b\u5c5e\u6027\u7684\u51fd\u6570\u90fd\u4e3a\u8be5\u7c7b\u7684\u5b9e\u4f8b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u76f8\u5e94\u65b9\u6cd5\u3002 \u51fd\u6570\u5b9a\u4e49\u7684\u6587\u672c\u5e76\u975e\u5fc5\u987b\u5305\u542b\u4e8e\u7c7b\u5b9a\u4e49\u4e4b\u5185\uff1a\u5c06\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61\u8d4b\u503c\u7ed9\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u4e5f\u662f\u53ef\u4ee5\u7684 \u3002 \u4f8b\u5982: # Function defined outside the class def f1 ( self , x , y ): return min ( x , x + y ) class C : f = f1 def g ( self ): return 'hello world' h = g \u73b0\u5728 f , g \u548c h \u90fd\u662f C \u7c7b\u7684\u5f15\u7528\u51fd\u6570\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u56e0\u800c\u5b83\u4eec\u5c31\u90fd\u662f C \u7684\u5b9e\u4f8b\u7684\u65b9\u6cd5\uff0c\u5176\u4e2d h \u5b8c\u5168\u7b49\u540c\u4e8e g \u3002 \u4f46\u8bf7\u6ce8\u610f\uff0c\u672c\u793a\u4f8b\u7684\u505a\u6cd5\u901a\u5e38\u53ea\u4f1a\u4ee4\u7a0b\u5e8f\u7684\u9605\u8bfb\u8005\u611f\u5230\u8ff7\u60d1\u3002 \u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 self \u53c2\u6570\u7684\u65b9\u6cd5\u5c5e\u6027\u8c03\u7528\u5176\u4ed6\u65b9\u6cd5 : class Bag : def __init__ ( self ): self . data = [] def add ( self , x ): self . data . append ( x ) def addtwice ( self , x ): self . add ( x ) self . add ( x ) \u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u4e0e\u666e\u901a\u51fd\u6570\u76f8\u540c\u7684\u65b9\u5f0f\u5f15\u7528\u5168\u5c40\u540d\u79f0\u3002 \u4e0e\u65b9\u6cd5\u76f8\u5173\u8054\u7684\u5168\u5c40\u4f5c\u7528\u57df\u5c31\u662f\u5305\u542b\u5176\u5b9a\u4e49\u7684\u6a21\u5757\u3002 \uff08\u7c7b\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u4f5c\u4e3a\u5168\u5c40\u4f5c\u7528\u57df\u3002\uff09 1.4 \u7ee7\u627f \u00b6 \u5f53\u7136\uff0c\u5982\u679c\u4e0d\u652f\u6301\u7ee7\u627f\uff0c\u8bed\u8a00\u7279\u6027\u5c31\u4e0d\u503c\u5f97\u79f0\u4e3a\u201c\u7c7b\u201d\u3002\u6d3e\u751f\u7c7b\u5b9a\u4e49\u7684\u8bed\u6cd5\u5982\u4e0b\u6240\u793a: class DerivedClassName ( BaseClassName ): < statement - 1 > . . . < statement - N > \u540d\u79f0 BaseClassName \u5fc5\u987b\u5b9a\u4e49\u4e8e\u5305\u542b\u6d3e\u751f\u7c7b\u5b9a\u4e49\u7684\u4f5c\u7528\u57df\u4e2d\u3002 \u4e5f\u5141\u8bb8\u7528\u5176\u4ed6\u4efb\u610f\u8868\u8fbe\u5f0f\u4ee3\u66ff\u57fa\u7c7b\u540d\u79f0\u6240\u5728\u7684\u4f4d\u7f6e\u3002 \u8fd9\u6709\u65f6\u4e5f\u53ef\u80fd\u4f1a\u7528\u5f97\u4e0a\uff0c\u4f8b\u5982\uff0c\u5f53\u57fa\u7c7b\u5b9a\u4e49\u5728\u53e6\u4e00\u4e2a\u6a21\u5757\u4e2d\u7684\u65f6\u5019: class DerivedClassName ( modname . BaseClassName ): Python\u6709\u4e24\u4e2a\u5185\u7f6e\u51fd\u6570\u53ef\u88ab\u7528\u4e8e\u7ee7\u627f\u673a\u5236\uff1a \u4f7f\u7528 isinstance() \u6765\u68c0\u67e5\u4e00\u4e2a\u5b9e\u4f8b\u7684\u7c7b\u578b: isinstance(obj, int) \u4ec5\u4f1a\u5728 obj.__class__ \u4e3a int \u6216\u67d0\u4e2a\u6d3e\u751f\u81ea int \u7684\u7c7b\u65f6\u4e3a True \u3002 \u4f7f\u7528 issubclass() \u6765\u68c0\u67e5\u7c7b\u7684\u7ee7\u627f\u5173\u7cfb: issubclass(bool, int) \u4e3a True \uff0c\u56e0\u4e3a bool \u662f int \u7684\u5b50\u7c7b\u3002 \u4f46\u662f\uff0c issubclass(float, int) \u4e3a False \uff0c\u56e0\u4e3a float \u4e0d\u662f int \u7684\u5b50\u7c7b\u3002 \u5355\u7ee7\u627f\u5b9e\u4f8b\uff1a class Student : def __init__ ( self , n , a , address ): self . name = n self . age = a self . address = address def speak ( self ): print ( f '\u6211\u662f { self . name } \uff0c { self . age } \u5c81\u4e86\uff0c\u6765\u81ea { self . address } \u3002' ) # \u5355\u7ee7\u627f\u5b9e\u4f8b class Grade ( Student ): def __init__ ( self , n , a , address , g ): # \u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570 Student . __init__ ( self , n , a , address ) self . grade = g # \u8986\u76d6\u7236\u7c7b\u7684\u65b9\u6cd5 def speak ( self ): print ( f '\u6211\u662f { self . name } \uff0c { self . age } \u5c81\u4e86\uff0c\u6765\u81ea { self . address } \uff0c\u73b0\u5728\u8bfb { self . grade } \u3002' ) s = Grade ( '\u5c0f\u738b' , 18 , '\u5317\u4eac' , '\u5927\u4e00' ) s . speak () # \u6211\u662f\u5c0f\u738b\uff0c18\u5c81\u4e86\uff0c\u6765\u81ea\u5317\u4eac\uff0c\u73b0\u5728\u8bfb\u5927\u4e00\u3002 \u591a\u91cd\u7ee7\u627f \u591a\u7ee7\u627f\u7684\u7c7b\u5b9a\u4e49\u5f62\u5982\u4e0b\u4f8b: class DerivedClassName ( Base1 , Base2 , Base3 ): < statement - 1 > . . . < statement - N > \u9700\u8981\u6ce8\u610f\u5706\u62ec\u53f7\u4e2d\u7236\u7c7b\u7684\u987a\u5e8f\uff0c\u82e5\u662f\u7236\u7c7b\u4e2d\u6709\u76f8\u540c\u7684\u65b9\u6cd5\u540d\uff0c\u800c\u5728\u5b50\u7c7b\u4f7f\u7528\u65f6\u672a\u6307\u5b9a\uff0cpython\u4ece\u5de6\u81f3\u53f3\u641c\u7d22 \u5373\u65b9\u6cd5\u5728\u5b50\u7c7b\u4e2d\u672a\u627e\u5230\u65f6\uff0c\u4ece\u5de6\u5230\u53f3\u67e5\u627e\u7236\u7c7b\u4e2d\u662f\u5426\u5305\u542b\u65b9\u6cd5\u3002 class Student : def __init__ ( self , n , a , address ): self . name = n self . age = a self . address = address def speak ( self ): print ( f '\u6211\u662f { self . name } \uff0c { self . age } \u5c81\u4e86\uff0c\u6765\u81ea { self . address } \u3002' ) # \u5355\u7ee7\u627f\u5b9e\u4f8b class Grade ( Student ): def __init__ ( self , n , a , address , g ): # \u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570 Student . __init__ ( self , n , a , address ) self . grade = g # \u8986\u76d6\u7236\u7c7b\u7684\u65b9\u6cd5 def speak ( self ): print ( f '\u6211\u662f { self . name } \uff0c { self . age } \u5c81\u4e86\uff0c\u6765\u81ea { self . address } \uff0c\u73b0\u5728\u8bfb { self . grade } \u3002' ) # \u53e6\u4e00\u4e2a\u7c7b class Hobbys : def __init__ ( self , n , h ): self . name = n self . hobby = h def speak ( self ): print ( f '\u6211\u662f { self . name } \uff0c\u6211\u7684\u7231\u597d\u662f { self . hobby } ' ) # \u591a\u91cd\u7ee7\u627f class Test ( Hobbys , Student ): def __init__ ( self , n , a , address , h ): Student . __init__ ( self , n , a , address ) Hobbys . __init__ ( self , n , h ) s = Test ( '\u5c0f\u738b' , 18 , '\u5317\u4eac' , '\u5531\u6b4c' ) s . speak () # Test\u5b50\u7c7b\u672a\u6307\u5b9aspeak\u65b9\u6cd5\uff0c\u9ed8\u8ba4\u8c03\u7528\u7684\u662f\u5728\u62ec\u53f7\u4e2d\u6392\u524d\u5730\u7236\u7c7b\u7684\u65b9\u6cd5\u3002 # \u6211\u662f\u5c0f\u738b\uff0c\u6211\u7684\u7231\u597d\u662f\u5531\u6b4c\u3002 1.5 \u79c1\u6709\u53d8\u91cf \u00b6 __private_attrs \uff1a\u4e24\u4e2a\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u58f0\u660e\u8be5\u5c5e\u6027\u4e3a\u79c1\u6709\uff0c\u4e0d\u80fd\u5728\u7c7b\u7684\u5916\u90e8\u88ab\u4f7f\u7528\u6216\u76f4\u63a5\u8bbf\u95ee\u3002\u5728\u7c7b\u5185\u90e8\u7684\u65b9\u6cd5\u4e2d\u4f7f\u7528\u65f6 self.__private_attrs \u3002 __private_method \uff1a\u4e24\u4e2a\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u58f0\u660e\u8be5\u65b9\u6cd5\u4e3a\u79c1\u6709\u65b9\u6cd5\uff0c\u53ea\u80fd\u5728\u7c7b\u7684\u5185\u90e8\u8c03\u7528 \uff0c\u4e0d\u80fd\u5728\u7c7b\u7684\u5916\u90e8\u8c03\u7528\u3002 self.__private_methods \u3002 class Site : def __init__ ( self , name , url ): self . name = name self . __url = url # \u79c1\u6709\u5c5e\u6027 def who ( self ): print ( 'name : ' , self . name ) print ( 'url : ' , self . __url ) # \u7c7b\u5185\u90e8\u4f7f\u7528\u79c1\u6709\u5c5e\u6027 def __foo ( self ): # \u79c1\u6709\u65b9\u6cd5 print ( '\u8fd9\u662f\u79c1\u6709\u65b9\u6cd5' ) def foo ( self ): # \u516c\u5171\u65b9\u6cd5 print ( '\u8fd9\u662f\u516c\u5171\u65b9\u6cd5' ) self . __foo () # \u7c7b\u5185\u90e8\u4f7f\u7528\u79c1\u6709\u65b9\u6cd5 x = Site ( 'Python' , 'www.python.org/' ) x . who () # \u6b63\u5e38\u8f93\u51fa ''' name : Python url : www.python.org/ ''' x . foo () # \u6b63\u5e38\u8f93\u51fa ''' \u8fd9\u662f\u516c\u5171\u65b9\u6cd5 \u8fd9\u662f\u79c1\u6709\u65b9\u6cd5 ''' # x.__url # \u62a5\u9519 # x.__foo() # \u62a5\u9519 \u7c7b\u7684\u4e13\u6709\u65b9\u6cd5\uff1a __init__ \u6784\u9020\u51fd\u6570\uff0c\u5728\u751f\u6210\u5bf9\u8c61\u65f6\u8c03\u7528 __del__ \u6790\u6784\u51fd\u6570\uff0c\u91ca\u653e\u5bf9\u8c61\u65f6\u4f7f\u7528 __repr__ \u6253\u5370\uff0c\u8f6c\u6362 __setitem__ \u6309\u7167\u7d22\u5f15\u8d4b\u503c __getitem__ \u6309\u7167\u7d22\u5f15\u83b7\u53d6\u503c __len__ \u83b7\u5f97\u957f\u5ea6 __cmp__ \u6bd4\u8f83\u8fd0\u7b97 __call__ \u51fd\u6570\u8c03\u7528 __add__ \u52a0\u8fd0\u7b97 __sub__ \u51cf\u8fd0\u7b97 __mul__ \u4e58\u8fd0\u7b97 __truediv__ \u9664\u8fd0\u7b97 __mod__ \u6c42\u4f59\u8fd0\u7b97 __pow__ \u4e58\u65b9 1.6 \u8fed\u4ee3\u5668 \u00b6 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\u5927\u591a\u6570\u5bb9\u5668\u5bf9\u8c61\u90fd\u53ef\u4ee5\u4f7f\u7528 for \u8bed\u53e5: for element in [ 1 , 2 , 3 ]: print ( element ) for element in ( 1 , 2 , 3 ): print ( element ) for key in { 'one' : 1 , 'two' : 2 }: print ( key ) for char in \"123\" : print ( char ) for line in open ( \"myfile.txt\" ): print ( line , end = '' ) \u8fd9\u79cd\u8bbf\u95ee\u98ce\u683c\u6e05\u6670\u3001\u7b80\u6d01\u53c8\u65b9\u4fbf\u3002 \u8fed\u4ee3\u5668\u7684\u4f7f\u7528\u975e\u5e38\u666e\u904d\u5e76\u4f7f\u5f97 Python \u6210\u4e3a\u4e00\u4e2a\u7edf\u4e00\u7684\u6574\u4f53\u3002 \u5728\u5e55\u540e\uff0c for \u8bed\u53e5\u4f1a\u5728\u5bb9\u5668\u5bf9\u8c61\u4e0a\u8c03\u7528 iter() \u3002 \u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5b9a\u4e49\u4e86 __next__() \u65b9\u6cd5\u7684\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u6b64\u65b9\u6cd5\u5c06\u9010\u4e00\u8bbf\u95ee\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u3002 \u5f53\u5143\u7d20\u7528\u5c3d\u65f6\uff0c __next__() \u5c06\u5f15\u53d1 StopIteration \u5f02\u5e38\u6765\u901a\u77e5\u7ec8\u6b62 for \u5faa\u73af\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 next() \u5185\u7f6e\u51fd\u6570\u6765\u8c03\u7528 __next__() \u65b9\u6cd5\uff1b\u8fd9\u4e2a\u4f8b\u5b50\u663e\u793a\u4e86\u5b83\u7684\u8fd0\u4f5c\u65b9\u5f0f: >>> s = 'abc' >>> it = iter ( s ) >>> it < iterator object at 0x00A1DB50 > >>> next ( it ) 'a' >>> next ( it ) 'b' >>> next ( it ) 'c' >>> next ( it ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > next ( it ) StopIteration \u770b\u8fc7\u8fed\u4ee3\u5668\u534f\u8bae\u7684\u5e55\u540e\u673a\u5236\uff0c\u7ed9\u4f60\u7684\u7c7b\u6dfb\u52a0\u8fed\u4ee3\u5668\u884c\u4e3a\u5c31\u5f88\u5bb9\u6613\u4e86\u3002 \u5b9a\u4e49\u4e00\u4e2a __iter__() \u65b9\u6cd5\u6765\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709 __next__() \u65b9\u6cd5\u7684\u5bf9\u8c61\u3002 \u5982\u679c\u7c7b\u5df2\u5b9a\u4e49\u4e86 __next__() \uff0c\u5219 __iter__() \u53ef\u4ee5\u7b80\u5355\u5730\u8fd4\u56de self : class Reverse : \"\"\"Iterator for looping over a sequence backwards.\"\"\" def __init__ ( self , data ): self . data = data self . index = len ( data ) def __iter__ ( self ): return self def __next__ ( self ): if self . index == 0 : raise StopIteration self . index = self . index - 1 return self . data [ self . index ] >>> rev = Reverse ( 'spam' ) >>> iter ( rev ) < __main__ . Reverse object at 0x00A1DB50 > >>> for char in rev : ... print ( char ) ... m a p s 1.7 \u751f\u6210\u5668 \u00b6 \u751f\u6210\u5668 \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u8fed\u4ee3\u5668\u7684\u7b80\u5355\u800c\u5f3a\u5927\u7684\u5de5\u5177\u3002 \u5b83\u4eec\u7684\u5199\u6cd5\u7c7b\u4f3c\u4e8e\u6807\u51c6\u7684\u51fd\u6570\uff0c\u4f46\u5f53\u5b83\u4eec\u8981\u8fd4\u56de\u6570\u636e\u65f6\u4f1a\u4f7f\u7528 yield \u8bed\u53e5\u3002 \u6bcf\u6b21\u5728\u751f\u6210\u5668\u4e0a\u8c03\u7528 next() \u65f6\uff0c\u5b83\u4f1a\u4ece\u4e0a\u6b21\u79bb\u5f00\u7684\u4f4d\u7f6e\u6062\u590d\u6267\u884c\uff08\u5b83\u4f1a\u8bb0\u4f4f\u4e0a\u6b21\u6267\u884c\u8bed\u53e5\u65f6\u7684\u6240\u6709\u6570\u636e\u503c\uff09\u3002 \u4e00\u4e2a\u663e\u793a\u5982\u4f55\u975e\u5e38\u5bb9\u6613\u5730\u521b\u5efa\u751f\u6210\u5668\u7684\u793a\u4f8b\u5982\u4e0b: def reverse ( data ): for index in range ( len ( data ) - 1 , - 1 , - 1 ): yield data [ index ] >>> for char in reverse ( 'golf' ): ... print ( char ) ... f l o g \u53ef\u4ee5\u7528\u751f\u6210\u5668\u6765\u5b8c\u6210\u7684\u64cd\u4f5c\u540c\u6837\u53ef\u4ee5\u7528\u524d\u4e00\u8282\u6240\u63cf\u8ff0\u7684\u57fa\u4e8e\u7c7b\u7684\u8fed\u4ee3\u5668\u6765\u5b8c\u6210\u3002 \u4f46\u751f\u6210\u5668\u7684\u5199\u6cd5\u66f4\u4e3a\u7d27\u51d1\uff0c\u56e0\u4e3a\u5b83\u4f1a\u81ea\u52a8\u521b\u5efa __iter__() \u548c __next__() \u65b9\u6cd5\u3002 \u53e6\u4e00\u4e2a\u5173\u952e\u7279\u6027\u5728\u4e8e\u5c40\u90e8\u53d8\u91cf\u548c\u6267\u884c\u72b6\u6001\u4f1a\u5728\u6bcf\u6b21\u8c03\u7528\u4e4b\u95f4\u81ea\u52a8\u4fdd\u5b58\u3002 \u8fd9\u4f7f\u5f97\u8be5\u51fd\u6570\u76f8\u6bd4\u4f7f\u7528 self.index \u548c self.data \u8fd9\u79cd\u5b9e\u4f8b\u53d8\u91cf\u7684\u65b9\u5f0f\u66f4\u6613\u7f16\u5199\u4e14\u66f4\u4e3a\u6e05\u6670\u3002 \u9664\u4e86\u4f1a\u81ea\u52a8\u521b\u5efa\u65b9\u6cd5\u548c\u4fdd\u5b58\u7a0b\u5e8f\u72b6\u6001\uff0c\u5f53\u751f\u6210\u5668\u7ec8\u7ed3\u65f6\uff0c\u5b83\u4eec\u8fd8\u4f1a\u81ea\u52a8\u5f15\u53d1 StopIteration \u3002 \u8fd9\u4e9b\u7279\u6027\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4f7f\u5f97\u521b\u5efa\u8fed\u4ee3\u5668\u80fd\u4e0e\u7f16\u5199\u5e38\u89c4\u51fd\u6570\u4e00\u6837\u5bb9\u6613\u3002 1.8 \u751f\u6210\u5668\u8868\u8fbe\u5f0f \u00b6 \u67d0\u4e9b\u7b80\u5355\u7684\u751f\u6210\u5668\u53ef\u4ee5\u5199\u6210\u7b80\u6d01\u7684\u8868\u8fbe\u5f0f\u4ee3\u7801\uff0c\u6240\u7528\u8bed\u6cd5\u7c7b\u4f3c\u5217\u8868\u63a8\u5bfc\u5f0f\uff0c\u4f46\u5916\u5c42\u4e3a\u5706\u62ec\u53f7\u800c\u975e\u65b9\u62ec\u53f7\u3002 \u8fd9\u79cd\u8868\u8fbe\u5f0f\u88ab\u8bbe\u8ba1\u7528\u4e8e\u751f\u6210\u5668\u5c06\u7acb\u5373\u88ab\u5916\u5c42\u51fd\u6570\u6240\u4f7f\u7528\u7684\u60c5\u51b5\u3002 \u751f\u6210\u5668\u8868\u8fbe\u5f0f\u76f8\u6bd4\u5b8c\u6574\u7684\u751f\u6210\u5668\u66f4\u7d27\u51d1\u4f46\u8f83\u4e0d\u7075\u6d3b\uff0c\u76f8\u6bd4\u7b49\u6548\u7684\u5217\u8868\u63a8\u5bfc\u5f0f\u5219\u66f4\u4e3a\u8282\u7701\u5185\u5b58\u3002 \u4f8b\u5982: >>> sum ( i * i for i in range ( 10 )) # sum of squares 285 >>> xvec = [ 10 , 20 , 30 ] >>> yvec = [ 7 , 5 , 3 ] >>> sum ( x * y for x , y in zip ( xvec , yvec )) # dot product 260 >>> unique_words = set ( word for line in page for word in line . split ()) >>> valedictorian = max (( student . gpa , student . name ) for student in graduates ) >>> data = 'golf' >>> list ( data [ i ] for i in range ( len ( data ) - 1 , - 1 , - 1 )) [ 'f' , 'l' , 'o' , 'g' ]","title":"\u7c7b"},{"location":"python%E5%9F%BA%E7%A1%80/%E7%B1%BB/#_1","text":"\u7c7b\u628a\u6570\u636e\u4e0e\u529f\u80fd\u7ed1\u5b9a\u5728\u4e00\u8d77\u3002\u521b\u5efa\u65b0\u7c7b\u5c31\u662f\u521b\u5efa\u65b0\u7684\u5bf9\u8c61 \u7c7b\u578b \uff0c\u4ece\u800c\u521b\u5efa\u8be5\u7c7b\u578b\u7684\u65b0 \u5b9e\u4f8b \u3002\u7c7b\u5b9e\u4f8b\u5177\u6709\u591a\u79cd\u4fdd\u6301\u81ea\u8eab\u72b6\u6001\u7684\u5c5e\u6027\u3002\u7c7b\u5b9e\u4f8b\u8fd8\u652f\u6301\uff08\u5728\u7c7b\u4e2d\u5b9a\u4e49\u7684\uff09\u6539\u53d8\u81ea\u8eab\u72b6\u6001\u7684\u65b9\u6cd5\u3002","title":"\u7c7b"},{"location":"python%E5%9F%BA%E7%A1%80/%E7%B1%BB/#11","text":"\u5728\u4ecb\u7ecd\u7c7b\u4e4b\u524d\uff0c\u9996\u5148\u4ecb\u7ecd\u4e00\u4e9b Python \u7684\u4f5c\u7528\u57df\u89c4\u5219\u3002\u7c7b\u5b9a\u4e49\u5bf9\u547d\u540d\u7a7a\u95f4\u6709\u4e00\u4e9b\u5de7\u5999\u7684\u6280\u5de7\uff0c\u4f60\u9700\u8981\u77e5\u9053\u4f5c\u7528\u57df\u548c\u547d\u540d\u7a7a\u95f4\u5982\u4f55\u5de5\u4f5c\u624d\u80fd\u5b8c\u5168\u7406\u89e3\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\u3002","title":"1.1 \u547d\u540d\u7a7a\u95f4\u548c\u4f5c\u7528\u57df"},{"location":"python%E5%9F%BA%E7%A1%80/%E7%B1%BB/#111","text":"namespace \uff08 \u547d\u540d\u7a7a\u95f4 \uff09\u662f\u4e00\u4e2a\u4ece\u540d\u5b57\u5230\u5bf9\u8c61\u7684\u6620\u5c04\uff1b\u5927\u90e8\u5206\u547d\u540d\u7a7a\u95f4\u5f53\u524d\u90fd\u7531 Python\u5b57\u5178 \u5b9e\u73b0\uff0c\u4f46\u4e00\u822c\u60c5\u51b5\u4e0b\u57fa\u672c\u4e0d\u4f1a\u53bb\u5173\u6ce8\u5b83\u4eec\uff08\u9664\u4e86\u8981\u9762\u5bf9\u6027\u80fd\u95ee\u9898\u65f6\uff09\uff0c\u800c\u4e14\u4e5f\u6709\u53ef\u80fd\u5728\u5c06\u6765\u66f4\u6539\u3002 \u547d\u540d\u7a7a\u95f4\u63d0\u4f9b\u4e86\u5728\u9879\u76ee\u4e2d\u907f\u514d\u540d\u5b57\u51b2\u7a81\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u5404\u4e2a\u547d\u540d\u7a7a\u95f4\u662f\u72ec\u7acb\u7684\uff0c\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684\uff0c\u6240\u4ee5\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u4e0d\u80fd\u6709\u91cd\u540d\uff0c\u4f46\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u662f\u53ef\u4ee5\u91cd\u540d\u800c\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\u3002 \u51e0\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u4f8b\u5b50\uff1a \u5185\u7f6e\u540d\u79f0\uff08built-in names \uff09\uff0c \u5b58\u653e\u5185\u7f6e\u51fd\u6570\u7684\u96c6\u5408\uff0c\u6bd4\u5982\u51fd\u6570\u540d abs \u3001 char \u548c\u5f02\u5e38\u540d\u79f0 BaseException \u3001 Exception \u7b49\u7b49\u3002 \u5168\u5c40\u540d\u79f0\uff08global names\uff09 \uff0c\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u8bb0\u5f55\u4e86\u6a21\u5757\u7684\u53d8\u91cf\uff0c\u5305\u62ec\u51fd\u6570\u3001\u7c7b\u3001\u5176\u5b83\u5bfc\u5165\u7684\u6a21\u5757\u3001\u6a21\u5757\u7ea7\u7684\u53d8\u91cf\u548c\u5e38\u91cf\u3002 \u5c40\u90e8\u540d\u79f0\uff08local names\uff09 \uff0c\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u8bb0\u5f55\u4e86\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u5305\u62ec\u51fd\u6570\u7684\u53c2\u6570\u548c\u5c40\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u3002\uff08\u7c7b\u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\u4e5f\u662f\uff09 \u547d\u540d\u7a7a\u95f4\u67e5\u627e\u987a\u5e8f: \u5047\u8bbe\u6211\u4eec\u8981\u4f7f\u7528\u53d8\u91cf fibo\uff0c\u5219 Python \u7684\u67e5\u627e\u987a\u5e8f\u4e3a\uff1a \u5c40\u90e8\u7684\u547d\u540d\u7a7a\u95f4\u53bb -> \u5168\u5c40\u547d\u540d\u7a7a\u95f4 -> \u5185\u7f6e\u547d\u540d\u7a7a\u95f4 \u3002 \u5982\u679c\u627e\u4e0d\u5230\u53d8\u91cf fibo\uff0c\u5b83\u5c06\u653e\u5f03\u67e5\u627e\u5e76\u5f15\u53d1\u4e00\u4e2a NameError \u5f02\u5e38: >>> fibo Traceback ( most recent call last ): File \"<pyshell#0>\" , line 1 , in < module > fibo NameError : name 'fibo' is not defined \u547d\u540d\u7a7a\u95f4\u7684\u751f\u547d\u5468\u671f\uff1a \u5728\u4e0d\u540c\u65f6\u523b\u521b\u5efa\u7684\u547d\u540d\u7a7a\u95f4\u62e5\u6709\u4e0d\u540c\u7684\u751f\u5b58\u671f\u3002\u5305\u542b\u5185\u7f6e\u540d\u79f0\u7684\u547d\u540d\u7a7a\u95f4\u662f\u5728 Python \u89e3\u91ca\u5668\u542f\u52a8\u65f6\u521b\u5efa\u7684\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u5220\u9664\u3002\u6a21\u5757\u7684\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u5728\u6a21\u5757\u5b9a\u4e49\u88ab\u8bfb\u5165\u65f6\u521b\u5efa\uff1b\u901a\u5e38\uff0c\u6a21\u5757\u547d\u540d\u7a7a\u95f4\u4e5f\u4f1a\u6301\u7eed\u5230\u89e3\u91ca\u5668\u9000\u51fa\u3002\u88ab\u89e3\u91ca\u5668\u7684\u9876\u5c42\u8c03\u7528\u6267\u884c\u7684\u8bed\u53e5\uff0c\u4ece\u4e00\u4e2a\u811a\u672c\u6587\u4ef6\u8bfb\u53d6\u6216\u4ea4\u4e92\u5f0f\u5730\u8bfb\u53d6\uff0c\u88ab\u8ba4\u4e3a\u662f __main__ \u6a21\u5757\u8c03\u7528\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u5b83\u4eec\u62e5\u6709\u81ea\u5df1\u7684\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u3002\uff08\u5185\u7f6e\u540d\u79f0\u5b9e\u9645\u4e0a\u4e5f\u5b58\u5728\u4e8e\u4e00\u4e2a\u6a21\u5757\u4e2d\uff1b\u8fd9\u4e2a\u6a21\u5757\u79f0\u4f5c builtins \u3002\uff09 \u4e00\u4e2a\u51fd\u6570\u7684\u672c\u5730\u547d\u540d\u7a7a\u95f4\u5728\u8fd9\u4e2a\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u521b\u5efa\uff0c\u5e76\u5728\u51fd\u6570\u8fd4\u56de\u6216\u629b\u51fa\u4e00\u4e2a\u4e0d\u5728\u51fd\u6570\u5185\u90e8\u5904\u7406\u7684\u9519\u8bef\u65f6\u88ab\u5220\u9664\u3002\u5f53\u7136\uff0c\u6bcf\u6b21\u9012\u5f52\u8c03\u7528\u90fd\u4f1a\u6709\u5b83\u81ea\u5df1\u7684\u672c\u5730\u547d\u540d\u7a7a\u95f4\u3002","title":"1.1.1 \u547d\u540d\u7a7a\u95f4"},{"location":"python%E5%9F%BA%E7%A1%80/%E7%B1%BB/#112","text":"\u4e00\u4e2a \u4f5c\u7528\u57df \u662f\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u53ef\u76f4\u63a5\u8bbf\u95ee\u7684 Python \u7a0b\u5e8f\u7684\u6587\u672c\u533a\u57df\u3002 \u8fd9\u91cc\u7684 \u201c\u53ef\u76f4\u63a5\u8bbf\u95ee\u201d \u610f\u5473\u7740\u5bf9\u540d\u79f0\u7684\u975e\u9650\u5b9a\u5f15\u7528\u4f1a\u5c1d\u8bd5\u5728\u547d\u540d\u7a7a\u95f4\u4e2d\u67e5\u627e\u540d\u79f0\u3002 \u5728\u4e00\u4e2a python \u7a0b\u5e8f\u4e2d\uff0c\u76f4\u63a5\u8bbf\u95ee\u4e00\u4e2a\u53d8\u91cf\uff0c\u4f1a\u4ece\u5185\u5230\u5916\u4f9d\u6b21\u8bbf\u95ee\u6240\u6709\u7684\u4f5c\u7528\u57df\u76f4\u5230\u627e\u5230\uff0c\u5426\u5219\u4f1a\u62a5\u672a\u5b9a\u4e49\u7684\u9519\u8bef\u3002 Python \u4e2d\uff0c\u7a0b\u5e8f\u7684\u53d8\u91cf\u5e76\u4e0d\u662f\u5728\u54ea\u4e2a\u4f4d\u7f6e\u90fd\u53ef\u4ee5\u8bbf\u95ee\u7684\uff0c\u8bbf\u95ee\u6743\u9650\u51b3\u5b9a\u4e8e\u8fd9\u4e2a\u53d8\u91cf\u662f\u5728\u54ea\u91cc\u8d4b\u503c\u7684\u3002 \u53d8\u91cf\u7684\u4f5c\u7528\u57df\u51b3\u5b9a\u4e86\u5728\u54ea\u4e00\u90e8\u5206\u7a0b\u5e8f\u53ef\u4ee5\u8bbf\u95ee\u54ea\u4e2a\u7279\u5b9a\u7684\u53d8\u91cf\u540d\u79f0\u3002Python\u7684\u4f5c\u7528\u57df\u4e00\u5171\u67094\u79cd\uff0c\u5206\u522b\u662f\uff1a L\uff08Local\uff09 \uff1a\u6700\u5185\u5c42\uff0c\u5305\u542b\u5c40\u90e8\u53d8\u91cf\uff0c\u6bd4\u5982\u4e00\u4e2a\u51fd\u6570/\u65b9\u6cd5\u5185\u90e8\u3002 E\uff08Enclosing\uff09 \uff1a\u5305\u542b\u4e86\u975e\u5c40\u90e8(non-local)\u4e5f\u975e\u5168\u5c40(non-global)\u7684\u53d8\u91cf\u3002\u6bd4\u5982\u4e24\u4e2a\u5d4c\u5957\u51fd\u6570\uff0c\u4e00\u4e2a\u51fd\u6570\uff08\u6216\u7c7b\uff09 A \u91cc\u9762\u53c8\u5305\u542b\u4e86\u4e00\u4e2a\u51fd\u6570 B \uff0c\u90a3\u4e48\u5bf9\u4e8e B \u4e2d\u7684\u540d\u79f0\u6765\u8bf4 A \u4e2d\u7684\u4f5c\u7528\u57df\u5c31\u4e3a nonlocal\u3002 G\uff08Global\uff09 \uff1a\u5f53\u524d\u811a\u672c\u7684\u6700\u5916\u5c42\uff0c\u6bd4\u5982\u5f53\u524d\u6a21\u5757\u7684\u5168\u5c40\u53d8\u91cf\u3002 B\uff08Built-in\uff09 \uff1a \u5305\u542b\u4e86\u5185\u5efa\u7684\u53d8\u91cf/\u5173\u952e\u5b57\u7b49\u3002\uff0c\u6700\u540e\u88ab\u641c\u7d22 \u89c4\u5219\u987a\u5e8f\uff1a L \u2013> E \u2013> G \u2013>gt; B \u3002 \u5728\u5c40\u90e8\u627e\u4e0d\u5230\uff0c\u4fbf\u4f1a\u53bb\u5c40\u90e8\u5916\u7684\u5c40\u90e8\u627e\uff08\u4f8b\u5982\u95ed\u5305\uff09\uff0c\u518d\u627e\u4e0d\u5230\u5c31\u4f1a\u53bb\u5168\u5c40\u627e\uff0c\u518d\u8005\u53bb\u5185\u7f6e\u4e2d\u627e\u3002","title":"1.1.2 \u4f5c\u7528\u57df"},{"location":"python%E5%9F%BA%E7%A1%80/%E7%B1%BB/#113","text":"\u4e2a\u4f8b\u5b50\u6f14\u793a\u4e86\u5982\u4f55\u5f15\u7528\u4e0d\u540c\u4f5c\u7528\u57df\u548c\u540d\u79f0\u7a7a\u95f4\uff0c\u4ee5\u53ca global \u548c nonlocal \u4f1a\u5982\u4f55\u5f71\u54cd\u53d8\u91cf\u7ed1\u5b9a: def scope_test (): def do_local (): spam = \"local spam\" def do_nonlocal (): nonlocal spam spam = \"nonlocal spam\" def do_global (): global spam spam = \"global spam\" spam = \"test spam\" do_local () print ( \"After local assignment:\" , spam ) do_nonlocal () print ( \"After nonlocal assignment:\" , spam ) do_global () print ( \"After global assignment:\" , spam ) scope_test () print ( \"In global scope:\" , spam ) # \u8f93\u51fa\u7ed3\u679c ''' After local assignment: test spam After nonlocal assignment: nonlocal spam After global assignment: nonlocal spam In global scope: global spam ''' \u8bf7\u6ce8\u610f: \u5c40\u90e8 \u8d4b\u503c\uff08\u8fd9\u662f\u9ed8\u8ba4\u72b6\u6001\uff09\u4e0d\u4f1a\u6539\u53d8 scope_test \u5bf9 spam \u7684\u7ed1\u5b9a\u3002 nonlocal \u8d4b\u503c\u4f1a\u6539\u53d8 scope_test \u5bf9 spam \u7684\u7ed1\u5b9a\uff0c\u800c global \u8d4b\u503c\u4f1a\u6539\u53d8\u6a21\u5757\u5c42\u7ea7\u7684\u7ed1\u5b9a\u3002","title":"1.1.3 \u547d\u540d\u7a7a\u95f4\u548c\u4f5c\u7528\u57df\u793a\u4f8b"},{"location":"python%E5%9F%BA%E7%A1%80/%E7%B1%BB/#12","text":"\u7b80\u4ecb \u7c7b(Class): \u7528\u6765\u63cf\u8ff0\u5177\u6709\u76f8\u540c\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u7684\u5bf9\u8c61\u7684\u96c6\u5408\u3002\u5b83\u5b9a\u4e49\u4e86\u8be5\u96c6\u5408\u4e2d\u6bcf\u4e2a\u5bf9\u8c61\u6240\u5171\u6709\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u3002\u5bf9\u8c61\u662f\u7c7b\u7684\u5b9e\u4f8b\u3002 \u65b9\u6cd5\uff1a \u7c7b\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u3002 \u7c7b\u53d8\u91cf\uff1a \u7c7b\u53d8\u91cf\u5728\u6574\u4e2a\u5b9e\u4f8b\u5316\u7684\u5bf9\u8c61\u4e2d\u662f\u516c\u7528\u7684\u3002\u7c7b\u53d8\u91cf\u5b9a\u4e49\u5728\u7c7b\u4e2d\u4e14\u5728\u51fd\u6570\u4f53\u4e4b\u5916\u3002\u7c7b\u53d8\u91cf\u901a\u5e38\u4e0d\u4f5c\u4e3a\u5b9e\u4f8b\u53d8\u91cf\u4f7f\u7528\u3002 \u6570\u636e\u6210\u5458\uff1a \u7c7b\u53d8\u91cf\u6216\u8005\u5b9e\u4f8b\u53d8\u91cf\u7528\u4e8e\u5904\u7406\u7c7b\u53ca\u5176\u5b9e\u4f8b\u5bf9\u8c61\u7684\u76f8\u5173\u7684\u6570\u636e\u3002 \u65b9\u6cd5\u91cd\u5199\uff1a \u5982\u679c\u4ece\u7236\u7c7b\u7ee7\u627f\u7684\u65b9\u6cd5\u4e0d\u80fd\u6ee1\u8db3\u5b50\u7c7b\u7684\u9700\u6c42\uff0c\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u6539\u5199\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53eb\u65b9\u6cd5\u7684\u8986\u76d6\uff08override\uff09\uff0c\u4e5f\u79f0\u4e3a\u65b9\u6cd5\u7684\u91cd\u5199\u3002 \u5c40\u90e8\u53d8\u91cf\uff1a \u5b9a\u4e49\u5728\u65b9\u6cd5\u4e2d\u7684\u53d8\u91cf\uff0c\u53ea\u4f5c\u7528\u4e8e\u5f53\u524d\u5b9e\u4f8b\u7684\u7c7b\u3002 \u5b9e\u4f8b\u53d8\u91cf\uff1a \u5728\u7c7b\u7684\u58f0\u660e\u4e2d\uff0c\u5c5e\u6027\u662f\u7528\u53d8\u91cf\u6765\u8868\u793a\u7684\uff0c\u8fd9\u79cd\u53d8\u91cf\u5c31\u79f0\u4e3a\u5b9e\u4f8b\u53d8\u91cf\uff0c\u5b9e\u4f8b\u53d8\u91cf\u5c31\u662f\u4e00\u4e2a\u7528 self \u4fee\u9970\u7684\u53d8\u91cf\u3002 \u7ee7\u627f\uff1a \u5373\u4e00\u4e2a\u6d3e\u751f\u7c7b\uff08derived class\uff09\u7ee7\u627f\u57fa\u7c7b\uff08base class\uff09\u7684\u5b57\u6bb5\u548c\u65b9\u6cd5\u3002\u7ee7\u627f\u4e5f\u5141\u8bb8\u628a\u4e00\u4e2a\u6d3e\u751f\u7c7b\u7684\u5bf9\u8c61\u4f5c\u4e3a\u4e00\u4e2a\u57fa\u7c7b\u5bf9\u8c61\u5bf9\u5f85\u3002\u4f8b\u5982\uff0c\u6709\u8fd9\u6837\u4e00\u4e2a\u8bbe\u8ba1\uff1a\u4e00\u4e2aDog\u7c7b\u578b\u7684\u5bf9\u8c61\u6d3e\u751f\u81eaAnimal\u7c7b\uff0c\u8fd9\u662f\u6a21\u62df\"\u662f\u4e00\u4e2a\uff08is-a\uff09\"\u5173\u7cfb\uff08\u4f8b\u56fe\uff0cDog\u662f\u4e00\u4e2aAnimal\uff09\u3002 \u5b9e\u4f8b\u5316\uff1a \u521b\u5efa\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\uff0c\u7c7b\u7684\u5177\u4f53\u5bf9\u8c61\u3002 \u5bf9\u8c61\uff1a \u901a\u8fc7\u7c7b\u5b9a\u4e49\u7684\u6570\u636e\u7ed3\u6784\u5b9e\u4f8b\u3002\u5bf9\u8c61\u5305\u62ec\u4e24\u4e2a\u6570\u636e\u6210\u5458\uff08\u7c7b\u53d8\u91cf\u548c\u5b9e\u4f8b\u53d8\u91cf\uff09\u548c\u65b9\u6cd5\u3002","title":"1.2 \u7c7b"},{"location":"python%E5%9F%BA%E7%A1%80/%E7%B1%BB/#121","text":"\u6700\u7b80\u5355\u7684\u7c7b\u5b9a\u4e49\u770b\u8d77\u6765\u50cf\u8fd9\u6837: class ClassName : < statement - 1 > . . . < statement - N > \u7c7b\u5b9a\u4e49\u4e0e\u51fd\u6570\u5b9a\u4e49 ( def \u8bed\u53e5) \u4e00\u6837\u5fc5\u987b\u88ab\u6267\u884c\u624d\u4f1a\u8d77\u4f5c\u7528\u3002\u5728\u7c7b\u5185\u90e8\u7684\u51fd\u6570\u5b9a\u4e49\u901a\u5e38\u5177\u6709\u4e00\u79cd\u7279\u522b\u5f62\u5f0f\u7684\u53c2\u6570\u5217\u8868\uff1b\u5f53\u8fdb\u5165\u7c7b\u5b9a\u4e49\u65f6\uff0c\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u5e76\u5c06\u5176\u7528\u4f5c\u5c40\u90e8\u4f5c\u7528\u57df\uff1b\u7c7b\u5b9e\u4f8b\u5316\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u5176\u5c5e\u6027\uff0c\u5b9e\u9645\u4e0a\uff0c\u521b\u5efa\u4e00\u4e2a\u7c7b\u4e4b\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u7c7b\u540d\u8bbf\u95ee\u5176\u5c5e\u6027\u3002","title":"1.2.1 \u7c7b\u5b9a\u4e49\u8bed\u6cd5"},{"location":"python%E5%9F%BA%E7%A1%80/%E7%B1%BB/#122","text":"\u7c7b\u5bf9\u8c61\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a\u5c5e\u6027\u5f15\u7528\u548c\u5b9e\u4f8b\u5316\u3002 \u5c5e\u6027\u5f15\u7528 \u4f7f\u7528 Python \u4e2d\u6240\u6709\u5c5e\u6027\u5f15\u7528\u6240\u4f7f\u7528\u7684\u6807\u51c6\u8bed\u6cd5: obj.name \u3002 \u6709\u6548\u7684\u5c5e\u6027\u540d\u79f0\u662f\u7c7b\u5bf9\u8c61\u88ab\u521b\u5efa\u65f6\u5b58\u5728\u4e8e\u7c7b\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u6240\u6709\u540d\u79f0\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u7c7b\u5b9a\u4e49\u662f\u8fd9\u6837\u7684: class MyClass : \"\"\"A simple example class\"\"\" i = 12345 def f ( self ): return 'hello world' \u90a3\u4e48 MyClass.i \u548c MyClass.f \u5c31\u662f\u6709\u6548\u7684\u5c5e\u6027\u5f15\u7528\uff0c\u5c06\u5206\u522b\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u548c\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61\u3002 \u7c7b\u5c5e\u6027\u4e5f\u53ef\u4ee5\u88ab\u8d4b\u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u8d4b\u503c\u6765\u66f4\u6539 MyClass.i \u7684\u503c\u3002 __doc__ \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7684\u5c5e\u6027\uff0c Myclass.__doc__ \u5c06\u8fd4\u56de\u6240\u5c5e\u7c7b\u7684\u6587\u6863\u5b57\u7b26\u4e32: \"A simple example class\" \u3002 \u7c7b\u7684 \u5b9e\u4f8b\u5316 \u4f7f\u7528\u51fd\u6570\u8868\u793a\u6cd5\u3002 \u53ef\u4ee5\u628a\u7c7b\u5bf9\u8c61\u89c6\u4e3a\u662f\u8fd4\u56de\u8be5\u7c7b\u7684\u4e00\u4e2a\u65b0\u5b9e\u4f8b\u7684\u4e0d\u5e26\u53c2\u6570\u7684\u51fd\u6570\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff08\u5047\u8bbe\u4f7f\u7528\u4e0a\u8ff0\u7684\u7c7b\uff09: x = MyClass() \u521b\u5efa\u7c7b\u7684\u65b0 \u5b9e\u4f8b \u5e76\u5c06\u6b64\u5bf9\u8c61\u5206\u914d\u7ed9\u5c40\u90e8\u53d8\u91cf x \u3002 \u5b9e\u4f8b\u5316\u64cd\u4f5c\uff08\u201c\u8c03\u7528\u201d\u7c7b\u5bf9\u8c61\uff09\u4f1a\u521b\u5efa\u4e00\u4e2a\u7a7a\u5bf9\u8c61\u3002 \u8bb8\u591a\u7c7b\u559c\u6b22\u521b\u5efa\u5e26\u6709\u7279\u5b9a\u521d\u59cb\u72b6\u6001\u7684\u81ea\u5b9a\u4e49\u5b9e\u4f8b\u3002 \u4e3a\u6b64\u7c7b\u5b9a\u4e49\u53ef\u80fd\u5305\u542b\u4e00\u4e2a\u540d\u4e3a __init__() \u7684\u7279\u6b8a\u65b9\u6cd5\uff08\u6784\u9020\u65b9\u6cd5\uff09\uff0c\u5c31\u50cf\u8fd9\u6837: def __init__ ( self ): self . data = [] \u5f53\u4e00\u4e2a\u7c7b\u5b9a\u4e49\u4e86 __init__() \u65b9\u6cd5\u65f6\uff0c\u7c7b\u7684\u5b9e\u4f8b\u5316\u64cd\u4f5c\u4f1a\u81ea\u52a8\u4e3a\u65b0\u521b\u5efa\u7684\u7c7b\u5b9e\u4f8b\u53d1\u8d77\u8c03\u7528 __init__() \u3002 \u56e0\u6b64\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u8bed\u53e5\u83b7\u5f97\u4e00\u4e2a\u7ecf\u521d\u59cb\u5316\u7684\u65b0\u5b9e\u4f8b: x = MyClass() \u5f53\u7136\uff0c __init__() \u65b9\u6cd5\u8fd8\u53ef\u4ee5\u6709\u989d\u5916\u53c2\u6570\u4ee5\u5b9e\u73b0\u66f4\u9ad8\u7075\u6d3b\u6027\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u63d0\u4f9b\u7ed9\u7c7b\u5b9e\u4f8b\u5316\u8fd0\u7b97\u7b26\u7684\u53c2\u6570\u5c06\u88ab\u4f20\u9012\u7ed9 __init__() \u3002 \u4f8b\u5982\uff0c: class Complex : def __init__ ( self , realpart , imagpart ): self . r = realpart self . i = imagpart x = Complex ( 3.0 , - 4.5 ) print ( x . r , x . i ) # 3.0, -4.5","title":"1.2.2 \u7c7b\u5bf9\u8c61"},{"location":"python%E5%9F%BA%E7%A1%80/%E7%B1%BB/#123","text":"\u73b0\u5728\u6211\u4eec\u80fd\u7528\u5b9e\u4f8b\u5bf9\u8c61\u505a\u4ec0\u4e48\uff1f \u5b9e\u4f8b\u5bf9\u8c61\u7406\u89e3\u7684\u552f\u4e00\u64cd\u4f5c\u662f\u5c5e\u6027\u5f15\u7528\u3002 \u6709\u4e24\u79cd\u6709\u6548\u7684\u5c5e\u6027\u540d\u79f0\uff1a\u6570\u636e\u5c5e\u6027\u548c\u65b9\u6cd5\u3002 \u6570\u636e\u5c5e\u6027 \u5bf9\u5e94\u4e8e Smalltalk \u4e2d\u7684\u201c\u5b9e\u4f8b\u53d8\u91cf\u201d\uff0c\u4ee5\u53ca C++ \u4e2d\u7684\u201c\u6570\u636e\u6210\u5458\u201d\u3002 \u6570\u636e\u5c5e\u6027\u4e0d\u9700\u8981\u58f0\u660e\uff1b\u50cf\u5c40\u90e8\u53d8\u91cf\u4e00\u6837\uff0c\u5b83\u4eec\u5c06\u5728\u7b2c\u4e00\u6b21\u88ab\u8d4b\u503c\u65f6\u4ea7\u751f\u3002 \u4f8b\u5982\uff0c\u5982\u679c x \u662f\u4e0a\u9762\u521b\u5efa\u7684 MyClass \u7684\u5b9e\u4f8b\uff0c\u5219\u4ee5\u4e0b\u4ee3\u7801\u6bb5\u5c06\u6253\u5370\u6570\u503c 16 \uff0c\u4e14\u4e0d\u4fdd\u7559\u4efb\u4f55\u8ffd\u8e2a\u4fe1\u606f: x . counter = 1 while x . counter < 10 : x . counter = x . counter * 2 print ( x . counter ) del x . counter \u53e6\u4e00\u7c7b\u5b9e\u4f8b\u5c5e\u6027\u5f15\u7528\u79f0\u4e3a \u65b9\u6cd5 \u3002 \u65b9\u6cd5\u662f\u201c\u4ece\u5c5e\u4e8e\u201d\u5bf9\u8c61\u7684\u51fd\u6570\u3002 \uff08\u5728 Python \u4e2d\uff0c\u65b9\u6cd5\u8fd9\u4e2a\u672f\u8bed\u5e76\u4e0d\u662f\u7c7b\u5b9e\u4f8b\u6240\u7279\u6709\u7684\uff1a\u5176\u4ed6\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u6709\u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c\u5217\u8868\u5bf9\u8c61\u5177\u6709 append, insert, remove, sort \u7b49\u65b9\u6cd5\u3002 \u7136\u800c\uff0c\u5728\u4ee5\u4e0b\u8ba8\u8bba\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u65b9\u6cd5\u4e00\u8bcd\u5c06\u4e13\u6307\u7c7b\u5b9e\u4f8b\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u9664\u975e\u53e6\u5916\u663e\u5f0f\u5730\u8bf4\u660e\u3002\uff09 \u5b9e\u4f8b\u5bf9\u8c61\u7684\u6709\u6548\u65b9\u6cd5\u540d\u79f0\u4f9d\u8d56\u4e8e\u5176\u6240\u5c5e\u7684\u7c7b\u3002 \u6839\u636e\u5b9a\u4e49\uff0c\u4e00\u4e2a\u7c7b\u4e2d\u6240\u6709\u662f\u51fd\u6570\u5bf9\u8c61\u7684\u5c5e\u6027\u90fd\u662f\u5b9a\u4e49\u4e86\u5176\u5b9e\u4f8b\u7684\u76f8\u5e94\u65b9\u6cd5\u3002 \u56e0\u6b64\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c x.f \u662f\u6709\u6548\u7684\u65b9\u6cd5\u5f15\u7528\uff0c\u56e0\u4e3a MyClass.f \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u800c x.i \u4e0d\u662f\u65b9\u6cd5\uff0c\u56e0\u4e3a MyClass.i \u4e0d\u662f\u4e00\u4e2a\u51fd\u6570\u3002 \u4f46\u662f x.f \u4e0e MyClass.f \u5e76\u4e0d\u662f\u4e00\u56de\u4e8b\uff1a x.f \u662f\u4e00\u4e2a \u65b9\u6cd5\u5bf9\u8c61 \uff0c\u4e0d\u662f\u51fd\u6570\u5bf9\u8c61\u3002","title":"1.2.3 \u5b9e\u4f8b\u5bf9\u8c61"},{"location":"python%E5%9F%BA%E7%A1%80/%E7%B1%BB/#124-self","text":"\u7c7b\u7684\u65b9\u6cd5\u4e0e\u666e\u901a\u7684\u51fd\u6570\u53ea\u6709\u4e00\u4e2a\u7279\u522b\u7684\u533a\u522b\uff1a\u5b83\u4eec\u5fc5\u987b\u6709\u4e00\u4e2a\u989d\u5916\u7684**\u7b2c\u4e00\u4e2a\u53c2\u6570\u540d\u79f0**, \u6309\u7167\u60ef\u4f8b\u5b83\u7684\u540d\u79f0\u662f self\u3002 class MyClass : \"\"\"A simple example class\"\"\" i = 12345 def f ( self ): print ( self ) print ( self . __class__ ) x = MyClass () x . f () # \u8f93\u51fa\u7ed3\u679c < __main__ . MyClass object at 0x000001FD7830AF70 > < class ' __main__ . MyClass '> \u7ed3\u679c\u4e3a\u7c7b\u7684\u5bf9\u8c61\uff0c\u4e0e\u4e4b\u524d\u663e\u793a\u4e3a \u7c7b\u7684\u5b9e\u4f8b \u4e0d\u540c\uff1b self \u4e0d\u662f python \u5173\u952e\u5b57\uff0c\u6211\u4eec\u628a\u4ed6\u6362\u6210 \u5176\u4ed6\u5b57\u7b26\u4e32\u4e5f\u662f\u53ef\u4ee5\u6b63\u5e38\u6267\u884c\u7684\uff1b self \u8fd9\u4e00\u540d\u79f0\u5728 Python \u4e2d\u7edd\u5bf9\u6ca1\u6709\u7279\u6b8a\u542b\u4e49\u3002","title":"1.2.4 self"},{"location":"python%E5%9F%BA%E7%A1%80/%E7%B1%BB/#125","text":"\u901a\u5e38\uff0c\u65b9\u6cd5\u5728\u7ed1\u5b9a\u540e\u7acb\u5373\u88ab\u8c03\u7528: x . f () \u5728 MyClass \u793a\u4f8b\u4e2d\uff0c\u8fd9\u5c06\u8fd4\u56de\u5b57\u7b26\u4e32 'hello world' \u3002 \u4f46\u662f\uff0c\u7acb\u5373\u8c03\u7528\u4e00\u4e2a\u65b9\u6cd5\u5e76\u4e0d\u662f\u5fc5\u987b\u7684: x.f \u662f\u4e00\u4e2a\u65b9\u6cd5\u5bf9\u8c61\uff0c\u5b83\u53ef\u4ee5\u88ab\u4fdd\u5b58\u8d77\u6765\u4ee5\u540e\u518d\u8c03\u7528\u3002 \u4f8b\u5982: xf = x . f while True : print ( xf ()) \u5c06\u7ee7\u7eed\u6253\u5370 hello world \uff0c\u76f4\u5230\u7ed3\u675f\u3002 \u5f53\u4e00\u4e2a\u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\u5230\u5e95\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f \u4f60\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\u4e0a\u9762\u8c03\u7528 x.f() \u65f6\u5e76\u6ca1\u6709\u5e26\u53c2\u6570\uff0c\u867d\u7136 f() \u7684\u51fd\u6570\u5b9a\u4e49\u6307\u5b9a\u4e86\u4e00\u4e2a\u53c2\u6570\uff1b\u65b9\u6cd5\u7684\u7279\u6b8a\u4e4b\u5904\u5c31\u5728\u4e8e\u5b9e\u4f8b\u5bf9\u8c61\u4f1a\u4f5c\u4e3a\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u88ab\u4f20\u5165\u3002","title":"1.2.5 \u65b9\u6cd5\u5bf9\u8c61"},{"location":"python%E5%9F%BA%E7%A1%80/%E7%B1%BB/#126","text":"\u4e00\u822c\u6765\u8bf4\uff0c\u5b9e\u4f8b\u53d8\u91cf\u7528\u4e8e\u6bcf\u4e2a\u5b9e\u4f8b\u7684\u552f\u4e00\u6570\u636e\uff0c\u800c**\u7c7b\u53d8\u91cf\u7528\u4e8e\u7c7b\u7684\u6240\u6709\u5b9e\u4f8b\u5171\u4eab\u7684\u5c5e\u6027\u548c\u65b9\u6cd5** : class Dog : kind = 'canine' # class variable shared by all instances def __init__ ( self , name ): self . name = name # instance variable unique to each instance >>> d = Dog ( 'Fido' ) >>> e = Dog ( 'Buddy' ) >>> d . kind # shared by all dogs 'canine' >>> e . kind # shared by all dogs 'canine' >>> d . name # unique to d 'Fido' >>> e . name # unique to e 'Buddy'","title":"1.2.6 \u7c7b\u548c\u5b9e\u4f8b\u53d8\u91cf"},{"location":"python%E5%9F%BA%E7%A1%80/%E7%B1%BB/#13","text":"\u5982\u679c\u540c\u6837\u7684\u5c5e\u6027\u540d\u79f0\u540c\u65f6\u51fa\u73b0\u5728\u5b9e\u4f8b\u548c\u7c7b\u4e2d\uff0c\u5219\u5c5e\u6027\u67e5\u627e\u4f1a \u4f18\u5148\u9009\u62e9\u5b9e\u4f8b : >>> class Warehouse : purpose = 'storage' region = 'west' >>> w1 = Warehouse () >>> print ( w1 . purpose , w1 . region ) storage west >>> w2 = Warehouse () >>> w2 . region = 'east' >>> print ( w2 . purpose , w2 . region ) storage east \u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5e38\u5e38\u88ab\u547d\u540d\u4e3a self \u3002 \u8fd9\u4e5f\u4e0d\u8fc7\u5c31\u662f\u4e00\u4e2a\u7ea6\u5b9a: self \u8fd9\u4e00\u540d\u79f0\u5728 Python \u4e2d\u7edd\u5bf9\u6ca1\u6709\u7279\u6b8a\u542b\u4e49\u3002 \u4f46\u662f\u8981\u6ce8\u610f\uff0c\u4e0d\u9075\u5faa\u6b64\u7ea6\u5b9a\u4f1a\u4f7f\u5f97\u4f60\u7684\u4ee3\u7801\u5bf9\u5176\u4ed6 Python \u7a0b\u5e8f\u5458\u6765\u8bf4\u7f3a\u4e4f\u53ef\u8bfb\u6027\uff0c\u800c\u4e14\u4e5f\u53ef\u4ee5\u60f3\u50cf\u4e00\u4e2a \u7c7b\u6d4f\u89c8\u5668 \u7a0b\u5e8f\u7684\u7f16\u5199\u53ef\u80fd\u4f1a\u4f9d\u8d56\u4e8e\u8fd9\u6837\u7684\u7ea6\u5b9a\u3002 \u4efb\u4f55\u4e00\u4e2a\u4f5c\u4e3a\u7c7b\u5c5e\u6027\u7684\u51fd\u6570\u90fd\u4e3a\u8be5\u7c7b\u7684\u5b9e\u4f8b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u76f8\u5e94\u65b9\u6cd5\u3002 \u51fd\u6570\u5b9a\u4e49\u7684\u6587\u672c\u5e76\u975e\u5fc5\u987b\u5305\u542b\u4e8e\u7c7b\u5b9a\u4e49\u4e4b\u5185\uff1a\u5c06\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61\u8d4b\u503c\u7ed9\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u4e5f\u662f\u53ef\u4ee5\u7684 \u3002 \u4f8b\u5982: # Function defined outside the class def f1 ( self , x , y ): return min ( x , x + y ) class C : f = f1 def g ( self ): return 'hello world' h = g \u73b0\u5728 f , g \u548c h \u90fd\u662f C \u7c7b\u7684\u5f15\u7528\u51fd\u6570\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u56e0\u800c\u5b83\u4eec\u5c31\u90fd\u662f C \u7684\u5b9e\u4f8b\u7684\u65b9\u6cd5\uff0c\u5176\u4e2d h \u5b8c\u5168\u7b49\u540c\u4e8e g \u3002 \u4f46\u8bf7\u6ce8\u610f\uff0c\u672c\u793a\u4f8b\u7684\u505a\u6cd5\u901a\u5e38\u53ea\u4f1a\u4ee4\u7a0b\u5e8f\u7684\u9605\u8bfb\u8005\u611f\u5230\u8ff7\u60d1\u3002 \u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 self \u53c2\u6570\u7684\u65b9\u6cd5\u5c5e\u6027\u8c03\u7528\u5176\u4ed6\u65b9\u6cd5 : class Bag : def __init__ ( self ): self . data = [] def add ( self , x ): self . data . append ( x ) def addtwice ( self , x ): self . add ( x ) self . add ( x ) \u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u4e0e\u666e\u901a\u51fd\u6570\u76f8\u540c\u7684\u65b9\u5f0f\u5f15\u7528\u5168\u5c40\u540d\u79f0\u3002 \u4e0e\u65b9\u6cd5\u76f8\u5173\u8054\u7684\u5168\u5c40\u4f5c\u7528\u57df\u5c31\u662f\u5305\u542b\u5176\u5b9a\u4e49\u7684\u6a21\u5757\u3002 \uff08\u7c7b\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u4f5c\u4e3a\u5168\u5c40\u4f5c\u7528\u57df\u3002\uff09","title":"1.3 \u8865\u5145\u8bf4\u660e"},{"location":"python%E5%9F%BA%E7%A1%80/%E7%B1%BB/#14","text":"\u5f53\u7136\uff0c\u5982\u679c\u4e0d\u652f\u6301\u7ee7\u627f\uff0c\u8bed\u8a00\u7279\u6027\u5c31\u4e0d\u503c\u5f97\u79f0\u4e3a\u201c\u7c7b\u201d\u3002\u6d3e\u751f\u7c7b\u5b9a\u4e49\u7684\u8bed\u6cd5\u5982\u4e0b\u6240\u793a: class DerivedClassName ( BaseClassName ): < statement - 1 > . . . < statement - N > \u540d\u79f0 BaseClassName \u5fc5\u987b\u5b9a\u4e49\u4e8e\u5305\u542b\u6d3e\u751f\u7c7b\u5b9a\u4e49\u7684\u4f5c\u7528\u57df\u4e2d\u3002 \u4e5f\u5141\u8bb8\u7528\u5176\u4ed6\u4efb\u610f\u8868\u8fbe\u5f0f\u4ee3\u66ff\u57fa\u7c7b\u540d\u79f0\u6240\u5728\u7684\u4f4d\u7f6e\u3002 \u8fd9\u6709\u65f6\u4e5f\u53ef\u80fd\u4f1a\u7528\u5f97\u4e0a\uff0c\u4f8b\u5982\uff0c\u5f53\u57fa\u7c7b\u5b9a\u4e49\u5728\u53e6\u4e00\u4e2a\u6a21\u5757\u4e2d\u7684\u65f6\u5019: class DerivedClassName ( modname . BaseClassName ): Python\u6709\u4e24\u4e2a\u5185\u7f6e\u51fd\u6570\u53ef\u88ab\u7528\u4e8e\u7ee7\u627f\u673a\u5236\uff1a \u4f7f\u7528 isinstance() \u6765\u68c0\u67e5\u4e00\u4e2a\u5b9e\u4f8b\u7684\u7c7b\u578b: isinstance(obj, int) \u4ec5\u4f1a\u5728 obj.__class__ \u4e3a int \u6216\u67d0\u4e2a\u6d3e\u751f\u81ea int \u7684\u7c7b\u65f6\u4e3a True \u3002 \u4f7f\u7528 issubclass() \u6765\u68c0\u67e5\u7c7b\u7684\u7ee7\u627f\u5173\u7cfb: issubclass(bool, int) \u4e3a True \uff0c\u56e0\u4e3a bool \u662f int \u7684\u5b50\u7c7b\u3002 \u4f46\u662f\uff0c issubclass(float, int) \u4e3a False \uff0c\u56e0\u4e3a float \u4e0d\u662f int \u7684\u5b50\u7c7b\u3002 \u5355\u7ee7\u627f\u5b9e\u4f8b\uff1a class Student : def __init__ ( self , n , a , address ): self . name = n self . age = a self . address = address def speak ( self ): print ( f '\u6211\u662f { self . name } \uff0c { self . age } \u5c81\u4e86\uff0c\u6765\u81ea { self . address } \u3002' ) # \u5355\u7ee7\u627f\u5b9e\u4f8b class Grade ( Student ): def __init__ ( self , n , a , address , g ): # \u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570 Student . __init__ ( self , n , a , address ) self . grade = g # \u8986\u76d6\u7236\u7c7b\u7684\u65b9\u6cd5 def speak ( self ): print ( f '\u6211\u662f { self . name } \uff0c { self . age } \u5c81\u4e86\uff0c\u6765\u81ea { self . address } \uff0c\u73b0\u5728\u8bfb { self . grade } \u3002' ) s = Grade ( '\u5c0f\u738b' , 18 , '\u5317\u4eac' , '\u5927\u4e00' ) s . speak () # \u6211\u662f\u5c0f\u738b\uff0c18\u5c81\u4e86\uff0c\u6765\u81ea\u5317\u4eac\uff0c\u73b0\u5728\u8bfb\u5927\u4e00\u3002 \u591a\u91cd\u7ee7\u627f \u591a\u7ee7\u627f\u7684\u7c7b\u5b9a\u4e49\u5f62\u5982\u4e0b\u4f8b: class DerivedClassName ( Base1 , Base2 , Base3 ): < statement - 1 > . . . < statement - N > \u9700\u8981\u6ce8\u610f\u5706\u62ec\u53f7\u4e2d\u7236\u7c7b\u7684\u987a\u5e8f\uff0c\u82e5\u662f\u7236\u7c7b\u4e2d\u6709\u76f8\u540c\u7684\u65b9\u6cd5\u540d\uff0c\u800c\u5728\u5b50\u7c7b\u4f7f\u7528\u65f6\u672a\u6307\u5b9a\uff0cpython\u4ece\u5de6\u81f3\u53f3\u641c\u7d22 \u5373\u65b9\u6cd5\u5728\u5b50\u7c7b\u4e2d\u672a\u627e\u5230\u65f6\uff0c\u4ece\u5de6\u5230\u53f3\u67e5\u627e\u7236\u7c7b\u4e2d\u662f\u5426\u5305\u542b\u65b9\u6cd5\u3002 class Student : def __init__ ( self , n , a , address ): self . name = n self . age = a self . address = address def speak ( self ): print ( f '\u6211\u662f { self . name } \uff0c { self . age } \u5c81\u4e86\uff0c\u6765\u81ea { self . address } \u3002' ) # \u5355\u7ee7\u627f\u5b9e\u4f8b class Grade ( Student ): def __init__ ( self , n , a , address , g ): # \u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570 Student . __init__ ( self , n , a , address ) self . grade = g # \u8986\u76d6\u7236\u7c7b\u7684\u65b9\u6cd5 def speak ( self ): print ( f '\u6211\u662f { self . name } \uff0c { self . age } \u5c81\u4e86\uff0c\u6765\u81ea { self . address } \uff0c\u73b0\u5728\u8bfb { self . grade } \u3002' ) # \u53e6\u4e00\u4e2a\u7c7b class Hobbys : def __init__ ( self , n , h ): self . name = n self . hobby = h def speak ( self ): print ( f '\u6211\u662f { self . name } \uff0c\u6211\u7684\u7231\u597d\u662f { self . hobby } ' ) # \u591a\u91cd\u7ee7\u627f class Test ( Hobbys , Student ): def __init__ ( self , n , a , address , h ): Student . __init__ ( self , n , a , address ) Hobbys . __init__ ( self , n , h ) s = Test ( '\u5c0f\u738b' , 18 , '\u5317\u4eac' , '\u5531\u6b4c' ) s . speak () # Test\u5b50\u7c7b\u672a\u6307\u5b9aspeak\u65b9\u6cd5\uff0c\u9ed8\u8ba4\u8c03\u7528\u7684\u662f\u5728\u62ec\u53f7\u4e2d\u6392\u524d\u5730\u7236\u7c7b\u7684\u65b9\u6cd5\u3002 # \u6211\u662f\u5c0f\u738b\uff0c\u6211\u7684\u7231\u597d\u662f\u5531\u6b4c\u3002","title":"1.4 \u7ee7\u627f"},{"location":"python%E5%9F%BA%E7%A1%80/%E7%B1%BB/#15","text":"__private_attrs \uff1a\u4e24\u4e2a\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u58f0\u660e\u8be5\u5c5e\u6027\u4e3a\u79c1\u6709\uff0c\u4e0d\u80fd\u5728\u7c7b\u7684\u5916\u90e8\u88ab\u4f7f\u7528\u6216\u76f4\u63a5\u8bbf\u95ee\u3002\u5728\u7c7b\u5185\u90e8\u7684\u65b9\u6cd5\u4e2d\u4f7f\u7528\u65f6 self.__private_attrs \u3002 __private_method \uff1a\u4e24\u4e2a\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u58f0\u660e\u8be5\u65b9\u6cd5\u4e3a\u79c1\u6709\u65b9\u6cd5\uff0c\u53ea\u80fd\u5728\u7c7b\u7684\u5185\u90e8\u8c03\u7528 \uff0c\u4e0d\u80fd\u5728\u7c7b\u7684\u5916\u90e8\u8c03\u7528\u3002 self.__private_methods \u3002 class Site : def __init__ ( self , name , url ): self . name = name self . __url = url # \u79c1\u6709\u5c5e\u6027 def who ( self ): print ( 'name : ' , self . name ) print ( 'url : ' , self . __url ) # \u7c7b\u5185\u90e8\u4f7f\u7528\u79c1\u6709\u5c5e\u6027 def __foo ( self ): # \u79c1\u6709\u65b9\u6cd5 print ( '\u8fd9\u662f\u79c1\u6709\u65b9\u6cd5' ) def foo ( self ): # \u516c\u5171\u65b9\u6cd5 print ( '\u8fd9\u662f\u516c\u5171\u65b9\u6cd5' ) self . __foo () # \u7c7b\u5185\u90e8\u4f7f\u7528\u79c1\u6709\u65b9\u6cd5 x = Site ( 'Python' , 'www.python.org/' ) x . who () # \u6b63\u5e38\u8f93\u51fa ''' name : Python url : www.python.org/ ''' x . foo () # \u6b63\u5e38\u8f93\u51fa ''' \u8fd9\u662f\u516c\u5171\u65b9\u6cd5 \u8fd9\u662f\u79c1\u6709\u65b9\u6cd5 ''' # x.__url # \u62a5\u9519 # x.__foo() # \u62a5\u9519 \u7c7b\u7684\u4e13\u6709\u65b9\u6cd5\uff1a __init__ \u6784\u9020\u51fd\u6570\uff0c\u5728\u751f\u6210\u5bf9\u8c61\u65f6\u8c03\u7528 __del__ \u6790\u6784\u51fd\u6570\uff0c\u91ca\u653e\u5bf9\u8c61\u65f6\u4f7f\u7528 __repr__ \u6253\u5370\uff0c\u8f6c\u6362 __setitem__ \u6309\u7167\u7d22\u5f15\u8d4b\u503c __getitem__ \u6309\u7167\u7d22\u5f15\u83b7\u53d6\u503c __len__ \u83b7\u5f97\u957f\u5ea6 __cmp__ \u6bd4\u8f83\u8fd0\u7b97 __call__ \u51fd\u6570\u8c03\u7528 __add__ \u52a0\u8fd0\u7b97 __sub__ \u51cf\u8fd0\u7b97 __mul__ \u4e58\u8fd0\u7b97 __truediv__ \u9664\u8fd0\u7b97 __mod__ \u6c42\u4f59\u8fd0\u7b97 __pow__ \u4e58\u65b9","title":"1.5 \u79c1\u6709\u53d8\u91cf"},{"location":"python%E5%9F%BA%E7%A1%80/%E7%B1%BB/#16","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\u5927\u591a\u6570\u5bb9\u5668\u5bf9\u8c61\u90fd\u53ef\u4ee5\u4f7f\u7528 for \u8bed\u53e5: for element in [ 1 , 2 , 3 ]: print ( element ) for element in ( 1 , 2 , 3 ): print ( element ) for key in { 'one' : 1 , 'two' : 2 }: print ( key ) for char in \"123\" : print ( char ) for line in open ( \"myfile.txt\" ): print ( line , end = '' ) \u8fd9\u79cd\u8bbf\u95ee\u98ce\u683c\u6e05\u6670\u3001\u7b80\u6d01\u53c8\u65b9\u4fbf\u3002 \u8fed\u4ee3\u5668\u7684\u4f7f\u7528\u975e\u5e38\u666e\u904d\u5e76\u4f7f\u5f97 Python \u6210\u4e3a\u4e00\u4e2a\u7edf\u4e00\u7684\u6574\u4f53\u3002 \u5728\u5e55\u540e\uff0c for \u8bed\u53e5\u4f1a\u5728\u5bb9\u5668\u5bf9\u8c61\u4e0a\u8c03\u7528 iter() \u3002 \u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5b9a\u4e49\u4e86 __next__() \u65b9\u6cd5\u7684\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u6b64\u65b9\u6cd5\u5c06\u9010\u4e00\u8bbf\u95ee\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u3002 \u5f53\u5143\u7d20\u7528\u5c3d\u65f6\uff0c __next__() \u5c06\u5f15\u53d1 StopIteration \u5f02\u5e38\u6765\u901a\u77e5\u7ec8\u6b62 for \u5faa\u73af\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 next() \u5185\u7f6e\u51fd\u6570\u6765\u8c03\u7528 __next__() \u65b9\u6cd5\uff1b\u8fd9\u4e2a\u4f8b\u5b50\u663e\u793a\u4e86\u5b83\u7684\u8fd0\u4f5c\u65b9\u5f0f: >>> s = 'abc' >>> it = iter ( s ) >>> it < iterator object at 0x00A1DB50 > >>> next ( it ) 'a' >>> next ( it ) 'b' >>> next ( it ) 'c' >>> next ( it ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > next ( it ) StopIteration \u770b\u8fc7\u8fed\u4ee3\u5668\u534f\u8bae\u7684\u5e55\u540e\u673a\u5236\uff0c\u7ed9\u4f60\u7684\u7c7b\u6dfb\u52a0\u8fed\u4ee3\u5668\u884c\u4e3a\u5c31\u5f88\u5bb9\u6613\u4e86\u3002 \u5b9a\u4e49\u4e00\u4e2a __iter__() \u65b9\u6cd5\u6765\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709 __next__() \u65b9\u6cd5\u7684\u5bf9\u8c61\u3002 \u5982\u679c\u7c7b\u5df2\u5b9a\u4e49\u4e86 __next__() \uff0c\u5219 __iter__() \u53ef\u4ee5\u7b80\u5355\u5730\u8fd4\u56de self : class Reverse : \"\"\"Iterator for looping over a sequence backwards.\"\"\" def __init__ ( self , data ): self . data = data self . index = len ( data ) def __iter__ ( self ): return self def __next__ ( self ): if self . index == 0 : raise StopIteration self . index = self . index - 1 return self . data [ self . index ] >>> rev = Reverse ( 'spam' ) >>> iter ( rev ) < __main__ . Reverse object at 0x00A1DB50 > >>> for char in rev : ... print ( char ) ... m a p s","title":"1.6 \u8fed\u4ee3\u5668"},{"location":"python%E5%9F%BA%E7%A1%80/%E7%B1%BB/#17","text":"\u751f\u6210\u5668 \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u8fed\u4ee3\u5668\u7684\u7b80\u5355\u800c\u5f3a\u5927\u7684\u5de5\u5177\u3002 \u5b83\u4eec\u7684\u5199\u6cd5\u7c7b\u4f3c\u4e8e\u6807\u51c6\u7684\u51fd\u6570\uff0c\u4f46\u5f53\u5b83\u4eec\u8981\u8fd4\u56de\u6570\u636e\u65f6\u4f1a\u4f7f\u7528 yield \u8bed\u53e5\u3002 \u6bcf\u6b21\u5728\u751f\u6210\u5668\u4e0a\u8c03\u7528 next() \u65f6\uff0c\u5b83\u4f1a\u4ece\u4e0a\u6b21\u79bb\u5f00\u7684\u4f4d\u7f6e\u6062\u590d\u6267\u884c\uff08\u5b83\u4f1a\u8bb0\u4f4f\u4e0a\u6b21\u6267\u884c\u8bed\u53e5\u65f6\u7684\u6240\u6709\u6570\u636e\u503c\uff09\u3002 \u4e00\u4e2a\u663e\u793a\u5982\u4f55\u975e\u5e38\u5bb9\u6613\u5730\u521b\u5efa\u751f\u6210\u5668\u7684\u793a\u4f8b\u5982\u4e0b: def reverse ( data ): for index in range ( len ( data ) - 1 , - 1 , - 1 ): yield data [ index ] >>> for char in reverse ( 'golf' ): ... print ( char ) ... f l o g \u53ef\u4ee5\u7528\u751f\u6210\u5668\u6765\u5b8c\u6210\u7684\u64cd\u4f5c\u540c\u6837\u53ef\u4ee5\u7528\u524d\u4e00\u8282\u6240\u63cf\u8ff0\u7684\u57fa\u4e8e\u7c7b\u7684\u8fed\u4ee3\u5668\u6765\u5b8c\u6210\u3002 \u4f46\u751f\u6210\u5668\u7684\u5199\u6cd5\u66f4\u4e3a\u7d27\u51d1\uff0c\u56e0\u4e3a\u5b83\u4f1a\u81ea\u52a8\u521b\u5efa __iter__() \u548c __next__() \u65b9\u6cd5\u3002 \u53e6\u4e00\u4e2a\u5173\u952e\u7279\u6027\u5728\u4e8e\u5c40\u90e8\u53d8\u91cf\u548c\u6267\u884c\u72b6\u6001\u4f1a\u5728\u6bcf\u6b21\u8c03\u7528\u4e4b\u95f4\u81ea\u52a8\u4fdd\u5b58\u3002 \u8fd9\u4f7f\u5f97\u8be5\u51fd\u6570\u76f8\u6bd4\u4f7f\u7528 self.index \u548c self.data \u8fd9\u79cd\u5b9e\u4f8b\u53d8\u91cf\u7684\u65b9\u5f0f\u66f4\u6613\u7f16\u5199\u4e14\u66f4\u4e3a\u6e05\u6670\u3002 \u9664\u4e86\u4f1a\u81ea\u52a8\u521b\u5efa\u65b9\u6cd5\u548c\u4fdd\u5b58\u7a0b\u5e8f\u72b6\u6001\uff0c\u5f53\u751f\u6210\u5668\u7ec8\u7ed3\u65f6\uff0c\u5b83\u4eec\u8fd8\u4f1a\u81ea\u52a8\u5f15\u53d1 StopIteration \u3002 \u8fd9\u4e9b\u7279\u6027\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4f7f\u5f97\u521b\u5efa\u8fed\u4ee3\u5668\u80fd\u4e0e\u7f16\u5199\u5e38\u89c4\u51fd\u6570\u4e00\u6837\u5bb9\u6613\u3002","title":"1.7 \u751f\u6210\u5668"},{"location":"python%E5%9F%BA%E7%A1%80/%E7%B1%BB/#18","text":"\u67d0\u4e9b\u7b80\u5355\u7684\u751f\u6210\u5668\u53ef\u4ee5\u5199\u6210\u7b80\u6d01\u7684\u8868\u8fbe\u5f0f\u4ee3\u7801\uff0c\u6240\u7528\u8bed\u6cd5\u7c7b\u4f3c\u5217\u8868\u63a8\u5bfc\u5f0f\uff0c\u4f46\u5916\u5c42\u4e3a\u5706\u62ec\u53f7\u800c\u975e\u65b9\u62ec\u53f7\u3002 \u8fd9\u79cd\u8868\u8fbe\u5f0f\u88ab\u8bbe\u8ba1\u7528\u4e8e\u751f\u6210\u5668\u5c06\u7acb\u5373\u88ab\u5916\u5c42\u51fd\u6570\u6240\u4f7f\u7528\u7684\u60c5\u51b5\u3002 \u751f\u6210\u5668\u8868\u8fbe\u5f0f\u76f8\u6bd4\u5b8c\u6574\u7684\u751f\u6210\u5668\u66f4\u7d27\u51d1\u4f46\u8f83\u4e0d\u7075\u6d3b\uff0c\u76f8\u6bd4\u7b49\u6548\u7684\u5217\u8868\u63a8\u5bfc\u5f0f\u5219\u66f4\u4e3a\u8282\u7701\u5185\u5b58\u3002 \u4f8b\u5982: >>> sum ( i * i for i in range ( 10 )) # sum of squares 285 >>> xvec = [ 10 , 20 , 30 ] >>> yvec = [ 7 , 5 , 3 ] >>> sum ( x * y for x , y in zip ( xvec , yvec )) # dot product 260 >>> unique_words = set ( word for line in page for word in line . split ()) >>> valedictorian = max (( student . gpa , student . name ) for student in graduates ) >>> data = 'golf' >>> list ( data [ i ] for i in range ( len ( data ) - 1 , - 1 , - 1 )) [ 'f' , 'l' , 'o' , 'g' ]","title":"1.8 \u751f\u6210\u5668\u8868\u8fbe\u5f0f"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%92%8C%E5%8C%85/","text":"\u865a\u62df\u73af\u5883\u548c\u5305 \u00b6 1.1 \u6982\u8ff0 \u00b6 Python\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u4f1a\u4f7f\u7528\u4e0d\u5728\u6807\u51c6\u5e93\u5185\u7684\u8f6f\u4ef6\u5305\u548c\u6a21\u5757\u3002\u5e94\u7528\u7a0b\u5e8f\u6709\u65f6\u9700\u8981\u7279\u5b9a\u7248\u672c\u7684\u5e93\uff0c\u56e0\u4e3a\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u9700\u8981\u4fee\u590d\u7279\u5b9a\u7684\u9519\u8bef\uff0c\u6216\u8005\u53ef\u4ee5\u4f7f\u7528\u5e93\u7684\u8fc7\u65f6\u7248\u672c\u7684\u63a5\u53e3\u7f16\u5199\u5e94\u7528\u7a0b\u5e8f\u3002 \u8fd9\u610f\u5473\u7740\u4e00\u4e2aPython\u5b89\u88c5\u53ef\u80fd\u65e0\u6cd5\u6ee1\u8db3\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u8981\u6c42\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8fA\u9700\u8981\u7279\u5b9a\u6a21\u5757\u76841.0\u7248\u672c\u4f46\u5e94\u7528\u7a0b\u5e8fB\u9700\u89812.0\u7248\u672c\uff0c\u5219\u9700\u6c42\u5b58\u5728\u51b2\u7a81\uff0c\u5b89\u88c5\u7248\u672c1.0\u62162.0\u5c06\u5bfc\u81f4\u67d0\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u65e0\u6cd5\u8fd0\u884c\u3002 \u8fd9\u4e2a\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u662f\u521b\u5efa\u4e00\u4e2a virtual environment \uff0c\u4e00\u4e2a\u76ee\u5f55\u6811\uff0c\u5176\u4e2d\u5b89\u88c5\u6709\u7279\u5b9aPython\u7248\u672c\uff0c\u4ee5\u53ca\u8bb8\u591a\u5176\u4ed6\u5305\u3002 \u7136\u540e\uff0c\u4e0d\u540c\u7684\u5e94\u7528\u5c06\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u865a\u62df\u73af\u5883\u3002 \u8981\u89e3\u51b3\u5148\u524d\u9700\u6c42\u76f8\u51b2\u7a81\u7684\u4f8b\u5b50\uff0c\u5e94\u7528\u7a0b\u5e8f A \u53ef\u4ee5\u62e5\u6709\u81ea\u5df1\u7684 \u5b89\u88c5\u4e86 1.0 \u7248\u672c\u7684\u865a\u62df\u73af\u5883\uff0c\u800c\u5e94\u7528\u7a0b\u5e8f B \u5219\u62e5\u6709\u5b89\u88c5\u4e86 2.0 \u7248\u672c\u7684\u53e6\u4e00\u4e2a\u865a\u62df\u73af\u5883\u3002 \u5982\u679c\u5e94\u7528\u7a0b\u5e8f B \u8981\u6c42\u5c06\u67d0\u4e2a\u5e93\u5347\u7ea7\u5230 3.0 \u7248\u672c\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u5e94\u7528\u7a0b\u5e8f A \u7684\u73af\u5883\u3002 1.2 \u521b\u5efa\u865a\u62df\u73af\u5883 \u00b6 \u7528\u4e8e\u521b\u5efa\u548c\u7ba1\u7406\u865a\u62df\u73af\u5883\u7684\u6a21\u5757\u79f0\u4e3a venv \u3002 venv \u901a\u5e38\u4f1a\u5b89\u88c5\u4f60\u53ef\u7528\u7684\u6700\u65b0\u7248\u672c\u7684 Python\u3002\u5982\u679c\u60a8\u7684\u7cfb\u7edf\u4e0a\u6709\u591a\u4e2a\u7248\u672c\u7684 Python\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c python3 \u6216\u60a8\u60f3\u8981\u7684\u4efb\u4f55\u7248\u672c\u6765\u9009\u62e9\u7279\u5b9a\u7684Python\u7248\u672c\u3002 \u8981\u521b\u5efa\u865a\u62df\u73af\u5883\uff0c\u8bf7\u786e\u5b9a\u8981\u653e\u7f6e\u5b83\u7684\u76ee\u5f55\uff0c\u5e76\u5c06 venv \u6a21\u5757\u4f5c\u4e3a\u811a\u672c\u8fd0\u884c\u76ee\u5f55\u8def\u5f84: python3 - m venv tutorial - env \u5982\u679c tutorial-env \u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u5b83\u5c06\u4e3a\u4f60\u521b\u5efa\u4e00\u4e2a\uff0c\u5e76\u5728\u5176\u4e2d\u521b\u5efa\u5305\u542bPython\u89e3\u91ca\u5668\uff0c\u6807\u51c6\u5e93\u548c\u5404\u79cd\u652f\u6301\u6587\u4ef6\u7684\u526f\u672c\u7684\u76ee\u5f55\u3002 \u865a\u62df\u73af\u5883\u7684\u5e38\u7528\u76ee\u5f55\u4f4d\u7f6e\u662f .venv \u3002 \u8fd9\u4e2a\u540d\u79f0\u901a\u5e38\u4f1a\u4ee4\u8be5\u76ee\u5f55\u5728\u4f60\u7684\u7ec8\u7aef\u4e2d\u4fdd\u6301\u9690\u85cf\uff0c\u4ece\u800c\u907f\u514d\u9700\u8981\u5bf9\u6240\u5728\u76ee\u5f55\u8fdb\u884c\u989d\u5916\u89e3\u91ca\u7684\u4e00\u822c\u540d\u79f0\u3002 \u5b83\u8fd8\u80fd\u9632\u6b62\u4e0e\u67d0\u4e9b\u5de5\u5177\u6240\u652f\u6301\u7684 .env \u73af\u5883\u53d8\u91cf\u5b9a\u4e49\u6587\u4ef6\u53d1\u751f\u51b2\u7a81\u3002 \u521b\u5efa\u865a\u62df\u73af\u5883\u540e\uff0c\u60a8\u53ef\u4ee5\u6fc0\u6d3b\u5b83\u3002 \u5728Windows\u4e0a\uff0c\u8fd0\u884c: tutorial - env \\ Scripts \\ activate . bat \u5728Unix\u6216MacOS\u4e0a\uff0c\u8fd0\u884c: source tutorial - env / bin / activate \uff08\u8fd9\u4e2a\u811a\u672c\u662f\u4e3abash shell\u7f16\u5199\u7684\u3002\u5982\u679c\u4f60\u4f7f\u7528 csh \u6216 fish shell\uff0c\u4f60\u5e94\u8be5\u6539\u7528 activate.csh \u6216 activate.fish \u811a\u672c\u3002\uff09 \u6fc0\u6d3b\u865a\u62df\u73af\u5883\u5c06\u6539\u53d8\u4f60\u6240\u7528\u7ec8\u7aef\u7684\u63d0\u793a\u7b26\uff0c\u4ee5\u663e\u793a\u4f60\u6b63\u5728\u4f7f\u7528\u7684\u865a\u62df\u73af\u5883\uff0c\u5e76\u4fee\u6539\u73af\u5883\u4ee5\u4f7f python \u547d\u4ee4\u6240\u8fd0\u884c\u7684\u5c06\u662f\u5df2\u5b89\u88c5\u7684\u7279\u5b9a Python \u7248\u672c\u3002 \u4f8b\u5982\uff1a $ source ~/ envs / tutorial - env / bin / activate ( tutorial - env ) $ python Python 3.5 . 1 ( default , May 6 2016 , 10 : 59 : 36 ) ... >>> import sys >>> sys . path [ '' , '/usr/local/lib/python35.zip' , ... , '~/envs/tutorial-env/lib/python3.5/site-packages' ] 1.3 \u4f7f\u7528pip\u7ba1\u7406\u5305 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u540d\u4e3a pip \u7684\u7a0b\u5e8f\u6765\u5b89\u88c5\u3001\u5347\u7ea7\u548c\u79fb\u9664\u8f6f\u4ef6\u5305\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b pip \u5c06\u4ece Python Package Index \u5b89\u88c5\u8f6f\u4ef6\u5305\u3002 \u4f60\u53ef\u4ee5\u5728\u4f60\u7684 web \u6d4f\u89c8\u5668\u4e2d\u67e5\u770b Python Package Index\u3002 pip \u6709\u8bb8\u591a\u5b50\u547d\u4ee4: \"install\", \"uninstall\", \"freeze\" \u7b49\u7b49\u3002 \uff08\u8bf7\u5728 \u5b89\u88c5 Python \u6a21\u5757 \u6307\u5357\u9875\u67e5\u770b\u5b8c\u6574\u7684 pip \u6587\u6863\u3002\uff09 \u60a8\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u5305\u7684\u540d\u79f0\u6765\u5b89\u88c5\u6700\u65b0\u7248\u672c\u7684\u5305\uff1a ( tutorial - env ) $ python - m pip install novas Collecting novas Downloading novas - 3.1 . 1.3 . tar . gz ( 136 kB ) Installing collected packages : novas Running setup . py install for novas Successfully installed novas - 3.1 . 1.3 \u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u5305\u540d\u79f0\u540e\u8ddf == \u548c\u7248\u672c\u53f7\u6765\u5b89\u88c5\u7279\u5b9a\u7248\u672c\u7684\u5305\uff1a ( tutorial - env ) $ python - m pip install requests == 2.6 . 0 Collecting requests == 2.6 . 0 Using cached requests - 2.6 . 0 - py2 . py3 - none - any . whl Installing collected packages : requests Successfully installed requests - 2.6 . 0 \u5982\u679c\u4f60\u91cd\u65b0\u8fd0\u884c\u8fd9\u4e2a\u547d\u4ee4\uff0c pip \u4f1a\u6ce8\u610f\u5230\u5df2\u7ecf\u5b89\u88c5\u4e86\u6240\u8bf7\u6c42\u7684\u7248\u672c\u5e76\u4e14\u4ec0\u4e48\u90fd\u4e0d\u505a\u3002\u60a8\u53ef\u4ee5\u63d0\u4f9b\u4e0d\u540c\u7684\u7248\u672c\u53f7\u6765\u83b7\u53d6\u8be5\u7248\u672c\uff0c\u6216\u8005\u60a8\u53ef\u4ee5\u8fd0\u884c pip install --upgrade \u5c06\u8f6f\u4ef6\u5305\u5347\u7ea7\u5230\u6700\u65b0\u7248\u672c\uff1a ( tutorial - env ) $ python - m pip install -- upgrade requests Collecting requests Installing collected packages : requests Found existing installation : requests 2.6 . 0 Uninstalling requests - 2.6 . 0 : Successfully uninstalled requests - 2.6 . 0 Successfully installed requests - 2.7 . 0 pip uninstall \u540e\u8ddf\u4e00\u4e2a\u6216\u591a\u4e2a\u5305\u540d\u79f0\u5c06\u4ece\u865a\u62df\u73af\u5883\u4e2d\u5220\u9664\u5305\u3002 pip show \u5c06\u663e\u793a\u6709\u5173\u7279\u5b9a\u5305\u7684\u4fe1\u606f\uff1a ( tutorial - env ) $ pip show requests --- Metadata - Version : 2.0 Name : requests Version : 2.7 . 0 Summary : Python HTTP for Humans . Home - page : http : // python - requests . org Author : Kenneth Reitz Author - email : me @kennethreitz . com License : Apache 2.0 Location : / Users / akuchling / envs / tutorial - env / lib / python3 . 4 / site - packages Requires : pip list \u5c06\u663e\u793a\u865a\u62df\u73af\u5883\u4e2d\u5b89\u88c5\u7684\u6240\u6709\u8f6f\u4ef6\u5305\uff1a ( tutorial - env ) $ pip list novas ( 3.1 . 1.3 ) numpy ( 1.9 . 2 ) pip ( 7.0 . 3 ) requests ( 2.7 . 0 ) setuptools ( 16.0 ) pip freeze \u5c06\u751f\u6210\u4e00\u4e2a\u7c7b\u4f3c\u7684\u5df2\u5b89\u88c5\u5305\u5217\u8868\uff0c\u4f46\u8f93\u51fa\u4f7f\u7528 pip install \u671f\u671b\u7684\u683c\u5f0f\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u7ea6\u5b9a\u662f\u5c06\u6b64\u5217\u8868\u653e\u5728 requirements.txt \u6587\u4ef6\u4e2d\uff1a ( tutorial - env ) $ pip freeze > requirements . txt ( tutorial - env ) $ cat requirements . txt novas == 3.1 . 1.3 numpy == 1.9 . 2 requests == 2.7 . 0 \u7136\u540e\u53ef\u4ee5\u5c06 requirements.txt \u63d0\u4ea4\u7ed9\u7248\u672c\u63a7\u5236\u5e76\u4f5c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u63d0\u4f9b\u3002\u7136\u540e\u7528\u6237\u53ef\u4ee5\u4f7f\u7528 install -r \u5b89\u88c5\u6240\u6709\u5fc5\u9700\u7684\u5305\uff1a ( tutorial - env ) $ python - m pip install - r requirements . txt Collecting novas == 3.1 . 1.3 ( from - r requirements . txt ( line 1 )) ... Collecting numpy == 1.9 . 2 ( from - r requirements . txt ( line 2 )) ... Collecting requests == 2.7 . 0 ( from - r requirements . txt ( line 3 )) ... Installing collected packages : novas , numpy , requests Running setup . py install for novas Successfully installed novas - 3.1 . 1.3 numpy - 1.9 . 2 requests - 2.7 . 0 pip \u6709\u66f4\u591a\u9009\u62e9\u3002\u6709\u5173 pip \u7684\u5b8c\u6574\u6587\u6863\uff0c\u8bf7\u53c2\u9605 \u5b89\u88c5 Python \u6a21\u5757 \u6307\u5357\u3002\u5f53\u60a8\u7f16\u5199\u4e00\u4e2a\u5305\u5e76\u5e0c\u671b\u5728 Python \u5305\u7d22\u5f15\u4e2d\u4f7f\u5b83\u53ef\u7528\u65f6\uff0c\u8bf7\u53c2\u8003 \u5206\u53d1 Python \u6a21\u5757 \u6307\u5357\u3002","title":"\u865a\u62df\u73af\u5883\u548c\u5305"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%92%8C%E5%8C%85/#_1","text":"","title":"\u865a\u62df\u73af\u5883\u548c\u5305"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%92%8C%E5%8C%85/#11","text":"Python\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u4f1a\u4f7f\u7528\u4e0d\u5728\u6807\u51c6\u5e93\u5185\u7684\u8f6f\u4ef6\u5305\u548c\u6a21\u5757\u3002\u5e94\u7528\u7a0b\u5e8f\u6709\u65f6\u9700\u8981\u7279\u5b9a\u7248\u672c\u7684\u5e93\uff0c\u56e0\u4e3a\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u9700\u8981\u4fee\u590d\u7279\u5b9a\u7684\u9519\u8bef\uff0c\u6216\u8005\u53ef\u4ee5\u4f7f\u7528\u5e93\u7684\u8fc7\u65f6\u7248\u672c\u7684\u63a5\u53e3\u7f16\u5199\u5e94\u7528\u7a0b\u5e8f\u3002 \u8fd9\u610f\u5473\u7740\u4e00\u4e2aPython\u5b89\u88c5\u53ef\u80fd\u65e0\u6cd5\u6ee1\u8db3\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u8981\u6c42\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8fA\u9700\u8981\u7279\u5b9a\u6a21\u5757\u76841.0\u7248\u672c\u4f46\u5e94\u7528\u7a0b\u5e8fB\u9700\u89812.0\u7248\u672c\uff0c\u5219\u9700\u6c42\u5b58\u5728\u51b2\u7a81\uff0c\u5b89\u88c5\u7248\u672c1.0\u62162.0\u5c06\u5bfc\u81f4\u67d0\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u65e0\u6cd5\u8fd0\u884c\u3002 \u8fd9\u4e2a\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u662f\u521b\u5efa\u4e00\u4e2a virtual environment \uff0c\u4e00\u4e2a\u76ee\u5f55\u6811\uff0c\u5176\u4e2d\u5b89\u88c5\u6709\u7279\u5b9aPython\u7248\u672c\uff0c\u4ee5\u53ca\u8bb8\u591a\u5176\u4ed6\u5305\u3002 \u7136\u540e\uff0c\u4e0d\u540c\u7684\u5e94\u7528\u5c06\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u865a\u62df\u73af\u5883\u3002 \u8981\u89e3\u51b3\u5148\u524d\u9700\u6c42\u76f8\u51b2\u7a81\u7684\u4f8b\u5b50\uff0c\u5e94\u7528\u7a0b\u5e8f A \u53ef\u4ee5\u62e5\u6709\u81ea\u5df1\u7684 \u5b89\u88c5\u4e86 1.0 \u7248\u672c\u7684\u865a\u62df\u73af\u5883\uff0c\u800c\u5e94\u7528\u7a0b\u5e8f B \u5219\u62e5\u6709\u5b89\u88c5\u4e86 2.0 \u7248\u672c\u7684\u53e6\u4e00\u4e2a\u865a\u62df\u73af\u5883\u3002 \u5982\u679c\u5e94\u7528\u7a0b\u5e8f B \u8981\u6c42\u5c06\u67d0\u4e2a\u5e93\u5347\u7ea7\u5230 3.0 \u7248\u672c\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u5e94\u7528\u7a0b\u5e8f A \u7684\u73af\u5883\u3002","title":"1.1 \u6982\u8ff0"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%92%8C%E5%8C%85/#12","text":"\u7528\u4e8e\u521b\u5efa\u548c\u7ba1\u7406\u865a\u62df\u73af\u5883\u7684\u6a21\u5757\u79f0\u4e3a venv \u3002 venv \u901a\u5e38\u4f1a\u5b89\u88c5\u4f60\u53ef\u7528\u7684\u6700\u65b0\u7248\u672c\u7684 Python\u3002\u5982\u679c\u60a8\u7684\u7cfb\u7edf\u4e0a\u6709\u591a\u4e2a\u7248\u672c\u7684 Python\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c python3 \u6216\u60a8\u60f3\u8981\u7684\u4efb\u4f55\u7248\u672c\u6765\u9009\u62e9\u7279\u5b9a\u7684Python\u7248\u672c\u3002 \u8981\u521b\u5efa\u865a\u62df\u73af\u5883\uff0c\u8bf7\u786e\u5b9a\u8981\u653e\u7f6e\u5b83\u7684\u76ee\u5f55\uff0c\u5e76\u5c06 venv \u6a21\u5757\u4f5c\u4e3a\u811a\u672c\u8fd0\u884c\u76ee\u5f55\u8def\u5f84: python3 - m venv tutorial - env \u5982\u679c tutorial-env \u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u5b83\u5c06\u4e3a\u4f60\u521b\u5efa\u4e00\u4e2a\uff0c\u5e76\u5728\u5176\u4e2d\u521b\u5efa\u5305\u542bPython\u89e3\u91ca\u5668\uff0c\u6807\u51c6\u5e93\u548c\u5404\u79cd\u652f\u6301\u6587\u4ef6\u7684\u526f\u672c\u7684\u76ee\u5f55\u3002 \u865a\u62df\u73af\u5883\u7684\u5e38\u7528\u76ee\u5f55\u4f4d\u7f6e\u662f .venv \u3002 \u8fd9\u4e2a\u540d\u79f0\u901a\u5e38\u4f1a\u4ee4\u8be5\u76ee\u5f55\u5728\u4f60\u7684\u7ec8\u7aef\u4e2d\u4fdd\u6301\u9690\u85cf\uff0c\u4ece\u800c\u907f\u514d\u9700\u8981\u5bf9\u6240\u5728\u76ee\u5f55\u8fdb\u884c\u989d\u5916\u89e3\u91ca\u7684\u4e00\u822c\u540d\u79f0\u3002 \u5b83\u8fd8\u80fd\u9632\u6b62\u4e0e\u67d0\u4e9b\u5de5\u5177\u6240\u652f\u6301\u7684 .env \u73af\u5883\u53d8\u91cf\u5b9a\u4e49\u6587\u4ef6\u53d1\u751f\u51b2\u7a81\u3002 \u521b\u5efa\u865a\u62df\u73af\u5883\u540e\uff0c\u60a8\u53ef\u4ee5\u6fc0\u6d3b\u5b83\u3002 \u5728Windows\u4e0a\uff0c\u8fd0\u884c: tutorial - env \\ Scripts \\ activate . bat \u5728Unix\u6216MacOS\u4e0a\uff0c\u8fd0\u884c: source tutorial - env / bin / activate \uff08\u8fd9\u4e2a\u811a\u672c\u662f\u4e3abash shell\u7f16\u5199\u7684\u3002\u5982\u679c\u4f60\u4f7f\u7528 csh \u6216 fish shell\uff0c\u4f60\u5e94\u8be5\u6539\u7528 activate.csh \u6216 activate.fish \u811a\u672c\u3002\uff09 \u6fc0\u6d3b\u865a\u62df\u73af\u5883\u5c06\u6539\u53d8\u4f60\u6240\u7528\u7ec8\u7aef\u7684\u63d0\u793a\u7b26\uff0c\u4ee5\u663e\u793a\u4f60\u6b63\u5728\u4f7f\u7528\u7684\u865a\u62df\u73af\u5883\uff0c\u5e76\u4fee\u6539\u73af\u5883\u4ee5\u4f7f python \u547d\u4ee4\u6240\u8fd0\u884c\u7684\u5c06\u662f\u5df2\u5b89\u88c5\u7684\u7279\u5b9a Python \u7248\u672c\u3002 \u4f8b\u5982\uff1a $ source ~/ envs / tutorial - env / bin / activate ( tutorial - env ) $ python Python 3.5 . 1 ( default , May 6 2016 , 10 : 59 : 36 ) ... >>> import sys >>> sys . path [ '' , '/usr/local/lib/python35.zip' , ... , '~/envs/tutorial-env/lib/python3.5/site-packages' ]","title":"1.2 \u521b\u5efa\u865a\u62df\u73af\u5883"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%92%8C%E5%8C%85/#13-pip","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u540d\u4e3a pip \u7684\u7a0b\u5e8f\u6765\u5b89\u88c5\u3001\u5347\u7ea7\u548c\u79fb\u9664\u8f6f\u4ef6\u5305\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b pip \u5c06\u4ece Python Package Index \u5b89\u88c5\u8f6f\u4ef6\u5305\u3002 \u4f60\u53ef\u4ee5\u5728\u4f60\u7684 web \u6d4f\u89c8\u5668\u4e2d\u67e5\u770b Python Package Index\u3002 pip \u6709\u8bb8\u591a\u5b50\u547d\u4ee4: \"install\", \"uninstall\", \"freeze\" \u7b49\u7b49\u3002 \uff08\u8bf7\u5728 \u5b89\u88c5 Python \u6a21\u5757 \u6307\u5357\u9875\u67e5\u770b\u5b8c\u6574\u7684 pip \u6587\u6863\u3002\uff09 \u60a8\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u5305\u7684\u540d\u79f0\u6765\u5b89\u88c5\u6700\u65b0\u7248\u672c\u7684\u5305\uff1a ( tutorial - env ) $ python - m pip install novas Collecting novas Downloading novas - 3.1 . 1.3 . tar . gz ( 136 kB ) Installing collected packages : novas Running setup . py install for novas Successfully installed novas - 3.1 . 1.3 \u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u5305\u540d\u79f0\u540e\u8ddf == \u548c\u7248\u672c\u53f7\u6765\u5b89\u88c5\u7279\u5b9a\u7248\u672c\u7684\u5305\uff1a ( tutorial - env ) $ python - m pip install requests == 2.6 . 0 Collecting requests == 2.6 . 0 Using cached requests - 2.6 . 0 - py2 . py3 - none - any . whl Installing collected packages : requests Successfully installed requests - 2.6 . 0 \u5982\u679c\u4f60\u91cd\u65b0\u8fd0\u884c\u8fd9\u4e2a\u547d\u4ee4\uff0c pip \u4f1a\u6ce8\u610f\u5230\u5df2\u7ecf\u5b89\u88c5\u4e86\u6240\u8bf7\u6c42\u7684\u7248\u672c\u5e76\u4e14\u4ec0\u4e48\u90fd\u4e0d\u505a\u3002\u60a8\u53ef\u4ee5\u63d0\u4f9b\u4e0d\u540c\u7684\u7248\u672c\u53f7\u6765\u83b7\u53d6\u8be5\u7248\u672c\uff0c\u6216\u8005\u60a8\u53ef\u4ee5\u8fd0\u884c pip install --upgrade \u5c06\u8f6f\u4ef6\u5305\u5347\u7ea7\u5230\u6700\u65b0\u7248\u672c\uff1a ( tutorial - env ) $ python - m pip install -- upgrade requests Collecting requests Installing collected packages : requests Found existing installation : requests 2.6 . 0 Uninstalling requests - 2.6 . 0 : Successfully uninstalled requests - 2.6 . 0 Successfully installed requests - 2.7 . 0 pip uninstall \u540e\u8ddf\u4e00\u4e2a\u6216\u591a\u4e2a\u5305\u540d\u79f0\u5c06\u4ece\u865a\u62df\u73af\u5883\u4e2d\u5220\u9664\u5305\u3002 pip show \u5c06\u663e\u793a\u6709\u5173\u7279\u5b9a\u5305\u7684\u4fe1\u606f\uff1a ( tutorial - env ) $ pip show requests --- Metadata - Version : 2.0 Name : requests Version : 2.7 . 0 Summary : Python HTTP for Humans . Home - page : http : // python - requests . org Author : Kenneth Reitz Author - email : me @kennethreitz . com License : Apache 2.0 Location : / Users / akuchling / envs / tutorial - env / lib / python3 . 4 / site - packages Requires : pip list \u5c06\u663e\u793a\u865a\u62df\u73af\u5883\u4e2d\u5b89\u88c5\u7684\u6240\u6709\u8f6f\u4ef6\u5305\uff1a ( tutorial - env ) $ pip list novas ( 3.1 . 1.3 ) numpy ( 1.9 . 2 ) pip ( 7.0 . 3 ) requests ( 2.7 . 0 ) setuptools ( 16.0 ) pip freeze \u5c06\u751f\u6210\u4e00\u4e2a\u7c7b\u4f3c\u7684\u5df2\u5b89\u88c5\u5305\u5217\u8868\uff0c\u4f46\u8f93\u51fa\u4f7f\u7528 pip install \u671f\u671b\u7684\u683c\u5f0f\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u7ea6\u5b9a\u662f\u5c06\u6b64\u5217\u8868\u653e\u5728 requirements.txt \u6587\u4ef6\u4e2d\uff1a ( tutorial - env ) $ pip freeze > requirements . txt ( tutorial - env ) $ cat requirements . txt novas == 3.1 . 1.3 numpy == 1.9 . 2 requests == 2.7 . 0 \u7136\u540e\u53ef\u4ee5\u5c06 requirements.txt \u63d0\u4ea4\u7ed9\u7248\u672c\u63a7\u5236\u5e76\u4f5c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u63d0\u4f9b\u3002\u7136\u540e\u7528\u6237\u53ef\u4ee5\u4f7f\u7528 install -r \u5b89\u88c5\u6240\u6709\u5fc5\u9700\u7684\u5305\uff1a ( tutorial - env ) $ python - m pip install - r requirements . txt Collecting novas == 3.1 . 1.3 ( from - r requirements . txt ( line 1 )) ... Collecting numpy == 1.9 . 2 ( from - r requirements . txt ( line 2 )) ... Collecting requests == 2.7 . 0 ( from - r requirements . txt ( line 3 )) ... Installing collected packages : novas , numpy , requests Running setup . py install for novas Successfully installed novas - 3.1 . 1.3 numpy - 1.9 . 2 requests - 2.7 . 0 pip \u6709\u66f4\u591a\u9009\u62e9\u3002\u6709\u5173 pip \u7684\u5b8c\u6574\u6587\u6863\uff0c\u8bf7\u53c2\u9605 \u5b89\u88c5 Python \u6a21\u5757 \u6307\u5357\u3002\u5f53\u60a8\u7f16\u5199\u4e00\u4e2a\u5305\u5e76\u5e0c\u671b\u5728 Python \u5305\u7d22\u5f15\u4e2d\u4f7f\u5b83\u53ef\u7528\u65f6\uff0c\u8bf7\u53c2\u8003 \u5206\u53d1 Python \u6a21\u5757 \u6307\u5357\u3002","title":"1.3 \u4f7f\u7528pip\u7ba1\u7406\u5305"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%A3%85%E9%A5%B0%E5%99%A8/","text":"\u88c5\u9970\u5668 \u00b6 1.1 \u88c5\u9970\u5668- \u5b98\u7f51\u7b80\u4ecb \u00b6 \u4e00\u4e2a\u51fd\u6570\u5b9a\u4e49\u53ef\u4ee5\u88ab\u4e00\u4e2a\u6216\u591a\u4e2a decorator \u8868\u8fbe\u5f0f\u6240\u5305\u88c5\u3002 \u5f53\u51fd\u6570\u88ab\u5b9a\u4e49\u65f6\u5c06\u5728\u5305\u542b\u8be5\u51fd\u6570\u5b9a\u4e49\u7684\u4f5c\u7528\u57df\u4e2d\u5bf9\u88c5\u9970\u5668\u8868\u8fbe\u5f0f\u6c42\u503c\u3002 \u6c42\u503c\u7ed3\u679c\u5fc5\u987b\u662f\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u5b83\u4f1a\u4ee5\u8be5\u51fd\u6570\u5bf9\u8c61\u4f5c\u4e3a\u552f\u4e00\u53c2\u6570\u88ab\u53d1\u8d77\u8c03\u7528\u3002 \u5176\u8fd4\u56de\u503c\u5c06\u88ab\u7ed1\u5b9a\u5230\u51fd\u6570\u540d\u79f0\u800c\u975e\u51fd\u6570\u5bf9\u8c61\u3002 \u591a\u4e2a\u88c5\u9970\u5668\u4f1a\u4ee5\u5d4c\u5957\u65b9\u5f0f\u88ab\u5e94\u7528\u3002 \u4f8b\u5982\u4ee5\u4e0b\u4ee3\u7801 @f1 ( arg ) @f2 def func (): pass \u5927\u81f4\u7b49\u4ef7\u4e8e def func (): pass func = f1 ( arg )( f2 ( func )) \u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u539f\u59cb\u51fd\u6570\u5e76\u4e0d\u4f1a\u88ab\u4e34\u65f6\u7ed1\u5b9a\u5230\u540d\u79f0 func \u3002 \u88c5\u9970\u5668\u8bed\u6cd5\u53ea\u662f\u4e00\u79cd\u8bed\u6cd5\u7cd6\uff0c\u4ee5\u4e0b\u4e24\u4e2a\u51fd\u6570\u5b9a\u4e49\u5728\u8bed\u4e49\u4e0a\u5b8c\u5168\u7b49\u4ef7: def f ( ... ): ... f = staticmethod ( f ) @staticmethod def f ( ... ): ... \u540c\u7684\u6837\u6982\u5ff5\u4e5f\u9002\u7528\u4e8e\u7c7b\uff0c\u4f46\u901a\u5e38\u8f83\u5c11\u8fd9\u6837\u4f7f\u7528\u3002\u6709\u5173\u88c5\u9970\u5668\u7684\u8be6\u60c5\u53ef\u53c2\u89c1 \u51fd\u6570\u5b9a\u4e49 \u548c \u7c7b\u5b9a\u4e49 \u7684\u6587\u6863\u3002 1.2 \u88c5\u9970\u5668- python\u8fdb\u9636 \u00b6 \u88c5\u9970\u5668(Decorators)\u662fPython\u7684\u4e00\u4e2a\u91cd\u8981\u90e8\u5206\u3002\u7b80\u5355\u5730\u8bf4\uff1a\u5b83\u4eec\u662f\u4fee\u6539\u5176\u4ed6\u51fd\u6570\u7684\u529f\u80fd\u7684\u51fd\u6570\uff0c\u8ba9\u6211\u4eec\u7684\u4ee3\u7801\u66f4\u7b80\u77ed\uff0c\u4e5f\u66f4Pythonic\uff08Python\u8303\u513f\uff09\u3002 1.2.1 \u4e00\u5207\u7686\u5bf9\u8c61 \u00b6 \u9996\u5148\u6211\u4eec\u6765\u7406\u89e3\u4e0bPython\u4e2d\u7684\u51fd\u6570\uff1a # \u5b9a\u4e49\u51fd\u6570 def hi ( name = \"decorator\" ): return f 'Hello { name } .' print ( hi ()) # output: 'Hello decorator.' # \u53ef\u4ee5\u5c06\u4e00\u4e2a\u51fd\u6570\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf\uff1b\u6ce8\u610f\uff1a\u8fd9\u5e76\u4e0d\u662f\u5728\u8c03\u7528hi\u51fd\u6570\uff0c\u6240\u4ee5\u6ca1\u6709\u5728\u4f7f\u7528\u5c0f\u62ec\u53f7\u3002\u6bd4\u5982\uff1a greet = hi # \u8c03\u7528\u51fd\u6570 print ( greet ()) # output: 'Hello decorator.' # \u5982\u679c\u6211\u4eec\u5220\u6389\u65e7\u7684hi\u51fd\u6570\uff0c\u770b\u770b\u4f1a\u53d1\u751f\u4ec0\u4e48\uff01 del hi print ( hi ()) # outputs: NameError: name 'hi' is not defined print ( greet ()) # output: 'Hello decorator.' 1.2.2 \u5728\u51fd\u6570\u4e2d\u5b9a\u4e49\u51fd\u6570 \u00b6 \u521a\u624d\u90a3\u4e9b\u5c31\u662f\u51fd\u6570\u7684\u57fa\u672c\u77e5\u8bc6\u4e86\u3002\u6211\u4eec\u6765\u8ba9\u4f60\u7684\u77e5\u8bc6\u66f4\u8fdb\u4e00\u6b65\u3002\u5728Python\u4e2d\u6211\u4eec\u53ef\u4ee5\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\u5b9a\u4e49\u53e6\u4e00\u4e2a\u51fd\u6570\uff0c\u4e5f\u5c31\u662f\u51fd\u6570\u53ef\u4ee5\u5d4c\u5957\u51fd\u6570\uff1a def hi ( name = \"decorator\" ): print ( \"now you are inside the hi() function\" ) def greet (): return \"now you are in the greet() function\" def welcome (): return \"now you are in the welcome() function\" print ( greet ()) print ( welcome ()) print ( \"now you are back in the hi() function\" ) hi () # now you are inside the hi() function # now you are in the greet() function # now you are in the welcome() function # now you are back in the hi() function # \u4e0a\u9762\u5c55\u793a\u4e86\u65e0\u8bba\u4f55\u65f6\u4f60\u8c03\u7528hi(), greet()\u548cwelcome()\u5c06\u4f1a\u540c\u65f6\u88ab\u8c03\u7528\u3002 # \u7136\u540egreet()\u548cwelcome()\u51fd\u6570\u5728hi()\u51fd\u6570\u4e4b\u5916\u662f\u4e0d\u80fd\u8bbf\u95ee\u7684\uff0c\u6bd4\u5982\uff1a greet () #outputs: NameError: name 'greet' is not defined 1.2.3 \u4ece\u51fd\u6570\u4e2d\u8fd4\u56de\u51fd\u6570 \u00b6 \u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u5728\u4e00\u4e2a\u51fd\u6570\u91cc\u53bb\u6267\u884c\u53e6\u4e00\u4e2a\u51fd\u6570\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u8f93\u51fa\u8fd4\u56de\u51fa\u6765\uff1a def hi ( name = \"decorator\" ): def greet (): return \"now you are in the greet() function\" def welcome (): return \"now you are in the welcome() function\" if name == \"decorator\" : return greet else : return welcome a = hi () print ( a ) # outputs: <function hi.<locals>.greet at 0x0000021D7DFCBDC0> b = hi ( name = 'other' ) print ( b ) # outputs: <function hi.<locals>.welcome at 0x000001371901BEE0> a = hi() \uff0c hi() \u4f1a\u88ab\u6267\u884c\uff0c\u800c\u7531\u4e8e name \u53c2\u6570\u9ed8\u8ba4\u662fdecorator\uff0c\u6240\u4ee5\u51fd\u6570 greet \u88ab\u8fd4\u56de\u4e86\u3002\u5982\u679c\u6211\u4eec\u628a\u8bed\u53e5\u6539\u4e3a a = hi(name = \"other\") \uff0c\u90a3\u4e48 welcome \u51fd\u6570\u5c06\u88ab\u8fd4\u56de\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u6253\u5370\u51fa hi()() \uff0c\u8fd9\u4f1a\u8f93\u51fa*now you are in the greet() function*\u3002 1.2.4 \u5c06\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9\u53e6\u4e00\u4e2a\u51fd\u6570 \u00b6 def hi (): return \"hello decorator !\" def doSomethingBeforeHi ( func ): print ( \"I am doing some boring work before executing hi()\" ) print ( func ()) doSomethingBeforeHi ( hi ) #outputs:I am doing some boring work before executing hi() # hello decorator ! 1.2.5 \u7b2c\u4e00\u4e2a\u88c5\u9970\u5668 \u00b6 def a_new_decorator ( a_func ): def wrapTheFunction (): print ( \"I am doing some boring work before executing a_func()\" ) a_func () print ( \"I am doing some boring work after executing a_func()\" ) return wrapTheFunction def a_function_requiring_decoration (): print ( \"I am the function which needs some decoration to remove my foul smell\" ) a_function_requiring_decoration () #outputs: \"I am the function which needs some decoration to remove my foul smell\" a_function_requiring_decoration = a_new_decorator ( a_function_requiring_decoration ) #now a_function_requiring_decoration is wrapped by wrapTheFunction() a_function_requiring_decoration () #outputs:I am doing some boring work before executing a_func() # I am the function which needs some decoration to remove my foul smell # I am doing some boring work after executing a_func() \u6216\uff1a def a_new_decorator ( a_func ): def wrapTheFunction (): print ( \"I am doing some boring work before executing a_func()\" ) a_func () print ( \"I am doing some boring work after executing a_func()\" ) return wrapTheFunction @a_new_decorator def a_function_requiring_decoration (): \"\"\"Hey you! Decorate me!\"\"\" print ( \"I am the function which needs some decoration to \" \"remove my foul smell\" ) a_function_requiring_decoration () #outputs: I am doing some boring work before executing a_func() # I am the function which needs some decoration to remove my foul smell # I am doing some boring work after executing a_func() ''' @a_new_decorator \u7b80\u5355\u6765\u8bf4\u5c31\u662f:a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration) ''' \u8fd0\u884c\u5982\u4e0b\u4ee3\u7801\u4f1a\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff1a print ( a_function_requiring_decoration . __name__ ) # Output: wrapTheFunction \u8fd9\u5e76\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\uff01 Ouput \u8f93\u51fa\u5e94\u8be5\u662f\u201ca_function_requiring_decoration\u201d\u3002\u8fd9\u91cc\u7684\u51fd\u6570\u88abwarpTheFunction\u66ff\u4ee3\u4e86\u3002\u5b83\u91cd\u5199\u4e86\u6211\u4eec\u51fd\u6570\u7684\u540d\u5b57\u548c\u6ce8\u91ca\u6587\u6863(docstring)\u3002\u5e78\u8fd0\u7684\u662fPython\u63d0\u4f9b\u7ed9\u6211\u4eec\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u90a3\u5c31\u662f functools.wraps \u3002\u6211\u4eec\u4fee\u6539\u4e0a\u4e00\u4e2a\u4f8b\u5b50\u6765\u4f7f\u7528 functools.wraps \uff1a from functools import wraps def a_new_decorator ( a_func ): @wraps ( a_func ) def wrapTheFunction (): print ( \"I am doing some boring work before executing a_func()\" ) a_func () print ( \"I am doing some boring work after executing a_func()\" ) return wrapTheFunction @a_new_decorator def a_function_requiring_decoration (): \"\"\"Hey yo! Decorate me!\"\"\" print ( \"I am the function which needs some decoration to \" \"remove my foul smell\" ) print ( a_function_requiring_decoration . __name__ ) # Output: a_function_requiring_decoration print ( a_function_requiring_decoration . __doc__ ) # Output:Hey you! Decorate me! 1.2.6 \u5e26\u53c2\u6570 \u00b6 from functools import wraps def logit ( logfile = 'out.log' ): def logging_decorator ( func ): @wraps ( func ) def wrapped_function ( * args , ** kwargs ): log_string = func . __name__ + \" was called\" print ( log_string ) # \u6253\u5f00logfile\uff0c\u5e76\u5199\u5165\u5185\u5bb9 with open ( logfile , 'a' ) as opened_file : # \u73b0\u5728\u5c06\u65e5\u5fd7\u6253\u5230\u6307\u5b9a\u7684logfile opened_file . write ( log_string + ' \\n ' ) return func ( * args , ** kwargs ) return wrapped_function return logging_decorator @logit () def myfunc1 (): pass myfunc1 () # Output: myfunc1 was called # \u73b0\u5728\u4e00\u4e2a\u53eb\u505a out.log \u7684\u6587\u4ef6\u51fa\u73b0\u4e86\uff0c\u91cc\u9762\u7684\u5185\u5bb9\u5c31\u662f\u4e0a\u9762\u7684\u5b57\u7b26\u4e32 @logit ( logfile = 'func2.log' ) def myfunc2 (): pass myfunc2 () # Output: myfunc2 was called # \u73b0\u5728\u4e00\u4e2a\u53eb\u505a func2.log \u7684\u6587\u4ef6\u51fa\u73b0\u4e86\uff0c\u91cc\u9762\u7684\u5185\u5bb9\u5c31\u662f\u4e0a\u9762\u7684\u5b57\u7b26\u4e32 1.3 \u88c5\u9970\u5668- B\u7ad9\u6574\u7406 \u00b6 1.3.1 \u57fa\u672c\u4f7f\u7528 \u00b6 import time from functools import wraps def cal_time ( fn ): print ( '\u6211\u662f\u5916\u90e8\u51fd\u6570\uff0c\u6211\u88ab\u8c03\u7528\u4e86\uff01' ) print ( f 'fn= { fn } ' ) @wraps ( fn ) # \u539f\u89c6\u9891\u91cc\u6ca1\u6709 def inner (): '''\u8ba1\u7b97\u4ee3\u7801\u6267\u884c\u65f6\u957f''' start = time . time () fn () end = time . time () print ( f '\u4ee3\u7801\u8017\u65f6\uff1a { end - start } ' ) return inner @cal_time def demo (): '''\u8ba1\u7b971-999999\u7684\u548c''' x = 0 for i in range ( 1 , 1000000 ): x += i print ( x ) demo () # output: # \u6211\u662f\u5916\u90e8\u51fd\u6570\uff0c\u6211\u88ab\u8c03\u7528\u4e86\uff01 # fn=<function demo at 0x0000022E8AC8ADC0> # 499999500000 # \u4ee3\u7801\u8017\u65f6\uff1a0.07295680046081543 1.3.2 \u53c2\u6570\u3001\u8fd4\u56de\u503c \u00b6 import time from functools import wraps def cal_time ( fn ): print ( '\u6211\u662f\u5916\u90e8\u51fd\u6570\uff0c\u6211\u88ab\u8c03\u7528\u4e86\uff01' ) print ( f 'fn= { fn } ' ) @wraps ( fn ) # \u539f\u89c6\u9891\u91cc\u6ca1\u6709 def inner ( n , * args , ** kwargs ): '''\u8ba1\u7b97\u4ee3\u7801\u6267\u884c\u65f6\u957f''' start = time . time () s = fn ( n ) end = time . time () # print(f'\u4ee3\u7801\u8017\u65f6\uff1a{end-start}') return s , f '\u4ee3\u7801\u8017\u65f6\uff1a { end - start } ' return inner @cal_time def demo ( n ): '''\u8ba1\u7b971-999999\u7684\u548c''' x = 0 for i in range ( 1 , n ): x += i return x print ( demo ( 1000000 , 'hello' , y = 100 )) # output: # \u6211\u662f\u5916\u90e8\u51fd\u6570\uff0c\u6211\u88ab\u8c03\u7528\u4e86\uff01 # fn=<function demo at 0x000001C6D325ADC0> # (499999500000, '\u4ee3\u7801\u8017\u65f6\uff1a0.0859525203704834') # \u8981\u9075\u5faa\u5c01\u95ed\u5f00\u653e\u539f\u5219 # \u5982\u679c\u8d85\u8fc722\u70b9\u5c31\u4e0d\u8ba9\u73a9\u6e38\u620f\uff1b\u5982\u679c\u4e0d\u544a\u8bc9\u65f6\u95f4\uff0c\u5c31\u9ed8\u8ba4\u8ba9\u73a9 def can_play ( fn ): def inner ( x , y , * args , ** kwargs ): clock = kwargs . get ( 'clock' , 18 ) if clock <= 22 : fn ( x , y ) else : print ( '\u592a\u665a\u4e86\uff0c\u8d76\u7d27\u7761\uff01' ) return inner @can_play def play_game ( name , game ): print ( f ' { name } \u6b63\u5728\u73a9 { game } \u3002' ) play_game ( '\u5f20\u4e09' , '\u82f1\u96c4\u8054\u76df' , clock = 23 ) # Output: # \u592a\u665a\u4e86\uff0c\u8d76\u7d27\u7761\uff01 1.3.3 \u9ad8\u7ea7\u7528\u6cd5\uff1a \u88c5\u9970\u5668\u5e26\u53c2\u6570 \u00b6 def can_play ( clock ): def handle_action ( fn ): def do_action ( name , game ): if clock < 21 : fn ( name , game ) else : print ( '\u592a\u665a\u4e86\uff0c\u5feb\u7761\u5427\uff01' ) return do_action return handle_action @can_play ( 20 ) def play_game ( name , game ): print ( f ' { name } \u6b63\u5728\u73a9 { game } \u3002' ) play_game ( '\u5f20\u4e09' , '\u82f1\u96c4\u8054\u76df' ) # Output: \u5f20\u4e09\u6b63\u5728\u73a9\u82f1\u96c4\u8054\u76df\u3002 # \u7528\u6237\u6743\u9650 # \u4e8c\u8fdb\u5236 & \u8fd0\u7b97 user_permission = 13 del_permission = 8 read_permission = 4 write_permission = 2 exe_permission = 1 def check_permission ( x , y ): def handle_action ( fn ): def do_action (): if x & y != 0 : # \u6709\u6743\u9650\uff0c\u53ef\u4ee5\u6267\u884c fn () else : print ( '\u5bf9\u4e0d\u8d77\uff0c\u60a8\u6ca1\u6709\u76f8\u5e94\u6743\u9650\uff01' ) pass return do_action return handle_action @check_permission ( user_permission , read_permission ) def read (): print ( '\u6211\u6b63\u5728\u8bfb\u53d6\u5185\u5bb9' ) @check_permission ( user_permission , write_permission ) def write (): print ( '\u6211\u6b63\u5728\u5199\u5165\u5185\u5bb9' ) @check_permission ( user_permission , exe_permission ) def excute (): print ( '\u6211\u6b63\u5728\u6267\u884c\u5185\u5bb9' ) @check_permission ( user_permission , del_permission ) def delete (): print ( '\u6211\u6b63\u5728\u5220\u9664\u5185\u5bb9' ) read () write () excute () delete () # Output: # \u6211\u6b63\u5728\u8bfb\u53d6\u5185\u5bb9 # \u5bf9\u4e0d\u8d77\uff0c\u60a8\u6ca1\u6709\u76f8\u5e94\u6743\u9650\uff01 # \u6211\u6b63\u5728\u6267\u884c\u5185\u5bb9 # \u6211\u6b63\u5728\u5220\u9664\u5185\u5bb9","title":"\u88c5\u9970\u5668"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%A3%85%E9%A5%B0%E5%99%A8/#_1","text":"","title":"\u88c5\u9970\u5668"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%A3%85%E9%A5%B0%E5%99%A8/#11-","text":"\u4e00\u4e2a\u51fd\u6570\u5b9a\u4e49\u53ef\u4ee5\u88ab\u4e00\u4e2a\u6216\u591a\u4e2a decorator \u8868\u8fbe\u5f0f\u6240\u5305\u88c5\u3002 \u5f53\u51fd\u6570\u88ab\u5b9a\u4e49\u65f6\u5c06\u5728\u5305\u542b\u8be5\u51fd\u6570\u5b9a\u4e49\u7684\u4f5c\u7528\u57df\u4e2d\u5bf9\u88c5\u9970\u5668\u8868\u8fbe\u5f0f\u6c42\u503c\u3002 \u6c42\u503c\u7ed3\u679c\u5fc5\u987b\u662f\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u5b83\u4f1a\u4ee5\u8be5\u51fd\u6570\u5bf9\u8c61\u4f5c\u4e3a\u552f\u4e00\u53c2\u6570\u88ab\u53d1\u8d77\u8c03\u7528\u3002 \u5176\u8fd4\u56de\u503c\u5c06\u88ab\u7ed1\u5b9a\u5230\u51fd\u6570\u540d\u79f0\u800c\u975e\u51fd\u6570\u5bf9\u8c61\u3002 \u591a\u4e2a\u88c5\u9970\u5668\u4f1a\u4ee5\u5d4c\u5957\u65b9\u5f0f\u88ab\u5e94\u7528\u3002 \u4f8b\u5982\u4ee5\u4e0b\u4ee3\u7801 @f1 ( arg ) @f2 def func (): pass \u5927\u81f4\u7b49\u4ef7\u4e8e def func (): pass func = f1 ( arg )( f2 ( func )) \u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u539f\u59cb\u51fd\u6570\u5e76\u4e0d\u4f1a\u88ab\u4e34\u65f6\u7ed1\u5b9a\u5230\u540d\u79f0 func \u3002 \u88c5\u9970\u5668\u8bed\u6cd5\u53ea\u662f\u4e00\u79cd\u8bed\u6cd5\u7cd6\uff0c\u4ee5\u4e0b\u4e24\u4e2a\u51fd\u6570\u5b9a\u4e49\u5728\u8bed\u4e49\u4e0a\u5b8c\u5168\u7b49\u4ef7: def f ( ... ): ... f = staticmethod ( f ) @staticmethod def f ( ... ): ... \u540c\u7684\u6837\u6982\u5ff5\u4e5f\u9002\u7528\u4e8e\u7c7b\uff0c\u4f46\u901a\u5e38\u8f83\u5c11\u8fd9\u6837\u4f7f\u7528\u3002\u6709\u5173\u88c5\u9970\u5668\u7684\u8be6\u60c5\u53ef\u53c2\u89c1 \u51fd\u6570\u5b9a\u4e49 \u548c \u7c7b\u5b9a\u4e49 \u7684\u6587\u6863\u3002","title":"1.1 \u88c5\u9970\u5668-\u5b98\u7f51\u7b80\u4ecb"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%A3%85%E9%A5%B0%E5%99%A8/#12-python","text":"\u88c5\u9970\u5668(Decorators)\u662fPython\u7684\u4e00\u4e2a\u91cd\u8981\u90e8\u5206\u3002\u7b80\u5355\u5730\u8bf4\uff1a\u5b83\u4eec\u662f\u4fee\u6539\u5176\u4ed6\u51fd\u6570\u7684\u529f\u80fd\u7684\u51fd\u6570\uff0c\u8ba9\u6211\u4eec\u7684\u4ee3\u7801\u66f4\u7b80\u77ed\uff0c\u4e5f\u66f4Pythonic\uff08Python\u8303\u513f\uff09\u3002","title":"1.2 \u88c5\u9970\u5668-python\u8fdb\u9636"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%A3%85%E9%A5%B0%E5%99%A8/#121","text":"\u9996\u5148\u6211\u4eec\u6765\u7406\u89e3\u4e0bPython\u4e2d\u7684\u51fd\u6570\uff1a # \u5b9a\u4e49\u51fd\u6570 def hi ( name = \"decorator\" ): return f 'Hello { name } .' print ( hi ()) # output: 'Hello decorator.' # \u53ef\u4ee5\u5c06\u4e00\u4e2a\u51fd\u6570\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf\uff1b\u6ce8\u610f\uff1a\u8fd9\u5e76\u4e0d\u662f\u5728\u8c03\u7528hi\u51fd\u6570\uff0c\u6240\u4ee5\u6ca1\u6709\u5728\u4f7f\u7528\u5c0f\u62ec\u53f7\u3002\u6bd4\u5982\uff1a greet = hi # \u8c03\u7528\u51fd\u6570 print ( greet ()) # output: 'Hello decorator.' # \u5982\u679c\u6211\u4eec\u5220\u6389\u65e7\u7684hi\u51fd\u6570\uff0c\u770b\u770b\u4f1a\u53d1\u751f\u4ec0\u4e48\uff01 del hi print ( hi ()) # outputs: NameError: name 'hi' is not defined print ( greet ()) # output: 'Hello decorator.'","title":"1.2.1 \u4e00\u5207\u7686\u5bf9\u8c61"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%A3%85%E9%A5%B0%E5%99%A8/#122","text":"\u521a\u624d\u90a3\u4e9b\u5c31\u662f\u51fd\u6570\u7684\u57fa\u672c\u77e5\u8bc6\u4e86\u3002\u6211\u4eec\u6765\u8ba9\u4f60\u7684\u77e5\u8bc6\u66f4\u8fdb\u4e00\u6b65\u3002\u5728Python\u4e2d\u6211\u4eec\u53ef\u4ee5\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\u5b9a\u4e49\u53e6\u4e00\u4e2a\u51fd\u6570\uff0c\u4e5f\u5c31\u662f\u51fd\u6570\u53ef\u4ee5\u5d4c\u5957\u51fd\u6570\uff1a def hi ( name = \"decorator\" ): print ( \"now you are inside the hi() function\" ) def greet (): return \"now you are in the greet() function\" def welcome (): return \"now you are in the welcome() function\" print ( greet ()) print ( welcome ()) print ( \"now you are back in the hi() function\" ) hi () # now you are inside the hi() function # now you are in the greet() function # now you are in the welcome() function # now you are back in the hi() function # \u4e0a\u9762\u5c55\u793a\u4e86\u65e0\u8bba\u4f55\u65f6\u4f60\u8c03\u7528hi(), greet()\u548cwelcome()\u5c06\u4f1a\u540c\u65f6\u88ab\u8c03\u7528\u3002 # \u7136\u540egreet()\u548cwelcome()\u51fd\u6570\u5728hi()\u51fd\u6570\u4e4b\u5916\u662f\u4e0d\u80fd\u8bbf\u95ee\u7684\uff0c\u6bd4\u5982\uff1a greet () #outputs: NameError: name 'greet' is not defined","title":"1.2.2 \u5728\u51fd\u6570\u4e2d\u5b9a\u4e49\u51fd\u6570"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%A3%85%E9%A5%B0%E5%99%A8/#123","text":"\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u5728\u4e00\u4e2a\u51fd\u6570\u91cc\u53bb\u6267\u884c\u53e6\u4e00\u4e2a\u51fd\u6570\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u8f93\u51fa\u8fd4\u56de\u51fa\u6765\uff1a def hi ( name = \"decorator\" ): def greet (): return \"now you are in the greet() function\" def welcome (): return \"now you are in the welcome() function\" if name == \"decorator\" : return greet else : return welcome a = hi () print ( a ) # outputs: <function hi.<locals>.greet at 0x0000021D7DFCBDC0> b = hi ( name = 'other' ) print ( b ) # outputs: <function hi.<locals>.welcome at 0x000001371901BEE0> a = hi() \uff0c hi() \u4f1a\u88ab\u6267\u884c\uff0c\u800c\u7531\u4e8e name \u53c2\u6570\u9ed8\u8ba4\u662fdecorator\uff0c\u6240\u4ee5\u51fd\u6570 greet \u88ab\u8fd4\u56de\u4e86\u3002\u5982\u679c\u6211\u4eec\u628a\u8bed\u53e5\u6539\u4e3a a = hi(name = \"other\") \uff0c\u90a3\u4e48 welcome \u51fd\u6570\u5c06\u88ab\u8fd4\u56de\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u6253\u5370\u51fa hi()() \uff0c\u8fd9\u4f1a\u8f93\u51fa*now you are in the greet() function*\u3002","title":"1.2.3 \u4ece\u51fd\u6570\u4e2d\u8fd4\u56de\u51fd\u6570"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%A3%85%E9%A5%B0%E5%99%A8/#124","text":"def hi (): return \"hello decorator !\" def doSomethingBeforeHi ( func ): print ( \"I am doing some boring work before executing hi()\" ) print ( func ()) doSomethingBeforeHi ( hi ) #outputs:I am doing some boring work before executing hi() # hello decorator !","title":"1.2.4 \u5c06\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9\u53e6\u4e00\u4e2a\u51fd\u6570"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%A3%85%E9%A5%B0%E5%99%A8/#125","text":"def a_new_decorator ( a_func ): def wrapTheFunction (): print ( \"I am doing some boring work before executing a_func()\" ) a_func () print ( \"I am doing some boring work after executing a_func()\" ) return wrapTheFunction def a_function_requiring_decoration (): print ( \"I am the function which needs some decoration to remove my foul smell\" ) a_function_requiring_decoration () #outputs: \"I am the function which needs some decoration to remove my foul smell\" a_function_requiring_decoration = a_new_decorator ( a_function_requiring_decoration ) #now a_function_requiring_decoration is wrapped by wrapTheFunction() a_function_requiring_decoration () #outputs:I am doing some boring work before executing a_func() # I am the function which needs some decoration to remove my foul smell # I am doing some boring work after executing a_func() \u6216\uff1a def a_new_decorator ( a_func ): def wrapTheFunction (): print ( \"I am doing some boring work before executing a_func()\" ) a_func () print ( \"I am doing some boring work after executing a_func()\" ) return wrapTheFunction @a_new_decorator def a_function_requiring_decoration (): \"\"\"Hey you! Decorate me!\"\"\" print ( \"I am the function which needs some decoration to \" \"remove my foul smell\" ) a_function_requiring_decoration () #outputs: I am doing some boring work before executing a_func() # I am the function which needs some decoration to remove my foul smell # I am doing some boring work after executing a_func() ''' @a_new_decorator \u7b80\u5355\u6765\u8bf4\u5c31\u662f:a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration) ''' \u8fd0\u884c\u5982\u4e0b\u4ee3\u7801\u4f1a\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff1a print ( a_function_requiring_decoration . __name__ ) # Output: wrapTheFunction \u8fd9\u5e76\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\uff01 Ouput \u8f93\u51fa\u5e94\u8be5\u662f\u201ca_function_requiring_decoration\u201d\u3002\u8fd9\u91cc\u7684\u51fd\u6570\u88abwarpTheFunction\u66ff\u4ee3\u4e86\u3002\u5b83\u91cd\u5199\u4e86\u6211\u4eec\u51fd\u6570\u7684\u540d\u5b57\u548c\u6ce8\u91ca\u6587\u6863(docstring)\u3002\u5e78\u8fd0\u7684\u662fPython\u63d0\u4f9b\u7ed9\u6211\u4eec\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u90a3\u5c31\u662f functools.wraps \u3002\u6211\u4eec\u4fee\u6539\u4e0a\u4e00\u4e2a\u4f8b\u5b50\u6765\u4f7f\u7528 functools.wraps \uff1a from functools import wraps def a_new_decorator ( a_func ): @wraps ( a_func ) def wrapTheFunction (): print ( \"I am doing some boring work before executing a_func()\" ) a_func () print ( \"I am doing some boring work after executing a_func()\" ) return wrapTheFunction @a_new_decorator def a_function_requiring_decoration (): \"\"\"Hey yo! Decorate me!\"\"\" print ( \"I am the function which needs some decoration to \" \"remove my foul smell\" ) print ( a_function_requiring_decoration . __name__ ) # Output: a_function_requiring_decoration print ( a_function_requiring_decoration . __doc__ ) # Output:Hey you! Decorate me!","title":"1.2.5 \u7b2c\u4e00\u4e2a\u88c5\u9970\u5668"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%A3%85%E9%A5%B0%E5%99%A8/#126","text":"from functools import wraps def logit ( logfile = 'out.log' ): def logging_decorator ( func ): @wraps ( func ) def wrapped_function ( * args , ** kwargs ): log_string = func . __name__ + \" was called\" print ( log_string ) # \u6253\u5f00logfile\uff0c\u5e76\u5199\u5165\u5185\u5bb9 with open ( logfile , 'a' ) as opened_file : # \u73b0\u5728\u5c06\u65e5\u5fd7\u6253\u5230\u6307\u5b9a\u7684logfile opened_file . write ( log_string + ' \\n ' ) return func ( * args , ** kwargs ) return wrapped_function return logging_decorator @logit () def myfunc1 (): pass myfunc1 () # Output: myfunc1 was called # \u73b0\u5728\u4e00\u4e2a\u53eb\u505a out.log \u7684\u6587\u4ef6\u51fa\u73b0\u4e86\uff0c\u91cc\u9762\u7684\u5185\u5bb9\u5c31\u662f\u4e0a\u9762\u7684\u5b57\u7b26\u4e32 @logit ( logfile = 'func2.log' ) def myfunc2 (): pass myfunc2 () # Output: myfunc2 was called # \u73b0\u5728\u4e00\u4e2a\u53eb\u505a func2.log \u7684\u6587\u4ef6\u51fa\u73b0\u4e86\uff0c\u91cc\u9762\u7684\u5185\u5bb9\u5c31\u662f\u4e0a\u9762\u7684\u5b57\u7b26\u4e32","title":"1.2.6 \u5e26\u53c2\u6570"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%A3%85%E9%A5%B0%E5%99%A8/#13-b","text":"","title":"1.3 \u88c5\u9970\u5668-B\u7ad9\u6574\u7406"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%A3%85%E9%A5%B0%E5%99%A8/#131","text":"import time from functools import wraps def cal_time ( fn ): print ( '\u6211\u662f\u5916\u90e8\u51fd\u6570\uff0c\u6211\u88ab\u8c03\u7528\u4e86\uff01' ) print ( f 'fn= { fn } ' ) @wraps ( fn ) # \u539f\u89c6\u9891\u91cc\u6ca1\u6709 def inner (): '''\u8ba1\u7b97\u4ee3\u7801\u6267\u884c\u65f6\u957f''' start = time . time () fn () end = time . time () print ( f '\u4ee3\u7801\u8017\u65f6\uff1a { end - start } ' ) return inner @cal_time def demo (): '''\u8ba1\u7b971-999999\u7684\u548c''' x = 0 for i in range ( 1 , 1000000 ): x += i print ( x ) demo () # output: # \u6211\u662f\u5916\u90e8\u51fd\u6570\uff0c\u6211\u88ab\u8c03\u7528\u4e86\uff01 # fn=<function demo at 0x0000022E8AC8ADC0> # 499999500000 # \u4ee3\u7801\u8017\u65f6\uff1a0.07295680046081543","title":"1.3.1 \u57fa\u672c\u4f7f\u7528"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%A3%85%E9%A5%B0%E5%99%A8/#132","text":"import time from functools import wraps def cal_time ( fn ): print ( '\u6211\u662f\u5916\u90e8\u51fd\u6570\uff0c\u6211\u88ab\u8c03\u7528\u4e86\uff01' ) print ( f 'fn= { fn } ' ) @wraps ( fn ) # \u539f\u89c6\u9891\u91cc\u6ca1\u6709 def inner ( n , * args , ** kwargs ): '''\u8ba1\u7b97\u4ee3\u7801\u6267\u884c\u65f6\u957f''' start = time . time () s = fn ( n ) end = time . time () # print(f'\u4ee3\u7801\u8017\u65f6\uff1a{end-start}') return s , f '\u4ee3\u7801\u8017\u65f6\uff1a { end - start } ' return inner @cal_time def demo ( n ): '''\u8ba1\u7b971-999999\u7684\u548c''' x = 0 for i in range ( 1 , n ): x += i return x print ( demo ( 1000000 , 'hello' , y = 100 )) # output: # \u6211\u662f\u5916\u90e8\u51fd\u6570\uff0c\u6211\u88ab\u8c03\u7528\u4e86\uff01 # fn=<function demo at 0x000001C6D325ADC0> # (499999500000, '\u4ee3\u7801\u8017\u65f6\uff1a0.0859525203704834') # \u8981\u9075\u5faa\u5c01\u95ed\u5f00\u653e\u539f\u5219 # \u5982\u679c\u8d85\u8fc722\u70b9\u5c31\u4e0d\u8ba9\u73a9\u6e38\u620f\uff1b\u5982\u679c\u4e0d\u544a\u8bc9\u65f6\u95f4\uff0c\u5c31\u9ed8\u8ba4\u8ba9\u73a9 def can_play ( fn ): def inner ( x , y , * args , ** kwargs ): clock = kwargs . get ( 'clock' , 18 ) if clock <= 22 : fn ( x , y ) else : print ( '\u592a\u665a\u4e86\uff0c\u8d76\u7d27\u7761\uff01' ) return inner @can_play def play_game ( name , game ): print ( f ' { name } \u6b63\u5728\u73a9 { game } \u3002' ) play_game ( '\u5f20\u4e09' , '\u82f1\u96c4\u8054\u76df' , clock = 23 ) # Output: # \u592a\u665a\u4e86\uff0c\u8d76\u7d27\u7761\uff01","title":"1.3.2 \u53c2\u6570\u3001\u8fd4\u56de\u503c"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%A3%85%E9%A5%B0%E5%99%A8/#133","text":"def can_play ( clock ): def handle_action ( fn ): def do_action ( name , game ): if clock < 21 : fn ( name , game ) else : print ( '\u592a\u665a\u4e86\uff0c\u5feb\u7761\u5427\uff01' ) return do_action return handle_action @can_play ( 20 ) def play_game ( name , game ): print ( f ' { name } \u6b63\u5728\u73a9 { game } \u3002' ) play_game ( '\u5f20\u4e09' , '\u82f1\u96c4\u8054\u76df' ) # Output: \u5f20\u4e09\u6b63\u5728\u73a9\u82f1\u96c4\u8054\u76df\u3002 # \u7528\u6237\u6743\u9650 # \u4e8c\u8fdb\u5236 & \u8fd0\u7b97 user_permission = 13 del_permission = 8 read_permission = 4 write_permission = 2 exe_permission = 1 def check_permission ( x , y ): def handle_action ( fn ): def do_action (): if x & y != 0 : # \u6709\u6743\u9650\uff0c\u53ef\u4ee5\u6267\u884c fn () else : print ( '\u5bf9\u4e0d\u8d77\uff0c\u60a8\u6ca1\u6709\u76f8\u5e94\u6743\u9650\uff01' ) pass return do_action return handle_action @check_permission ( user_permission , read_permission ) def read (): print ( '\u6211\u6b63\u5728\u8bfb\u53d6\u5185\u5bb9' ) @check_permission ( user_permission , write_permission ) def write (): print ( '\u6211\u6b63\u5728\u5199\u5165\u5185\u5bb9' ) @check_permission ( user_permission , exe_permission ) def excute (): print ( '\u6211\u6b63\u5728\u6267\u884c\u5185\u5bb9' ) @check_permission ( user_permission , del_permission ) def delete (): print ( '\u6211\u6b63\u5728\u5220\u9664\u5185\u5bb9' ) read () write () excute () delete () # Output: # \u6211\u6b63\u5728\u8bfb\u53d6\u5185\u5bb9 # \u5bf9\u4e0d\u8d77\uff0c\u60a8\u6ca1\u6709\u76f8\u5e94\u6743\u9650\uff01 # \u6211\u6b63\u5728\u6267\u884c\u5185\u5bb9 # \u6211\u6b63\u5728\u5220\u9664\u5185\u5bb9","title":"1.3.3 \u9ad8\u7ea7\u7528\u6cd5\uff1a \u88c5\u9970\u5668\u5e26\u53c2\u6570"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/","text":"\u8f93\u5165\u4e0e\u8f93\u51fa \u00b6 \u7a0b\u5e8f\u8f93\u51fa\u6709\u51e0\u79cd\u663e\u793a\u65b9\u5f0f\uff1b\u6570\u636e\u65e2\u53ef\u4ee5\u8f93\u51fa\u4f9b\u4eba\u9605\u8bfb\u7684\u5f62\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u5199\u5165\u6587\u4ef6\u5907\u7528\u3002 1.1 \u66f4\u590d\u6742\u7684\u8f93\u51fa\u683c\u5f0f \u00b6 Python\u4e24\u79cd\u8f93\u51fa\u503c\u7684\u65b9\u5f0f: \u8868\u8fbe\u5f0f\u8bed\u53e5\u548c print() \u51fd\u6570\uff1b\u7b2c\u4e09\u79cd\u65b9\u5f0f\u662f\u4f7f\u7528\u6587\u4ef6\u5bf9\u8c61\u7684 write() \u65b9\u6cd5\uff0c\u6807\u51c6\u8f93\u51fa\u6587\u4ef6\u53ef\u4ee5\u7528 sys.stdout \u3002 \u683c\u5f0f\u5316\u8f93\u51fa\u5305\u62ec\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6cd5: \u4f7f\u7528 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5b57\u9762\u503c \uff0c\u8981\u5728\u5b57\u7b26\u4e32\u5f00\u5934\u7684\u5f15\u53f7/\u4e09\u5f15\u53f7\u524d\u6dfb\u52a0 f \u6216 F \u3002\u5728\u8fd9\u79cd\u5b57\u7b26\u4e32\u4e2d\uff0c\u53ef\u4ee5\u5728 { \u548c } \u5b57\u7b26\u4e4b\u95f4\u8f93\u5165\u5f15\u7528\u7684\u53d8\u91cf\uff0c\u6216\u5b57\u9762\u503c\u7684 Python \u8868\u8fbe\u5f0f\u3002 >>> year = 2016 >>> event = 'Referendum' >>> f 'Results of the { year } { event } ' 'Results of the 2016 Referendum' \u5b57\u7b26\u4e32\u7684 str.format() \u65b9\u6cd5\u3002 >>> yes_votes = 42_572_654 >>> no_votes = 43_132_495 >>> percentage = yes_votes / ( yes_votes + no_votes ) >>> ' {:-9} YES votes {:2.2%} ' . format ( yes_votes , percentage ) ' 42572654 YES votes 49.67%' \u6700\u540e\uff0c\u8fd8\u53ef\u4ee5\u7528\u5b57\u7b26\u4e32\u5207\u7247\u548c\u5408\u5e76\u64cd\u4f5c\u5b8c\u6210\u5b57\u7b26\u4e32\u5904\u7406\u64cd\u4f5c\uff0c\u521b\u5efa\u4efb\u4f55\u6392\u7248\u5e03\u5c40\u3002\u5b57\u7b26\u4e32\u7c7b\u578b\u8fd8\u652f\u6301\u5c06\u5b57\u7b26\u4e32\u6309\u7ed9\u5b9a\u5217\u5bbd\u8fdb\u884c\u586b\u5145\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u4e5f\u5f88\u6709\u7528\u3002 \u5982\u679c\u4e0d\u9700\u8981\u82b1\u54e8\u7684\u8f93\u51fa\uff0c\u53ea\u60f3\u5feb\u901f\u663e\u793a\u53d8\u91cf\u8fdb\u884c\u8c03\u8bd5\uff0c\u53ef\u4ee5\u7528 repr() \u6216 str() \u51fd\u6570\u628a\u503c\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\uff1a str() \u51fd\u6570\u8fd4\u56de\u4f9b\u4eba\u9605\u8bfb\u7684\u503c\uff0c repr() \u5219\u751f\u6210\u9002\u4e8e\u89e3\u91ca\u5668\u8bfb\u53d6\u7684\u503c\u3002 \u793a\u4f8b\u5982\u4e0b\uff1a >>> s = 'Hello, world.' >>> str ( s ) 'Hello, world.' >>> repr ( s ) \"'Hello, world.'\" >>> str ( 1 / 7 ) '0.14285714285714285' >>> x = 10 * 3.25 >>> y = 200 * 200 >>> s = 'The value of x is ' + repr ( x ) + ', and y is ' + repr ( y ) + '...' >>> print ( s ) The value of x is 32.5 , and y is 40000. .. >>> # The repr() of a string adds string quotes and backslashes: ... hello = 'hello, world \\n ' >>> hellos = repr ( hello ) >>> print ( hellos ) 'hello, world \\n ' >>> # The argument to repr() may be any Python object: ... repr (( x , y , ( 'spam' , 'eggs' ))) \"(32.5, 40000, ('spam', 'eggs'))\" 1.1.1 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff08f-\u5b57\u7b26\u4e32\uff09 \u00b6 f-\u5b57\u7b26\u4e32 \u662f\u5728\u5b57\u7b26\u4e32\u524d\u52a0\u524d\u7f00 f \u6216 F \uff0c\u901a\u8fc7 {expression} \u8868\u8fbe\u5f0f\uff0c\u628a Python \u8868\u8fbe\u5f0f\u7684\u503c\u6dfb\u52a0\u5230\u5b57\u7b26\u4e32\u5185\u3002\u683c\u5f0f\u8bf4\u660e\u7b26\u662f\u53ef\u9009\u7684\uff0c\u5199\u5728\u8868\u8fbe\u5f0f\u540e\u9762\uff0c\u53ef\u4ee5\u66f4\u597d\u5730\u63a7\u5236\u683c\u5f0f\u5316\u503c\u7684\u65b9\u5f0f\u3002\u4e0b\u4f8b\u5c06 pi \u56db\u820d\u4e94\u5165 \u5230\u5c0f\u6570\u70b9\u540e\u4e09\u4f4d\uff1a >>> import math >>> print ( f 'The value of pi is approximately { math . pi : .3f } .' ) The value of pi is approximately 3.142 . \u5728 ':' \u540e\u4f20\u9012\u6574\u6570\uff0c\u4e3a\u8be5\u5b57\u6bb5\u8bbe\u7f6e\u6700\u5c0f\u5b57\u7b26\u5bbd\u5ea6\uff0c\u5e38\u7528\u4e8e\u5217\u5bf9\u9f50\uff1a >>> table = { 'Sjoerd' : 4127 , 'Jack' : 4098 , 'Dcab' : 7678 } >>> for name , phone in table . items (): ... print ( f ' { name : 10 } ==> { phone : 10d } ' ) ... Sjoerd ==> 4127 Jack ==> 4098 Dcab ==> 7678 \u8fd8\u6709\u4e00\u4e9b\u4fee\u9970\u7b26\u53ef\u4ee5\u5728\u683c\u5f0f\u5316\u524d\u8f6c\u6362\u503c\u3002 '!a' \u5e94\u7528 ascii() \uff0c '!s' \u5e94\u7528 str() \uff0c '!r' \u5e94\u7528 repr() \uff1a >>> >>> animals = 'eels' >>> print ( f 'My hovercraft is full of { animals } .' ) My hovercraft is full of eels . >>> print ( f 'My hovercraft is full of { animals !r} .' ) My hovercraft is full of 'eels' . \u683c\u5f0f\u89c4\u8303\u53c2\u8003\u8be6\u89c1\u53c2\u8003\u6307\u5357 \u683c\u5f0f\u89c4\u683c\u8ff7\u4f60\u8bed\u8a00 \u3002 1.1.2 \u5b57\u7b26\u4e32format() \u65b9\u6cd5 \u00b6 str.format() \u65b9\u6cd5\u7684\u57fa\u672c\u7528\u6cd5\u5982\u4e0b\u6240\u793a\uff1a >>> print ( 'We are the {} who say \" {} !\"' . format ( 'knights' , 'Ni' )) We are the knights who say \"Ni!\" \u82b1\u62ec\u53f7\u53ca\u4e4b\u5185\u7684\u5b57\u7b26\uff08\u79f0\u4e3a\u683c\u5f0f\u5b57\u6bb5\uff09\u88ab\u66ff\u6362\u4e3a\u4f20\u9012\u7ed9 str.format() \u65b9\u6cd5\u7684\u5bf9\u8c61\u3002\u82b1\u62ec\u53f7\u4e2d\u7684\u6570\u5b57\u8868\u793a\u4f20\u9012\u7ed9 str.format() \u65b9\u6cd5\u7684\u5bf9\u8c61\u6240\u5728\u7684\u4f4d\u7f6e\u3002 >>> print ( ' {0} and {1} ' . format ( 'spam' , 'eggs' )) spam and eggs >>> print ( ' {1} and {0} ' . format ( 'spam' , 'eggs' )) eggs and spam str.format() \u65b9\u6cd5\u4e2d\u4f7f\u7528\u5173\u952e\u5b57\u53c2\u6570\u540d\u5f15\u7528\u503c\u3002 >>> print ( 'This {food} is {adjective} .' . format ( ... food = 'spam' , adjective = 'absolutely horrible' )) This spam is absolutely horrible . \u4f4d\u7f6e\u53c2\u6570\u548c\u5173\u952e\u5b57\u53c2\u6570\u53ef\u4ee5\u4efb\u610f\u7ec4\u5408\uff1a >>> print ( 'The story of {0} , {1} , and {other} .' . format ( 'Bill' , 'Manfred' , other = 'Georg' )) The story of Bill , Manfred , and Georg . \u5982\u679c\u4f60\u6709\u4e00\u4e2a\u5f88\u957f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32, \u800c\u4f60\u4e0d\u60f3\u5c06\u5b83\u4eec\u5206\u5f00, \u90a3\u4e48\u5728\u683c\u5f0f\u5316\u65f6\u901a\u8fc7\u53d8\u91cf\u540d\u800c\u975e\u4f4d\u7f6e\u4f1a\u662f\u5f88\u597d\u7684\u4e8b\u60c5\u3002\u8fd9\u9879\u64cd\u4f5c\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u5b57\u5178\uff0c\u5e76\u7528\u65b9\u62ec\u53f7 '[]' \u8bbf\u95ee\u952e\u6765\u5b8c\u6210\u3002 >>> table = { 'Sjoerd' : 4127 , 'Jack' : 4098 , 'Dcab' : 8637678 } >>> print ( 'Jack: {0[Jack]:d} ; Sjoerd: {0[Sjoerd]:d} ; ' ... 'Dcab: {0[Dcab]:d} ' . format ( table )) Jack : 4098 ; Sjoerd : 4127 ; Dcab : 8637678 \u4e5f\u53ef\u4ee5\u7528 '**' \u7b26\u53f7\uff0c\u628a table \u5f53\u4f5c\u4f20\u9012\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002 >>> table = { 'Sjoerd' : 4127 , 'Jack' : 4098 , 'Dcab' : 8637678 } >>> print ( 'Jack: {Jack:d} ; Sjoerd: {Sjoerd:d} ; Dcab: {Dcab:d} ' . format ( ** table )) Jack : 4098 ; Sjoerd : 4127 ; Dcab : 8637678 \u4e0e\u5185\u7f6e\u51fd\u6570 vars() \u7ed3\u5408\u4f7f\u7528\u65f6\uff0c\u8fd9\u79cd\u65b9\u5f0f\u975e\u5e38\u5b9e\u7528\uff0c\u53ef\u4ee5\u8fd4\u56de\u5305\u542b\u6240\u6709\u5c40\u90e8\u53d8\u91cf\u7684\u5b57\u5178\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u751f\u6210\u4e00\u7ec4\u6574\u9f50\u7684\u5217\uff0c\u5305\u542b\u7ed9\u5b9a\u6574\u6570\u53ca\u5176\u5e73\u65b9\u4e0e\u7acb\u65b9\uff1a >>> for x in range ( 1 , 11 ): ... print ( ' {0:2d} {1:3d} {2:4d} ' . format ( x , x * x , x * x * x )) ... 1 1 1 2 4 8 3 9 27 4 16 64 5 25 125 6 36 216 7 49 343 8 64 512 9 81 729 10 100 1000 str.format() \u8fdb\u884c\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u7684\u5b8c\u6574\u6982\u8ff0\u8be6\u89c1 \u683c\u5f0f\u5b57\u7b26\u4e32\u8bed\u6cd5 \u3002 1.1.3 \u624b\u52a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \u00b6 \u4e0b\u9762\u662f\u4f7f\u7528\u624b\u52a8\u683c\u5f0f\u5316\u65b9\u5f0f\u5b9e\u73b0\u7684\u540c\u4e00\u4e2a\u5e73\u65b9\u548c\u7acb\u65b9\u7684\u8868\uff1a >>> for x in range ( 1 , 11 ): ... print ( repr ( x ) . rjust ( 2 ), repr ( x * x ) . rjust ( 3 ), end = ' ' ) ... # Note use of 'end' on previous line ... print ( repr ( x * x * x ) . rjust ( 4 )) ... 1 1 1 2 4 8 3 9 27 4 16 64 5 25 125 6 36 216 7 49 343 8 64 512 9 81 729 10 100 1000 \uff08\u6ce8\u610f\uff0c\u6bcf\u5217\u4e4b\u95f4\u7684\u7a7a\u683c\u662f\u901a\u8fc7\u4f7f\u7528 print() \u6dfb\u52a0\u7684\uff1a\u5b83\u603b\u5728\u5176\u53c2\u6570\u95f4\u6dfb\u52a0\u7a7a\u683c\u3002\uff09 \u5b57\u7b26\u4e32\u5bf9\u8c61\u7684 str.rjust() \u65b9\u6cd5\u901a\u8fc7\u5728\u5de6\u4fa7\u586b\u5145\u7a7a\u683c\uff0c\u5bf9\u7ed9\u5b9a\u5bbd\u5ea6\u5b57\u6bb5\u4e2d\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u53f3\u5bf9\u9f50\u3002\u540c\u7c7b\u65b9\u6cd5\u8fd8\u6709 str.ljust() \u548c str.center() \u3002\u8fd9\u4e9b\u65b9\u6cd5\u4e0d\u5199\u5165\u4efb\u4f55\u5185\u5bb9\uff0c\u53ea\u8fd4\u56de\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u592a\u957f\uff0c\u5b83\u4eec\u4e0d\u4f1a\u622a\u65ad\u5b57\u7b26\u4e32\uff0c\u800c\u662f\u539f\u6837\u8fd4\u56de\uff1b\u867d\u7136\u8fd9\u79cd\u65b9\u5f0f\u4f1a\u5f04\u4e71\u5217\u5e03\u5c40\uff0c\u4f46\u4e5f\u6bd4\u53e6\u4e00\u79cd\u65b9\u6cd5\u597d\uff0c\u540e\u8005\u5728\u663e\u793a\u503c\u65f6\u53ef\u80fd\u4e0d\u51c6\u786e\uff08\u5982\u679c\u771f\u7684\u60f3\u622a\u65ad\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u4f7f\u7528 x.ljust(n)[:n] \u8fd9\u6837\u7684\u5207\u7247\u64cd\u4f5c \u3002\uff09 \u53e6\u4e00\u79cd\u65b9\u6cd5\u662f str.zfill() \uff0c\u8be5\u65b9\u6cd5\u5728\u6570\u5b57\u5b57\u7b26\u4e32\u5de6\u8fb9\u586b\u5145\u96f6\uff0c\u4e14\u80fd\u8bc6\u522b\u6b63\u8d1f\u53f7\uff1a >>> '12' . zfill ( 5 ) '00012' >>> '-3.14' . zfill ( 7 ) '-003.14' >>> '3.14159265359' . zfill ( 5 ) '3.14159265359' 1.1.4 \u65e7\u5f0f\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u65b9\u6cd5 \u00b6 % \u8fd0\u7b97\u7b26\uff08\u6c42\u4f59\u7b26\uff09\u4e5f\u53ef\u7528\u4e8e\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u3002\u7ed9\u5b9a 'string' % values \uff0c\u5219 string \u4e2d\u7684 % \u5b9e\u4f8b\u4f1a\u4ee5\u96f6\u4e2a\u6216\u591a\u4e2a values \u5143\u7d20\u66ff\u6362\u3002\u6b64\u64cd\u4f5c\u88ab\u79f0\u4e3a\u5b57\u7b26\u4e32\u63d2\u503c\u3002\u4f8b\u5982\uff1a >>> import math >>> print ( 'The value of pi is approximately %5.3f .' % math . pi ) The value of pi is approximately 3.142 . printf \u98ce\u683c\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u5316 \u5c0f\u8282\u4ecb\u7ecd\u66f4\u591a\u76f8\u5173\u5185\u5bb9\u3002 1.2 \u8bfb\u5199\u6587\u4ef6 \u00b6 open() \u8fd4\u56de file object \uff0c\u6700\u5e38\u7528\u7684\u53c2\u6570\u6709\u4e24\u4e2a: open(filename, mode) \u3002 >>> f = open ( 'workfile' , 'w' ) \u7b2c\u4e00\u4e2a\u5b9e\u53c2\u662f\u6587\u4ef6\u540d\u5b57\u7b26\u4e32\u3002\u7b2c\u4e8c\u4e2a\u5b9e\u53c2\u662f\u5305\u542b\u63cf\u8ff0\u6587\u4ef6\u4f7f\u7528\u65b9\u5f0f\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u3002 mode \u7684\u503c\u5305\u62ec 'r' \uff0c\u8868\u793a\u6587\u4ef6\u53ea\u80fd\u8bfb\u53d6\uff1b 'w' \u8868\u793a\u53ea\u80fd\u5199\u5165\uff08\u73b0\u6709\u540c\u540d\u6587\u4ef6\u4f1a\u88ab\u8986\u76d6\uff09\uff1b 'a' \u8868\u793a\u6253\u5f00\u6587\u4ef6\u5e76\u8ffd\u52a0\u5185\u5bb9\uff0c\u4efb\u4f55\u5199\u5165\u7684\u6570\u636e\u4f1a\u81ea\u52a8\u6dfb\u52a0\u5230\u6587\u4ef6\u672b\u5c3e\u3002 'r+' \u8868\u793a\u6253\u5f00\u6587\u4ef6\u8fdb\u884c\u8bfb\u5199\u3002 mode \u5b9e\u53c2\u662f\u53ef\u9009\u7684\uff0c\u7701\u7565\u65f6\u7684\u9ed8\u8ba4\u503c\u4e3a 'r' \u3002 \u901a\u5e38\uff0c\u6587\u4ef6\u4ee5 text mode \u6253\u5f00\uff0c\u5373\uff0c\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6216\u5199\u5165\u5b57\u7b26\u4e32\u65f6\uff0c\u90fd\u4ee5\u6307\u5b9a\u7f16\u7801\u65b9\u5f0f\u8fdb\u884c\u7f16\u7801\u3002\u5982\u672a\u6307\u5b9a\u7f16\u7801\u683c\u5f0f\uff0c\u9ed8\u8ba4\u503c\u4e0e\u5e73\u53f0\u76f8\u5173 (\u53c2\u89c1 open() )\u3002\u5728 mode \u4e2d\u8ffd\u52a0\u7684 'b' \u5219\u4ee5 binary mode \u6253\u5f00\u6587\u4ef6\uff1a\u6b64\u65f6\uff0c\u6570\u636e\u4ee5\u5b57\u8282\u5bf9\u8c61\u7684\u5f62\u5f0f\u8fdb\u884c\u8bfb\u5199\u3002\u8be5\u6a21\u5f0f\u7528\u4e8e\u6240\u6709\u4e0d\u5305\u542b\u6587\u672c\u7684\u6587\u4ef6\u3002 \u5728\u6587\u672c\u6a21\u5f0f\u4e0b\u8bfb\u53d6\u6587\u4ef6\u65f6\uff0c\u9ed8\u8ba4\u628a\u5e73\u53f0\u7279\u5b9a\u7684\u884c\u7ed3\u675f\u7b26\uff08Unix \u4e0a\u4e3a \\n , Windows \u4e0a\u4e3a \\r\\n \uff09\u8f6c\u6362\u4e3a \\n \u3002\u5728\u6587\u672c\u6a21\u5f0f\u4e0b\u5199\u5165\u6570\u636e\u65f6\uff0c\u9ed8\u8ba4\u628a \\n \u8f6c\u6362\u56de\u5e73\u53f0\u7279\u5b9a\u7ed3\u675f\u7b26\u3002\u8fd9\u79cd\u64cd\u4f5c\u65b9\u5f0f\u5728\u540e\u53f0\u4fee\u6539\u6587\u4ef6\u6570\u636e\u5bf9\u6587\u672c\u6587\u4ef6\u6765\u8bf4\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u4f1a\u7834\u574f JPEG \u6216 EXE \u7b49\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u3002\u6ce8\u610f\uff0c\u5728\u8bfb\u5199\u6b64\u7c7b\u6587\u4ef6\u65f6\uff0c\u4e00\u5b9a\u8981\u4f7f\u7528\u4e8c\u8fdb\u5236\u6a21\u5f0f\u3002 \u5728\u5904\u7406\u6587\u4ef6\u5bf9\u8c61\u65f6\uff0c\u6700\u597d\u4f7f\u7528 with \u5173\u952e\u5b57\u3002\u4f18\u70b9\u662f\uff0c\u5b50\u53e5\u4f53\u7ed3\u675f\u540e\uff0c\u6587\u4ef6\u4f1a\u6b63\u786e\u5173\u95ed\uff0c\u5373\u4fbf\u89e6\u53d1\u5f02\u5e38\u4e5f\u53ef\u4ee5\u3002\u800c\u4e14\uff0c\u4f7f\u7528 with \u76f8\u6bd4\u7b49\u6548\u7684 try - finally \u4ee3\u7801\u5757\u8981\u7b80\u77ed\u5f97\u591a\uff1a >>> with open ( 'workfile' ) as f : ... read_data = f . read () >>> # We can check that the file has been automatically closed. >>> f . closed True \u5982\u679c\u6ca1\u6709\u4f7f\u7528 with \u5173\u952e\u5b57\uff0c\u5219\u5e94\u8c03\u7528 f.close() \u5173\u95ed\u6587\u4ef6\uff0c\u5373\u53ef\u91ca\u653e\u6587\u4ef6\u5360\u7528\u7684\u7cfb\u7edf\u8d44\u6e90\u3002 **\u8b66\u544a\uff1a**\u8c03\u7528 f.write() \u65f6\uff0c\u672a\u4f7f\u7528 with \u5173\u952e\u5b57\uff0c\u6216\u672a\u8c03\u7528 f.close() \uff0c\u5373\u4f7f\u7a0b\u5e8f\u6b63\u5e38\u9000\u51fa\uff0c\u4e5f\u53ef\u80fd \u5bfc\u81f4 f.write() \u7684\u53c2\u6570\u6ca1\u6709\u5b8c\u5168\u5199\u5165\u78c1\u76d8\u3002 \u901a\u8fc7 with \u8bed\u53e5\uff0c\u6216\u8c03\u7528 f.close() \u5173\u95ed\u6587\u4ef6\u5bf9\u8c61\u540e\uff0c\u518d\u6b21\u4f7f\u7528\u8be5\u6587\u4ef6\u5bf9\u8c61\u5c06\u4f1a\u5931\u8d25\u3002 >>> f . close () >>> f . read () Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > ValueError : I / O operation on closed file . 1.2.1 \u6587\u4ef6\u5bf9\u8c61\u7684\u65b9\u6cd5 \u00b6 \u672c\u8282\u4e0b\u6587\u4e2d\u7684\u4f8b\u5b50\u5047\u5b9a\u5df2\u521b\u5efa f \u6587\u4ef6\u5bf9\u8c61\u3002 f.read(size) \u53ef\u7528\u4e8e\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\uff0c\u5b83\u4f1a\u8bfb\u53d6\u4e00\u4e9b\u6570\u636e\uff0c\u5e76\u8fd4\u56de\u5b57\u7b26\u4e32\uff08\u6587\u672c\u6a21\u5f0f\uff09\uff0c\u6216\u5b57\u8282\u4e32\u5bf9\u8c61\uff08\u5728\u4e8c\u8fdb\u5236\u6a21\u5f0f\u4e0b\uff09\u3002 size \u662f\u53ef\u9009\u7684\u6570\u503c\u53c2\u6570\u3002\u7701\u7565 size \u6216 size \u4e3a\u8d1f\u6570\u65f6\uff0c\u8bfb\u53d6\u5e76\u8fd4\u56de\u6574\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\uff1b\u6587\u4ef6\u5927\u5c0f\u662f\u5185\u5b58\u7684\u4e24\u500d\u65f6\uff0c\u4f1a\u51fa\u73b0\u95ee\u9898\u3002 size \u53d6\u5176\u4ed6\u503c\u65f6\uff0c\u8bfb\u53d6\u5e76\u8fd4\u56de\u6700\u591a size \u4e2a\u5b57\u7b26\uff08\u6587\u672c\u6a21\u5f0f\uff09\u6216 size \u4e2a\u5b57\u8282\uff08\u4e8c\u8fdb\u5236\u6a21\u5f0f\uff09\u3002\u5982\u5df2\u5230\u8fbe\u6587\u4ef6\u672b\u5c3e\uff0c f.read() \u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff08 '' \uff09\u3002 >>> f . read () 'This is the entire file. \\n ' >>> f . read () '' f.readline() \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5355\u884c\u6570\u636e\uff1b\u5b57\u7b26\u4e32\u672b\u5c3e\u4fdd\u7559\u6362\u884c\u7b26\uff08 \\n \uff09\uff0c\u53ea\u6709\u5728\u6587\u4ef6\u4e0d\u4ee5\u6362\u884c\u7b26\u7ed3\u5c3e\u65f6\uff0c\u6587\u4ef6\u7684\u6700\u540e\u4e00\u884c\u624d\u4f1a\u7701\u7565\u6362\u884c\u7b26\u3002\u8fd9\u79cd\u65b9\u5f0f\u8ba9\u8fd4\u56de\u503c\u6e05\u6670\u660e\u786e\uff1b\u53ea\u8981 f.readline() \u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u5c31\u8868\u793a\u5df2\u7ecf\u5230\u8fbe\u4e86\u6587\u4ef6\u672b\u5c3e\uff0c\u7a7a\u884c\u4f7f\u7528 '\\n' \u8868\u793a\uff0c\u8be5\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u4e00\u4e2a\u6362\u884c\u7b26\u3002 >>> f . readline () 'This is the first line of the file. \\n ' >>> f . readline () 'Second line of the file \\n ' >>> f . readline () '' \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u591a\u884c\u65f6\uff0c\u53ef\u4ee5\u7528\u5faa\u73af\u904d\u5386\u6574\u4e2a\u6587\u4ef6\u5bf9\u8c61\u3002\u8fd9\u79cd\u64cd\u4f5c\u80fd\u9ad8\u6548\u5229\u7528\u5185\u5b58\uff0c\u5feb\u901f\uff0c\u4e14\u4ee3\u7801\u7b80\u5355\uff1a >>> for line in f : ... print ( line , end = '' ) ... This is the first line of the file . Second line of the file \u5982\u9700\u4ee5\u5217\u8868\u5f62\u5f0f\u8bfb\u53d6\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u884c\uff0c\u53ef\u4ee5\u7528 list(f) \u6216 f.readlines() \u3002 f.write(string) \u628a string \u7684\u5185\u5bb9\u5199\u5165\u6587\u4ef6\uff0c\u5e76\u8fd4\u56de\u5199\u5165\u7684\u5b57\u7b26\u6570\u3002 >>> f . write ( 'This is a test \\n ' ) 15 \u5199\u5165\u5176\u4ed6\u7c7b\u578b\u7684\u5bf9\u8c61\u524d\uff0c\u8981\u5148\u628a\u5b83\u4eec\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\uff08\u6587\u672c\u6a21\u5f0f\uff09\u6216\u5b57\u8282\u5bf9\u8c61\uff08\u4e8c\u8fdb\u5236\u6a21\u5f0f\uff09\uff1a >>> value = ( 'the answer' , 42 ) >>> s = str ( value ) # convert the tuple to string >>> f . write ( s ) 18 f.tell() \u8fd4\u56de\u6574\u6570\uff0c\u7ed9\u51fa\u6587\u4ef6\u5bf9\u8c61\u5728\u6587\u4ef6\u4e2d\u7684\u5f53\u524d\u4f4d\u7f6e\uff0c\u8868\u793a\u4e3a\u4e8c\u8fdb\u5236\u6a21\u5f0f\u4e0b\u65f6\u4ece\u6587\u4ef6\u5f00\u59cb\u7684\u5b57\u8282\u6570\uff0c\u4ee5\u53ca\u6587\u672c\u6a21\u5f0f\u4e0b\u7684\u610f\u4e49\u4e0d\u660e\u7684\u6570\u5b57\u3002 f.seek(offset, whence) \u53ef\u4ee5\u6539\u53d8\u6587\u4ef6\u5bf9\u8c61\u7684\u4f4d\u7f6e\u3002\u901a\u8fc7\u5411\u53c2\u8003\u70b9\u6dfb\u52a0 offset \u8ba1\u7b97\u4f4d\u7f6e\uff1b\u53c2\u8003\u70b9\u7531 whence \u53c2\u6570\u6307\u5b9a\u3002 whence \u503c\u4e3a 0 \u65f6\uff0c\u8868\u793a\u4ece\u6587\u4ef6\u5f00\u5934\u8ba1\u7b97\uff0c1 \u8868\u793a\u4f7f\u7528\u5f53\u524d\u6587\u4ef6\u4f4d\u7f6e\uff0c2 \u8868\u793a\u4f7f\u7528\u6587\u4ef6\u672b\u5c3e\u4f5c\u4e3a\u53c2\u8003\u70b9\u3002\u7701\u7565 whence \u65f6\uff0c\u5176\u9ed8\u8ba4\u503c\u4e3a 0\uff0c\u5373\u4f7f\u7528\u6587\u4ef6\u5f00\u5934\u4f5c\u4e3a\u53c2\u8003\u70b9\u3002 >>> f = open ( 'workfile' , 'rb+' ) >>> f . write ( b '0123456789abcdef' ) 16 >>> f . seek ( 5 ) # Go to the 6th byte in the file 5 >>> f . read ( 1 ) b '5' >>> f . seek ( - 3 , 2 ) # Go to the 3rd byte before the end 13 >>> f . read ( 1 ) b 'd' \u5728\u6587\u672c\u6587\u4ef6\uff08\u6a21\u5f0f\u5b57\u7b26\u4e32\u672a\u4f7f\u7528 b \u65f6\u6253\u5f00\u7684\u6587\u4ef6\uff09\u4e2d\uff0c\u53ea\u5141\u8bb8\u76f8\u5bf9\u4e8e\u6587\u4ef6\u5f00\u5934\u641c\u7d22\uff08\u4f7f\u7528 seek(0, 2) \u641c\u7d22\u5230\u6587\u4ef6\u672b\u5c3e\u662f\u4e2a\u4f8b\u5916\uff09\uff0c\u552f\u4e00\u6709\u6548\u7684 offset \u503c\u662f\u80fd\u4ece f.tell() \u4e2d\u8fd4\u56de\u7684\uff0c\u6216 0\u3002\u5176\u4ed6 offset \u503c\u90fd\u4f1a\u4ea7\u751f\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\u3002 \u6587\u4ef6\u5bf9\u8c61\u8fd8\u652f\u6301 isatty() \u548c truncate() \u7b49\u65b9\u6cd5\uff0c\u4f46\u4e0d\u5e38\u7528\uff1b\u6587\u4ef6\u5bf9\u8c61\u7684\u5b8c\u6574\u6307\u5357\u8be6\u89c1\u5e93\u53c2\u8003\u3002 1.2.2 \u4f7f\u7528 json \u4fdd\u5b58\u7ed3\u6784\u5316\u6570\u636e \u00b6 \u4ece\u6587\u4ef6\u5199\u5165\u6216\u8bfb\u53d6\u5b57\u7b26\u4e32\u5f88\u7b80\u5355\uff0c\u6570\u5b57\u5219\u7a0d\u663e\u9ebb\u70e6\uff0c\u56e0\u4e3a read() \u65b9\u6cd5\u53ea\u8fd4\u56de\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e9b\u5b57\u7b26\u4e32\u5fc5\u987b\u4f20\u9012\u7ed9 int() \u8fd9\u6837\u7684\u51fd\u6570\uff0c\u63a5\u53d7 '123' \u8fd9\u6837\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u8fd4\u56de\u6570\u5b57\u503c 123\u3002\u4fdd\u5b58\u5d4c\u5957\u5217\u8868\u3001\u5b57\u5178\u7b49\u590d\u6742\u6570\u636e\u7c7b\u578b\u65f6\uff0c\u624b\u52a8\u89e3\u6790\u548c\u5e8f\u5217\u5316\u7684\u64cd\u4f5c\u975e\u5e38\u590d\u6742\u3002 Python \u652f\u6301 JSON (JavaScript Object Notation) \u8fd9\u79cd\u6d41\u884c\u6570\u636e\u4ea4\u6362\u683c\u5f0f\uff0c\u7528\u6237\u65e0\u9700\u6ca1\u5b8c\u6ca1\u4e86\u5730\u7f16\u5199\u3001\u8c03\u8bd5\u4ee3\u7801\uff0c\u624d\u80fd\u628a\u590d\u6742\u7684\u6570\u636e\u7c7b\u578b\u4fdd\u5b58\u5230\u6587\u4ef6\u3002 json \u6807\u51c6\u6a21\u5757\u91c7\u7528 Python \u6570\u636e\u5c42\u6b21\u7ed3\u6784\uff0c\u5e76\u5c06\u4e4b\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\uff1b\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a serializing \uff08\u5e8f\u5217\u5316\uff09\u3002\u4ece\u5b57\u7b26\u4e32\u8868\u793a\u4e2d\u91cd\u5efa\u6570\u636e\u79f0\u4e3a deserializing \uff08\u89e3\u5e8f\u5316\uff09\u3002\u5728\u5e8f\u5217\u5316\u548c\u89e3\u5e8f\u5316\u4e4b\u95f4\uff0c\u8868\u793a\u5bf9\u8c61\u7684\u5b57\u7b26\u4e32\u53ef\u80fd\u5df2\u7ecf\u5b58\u50a8\u5728\u6587\u4ef6\u6216\u6570\u636e\u4e2d\uff0c\u6216\u901a\u8fc7\u7f51\u7edc\u8fde\u63a5\u53d1\u9001\u5230\u8fdc\u65b9 \u7684\u673a\u5668\u3002 \u6ce8\u89e3\uff1a JSON \u683c\u5f0f\u901a\u5e38\u7528\u4e8e\u73b0\u4ee3\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u4ea4\u6362\u3002\u7a0b\u5e8f\u5458\u65e9\u5df2\u5bf9\u5b83\u8033\u719f\u80fd\u8be6\uff0c\u53ef\u8c13\u662f\u4ea4\u4e92\u64cd\u4f5c\u7684\u4e0d\u4e8c\u4e4b\u9009\u3002 \u53ea\u9700\u4e00\u884c\u7b80\u5355\u7684\u4ee3\u7801\u5373\u53ef\u67e5\u770b\u67d0\u4e2a\u5bf9\u8c61\u7684 JSON \u5b57\u7b26\u4e32\u8868\u73b0\u5f62\u5f0f\uff1a >>> import json >>> json . dumps ([ 1 , 'simple' , 'list' ]) '[1, \"simple\", \"list\"]' dumps() \u51fd\u6570\u8fd8\u6709\u4e00\u4e2a\u53d8\u4f53\uff0c dump() \uff0c\u5b83\u53ea\u5c06\u5bf9\u8c61\u5e8f\u5217\u5316\u4e3a text file \u3002\u56e0\u6b64\uff0c\u5982\u679c f \u662f text file \u5bf9\u8c61\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a json . dump ( x , f ) \u8981\u518d\u6b21\u89e3\u7801\u5bf9\u8c61\uff0c\u5982\u679c f \u662f\u5df2\u6253\u5f00\u3001\u4f9b\u8bfb\u53d6\u7684 text file \u5bf9\u8c61\uff1a x = json . load ( f ) \u8fd9\u79cd\u7b80\u5355\u7684\u5e8f\u5217\u5316\u6280\u672f\u53ef\u4ee5\u5904\u7406\u5217\u8868\u548c\u5b57\u5178\uff0c\u4f46\u5728 JSON \u4e2d\u5e8f\u5217\u5316\u4efb\u610f\u7c7b\u7684\u5b9e\u4f8b\uff0c\u5219\u9700\u8981\u4ed8\u51fa\u989d\u5916\u52aa\u529b\u3002 json \u6a21\u5757\u7684\u53c2\u8003\u5305\u542b\u5bf9\u6b64\u7684\u89e3\u91ca\u3002 \u53c2\u89c1\uff1a pickle - \u5c01\u5b58\u6a21\u5757 \u4e0e JSON \u4e0d\u540c\uff0c pickle \u662f\u4e00\u79cd\u5141\u8bb8\u5bf9\u590d\u6742 Python \u5bf9\u8c61\u8fdb\u884c\u5e8f\u5217\u5316\u7684\u534f\u8bae\u3002\u56e0\u6b64\uff0c\u5b83\u4e3a Python \u6240\u7279\u6709\uff0c\u4e0d\u80fd\u7528\u4e8e\u4e0e\u5176\u4ed6\u8bed\u8a00\u7f16\u5199\u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u4fe1\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5b83\u4e5f\u662f\u4e0d\u5b89\u5168\u7684\uff1a\u5982\u679c\u89e3\u5e8f\u5316\u7684\u6570\u636e\u662f\u7531\u624b\u6bb5\u9ad8\u660e\u7684\u653b\u51fb\u8005\u7cbe\u5fc3\u8bbe\u8ba1\u7684\uff0c\u8fd9\u79cd\u4e0d\u53d7\u4fe1\u4efb\u6765\u6e90\u7684 pickle \u6570\u636e\u53ef\u4ee5\u6267\u884c\u4efb\u610f\u4ee3\u7801\u3002 1.2.3 \u8bfb\u53d6\u952e\u76d8\u8f93\u5165 \u00b6 Python \u63d0\u4f9b\u4e86 input() \u5185\u7f6e\u51fd\u6570 \u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u5165\u4e00\u884c\u6587\u672c\uff0c\u9ed8\u8ba4\u7684\u6807\u51c6\u8f93\u5165\u662f\u952e\u76d8\u3002 number = int ( input ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff1a\" )) print ( \"\u4f60\u8f93\u5165\u7684\u6574\u6570\u662f: \" , number ) \u8bf7\u8f93\u5165\u4e00\u4e2a\u6574\u6570 \uff1a 12 \u4f60\u8f93\u5165\u7684\u6574\u6570\u662f \uff1a 12","title":"\u8f93\u5165\u4e0e\u8f93\u51fa"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_1","text":"\u7a0b\u5e8f\u8f93\u51fa\u6709\u51e0\u79cd\u663e\u793a\u65b9\u5f0f\uff1b\u6570\u636e\u65e2\u53ef\u4ee5\u8f93\u51fa\u4f9b\u4eba\u9605\u8bfb\u7684\u5f62\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u5199\u5165\u6587\u4ef6\u5907\u7528\u3002","title":"\u8f93\u5165\u4e0e\u8f93\u51fa"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#11","text":"Python\u4e24\u79cd\u8f93\u51fa\u503c\u7684\u65b9\u5f0f: \u8868\u8fbe\u5f0f\u8bed\u53e5\u548c print() \u51fd\u6570\uff1b\u7b2c\u4e09\u79cd\u65b9\u5f0f\u662f\u4f7f\u7528\u6587\u4ef6\u5bf9\u8c61\u7684 write() \u65b9\u6cd5\uff0c\u6807\u51c6\u8f93\u51fa\u6587\u4ef6\u53ef\u4ee5\u7528 sys.stdout \u3002 \u683c\u5f0f\u5316\u8f93\u51fa\u5305\u62ec\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6cd5: \u4f7f\u7528 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5b57\u9762\u503c \uff0c\u8981\u5728\u5b57\u7b26\u4e32\u5f00\u5934\u7684\u5f15\u53f7/\u4e09\u5f15\u53f7\u524d\u6dfb\u52a0 f \u6216 F \u3002\u5728\u8fd9\u79cd\u5b57\u7b26\u4e32\u4e2d\uff0c\u53ef\u4ee5\u5728 { \u548c } \u5b57\u7b26\u4e4b\u95f4\u8f93\u5165\u5f15\u7528\u7684\u53d8\u91cf\uff0c\u6216\u5b57\u9762\u503c\u7684 Python \u8868\u8fbe\u5f0f\u3002 >>> year = 2016 >>> event = 'Referendum' >>> f 'Results of the { year } { event } ' 'Results of the 2016 Referendum' \u5b57\u7b26\u4e32\u7684 str.format() \u65b9\u6cd5\u3002 >>> yes_votes = 42_572_654 >>> no_votes = 43_132_495 >>> percentage = yes_votes / ( yes_votes + no_votes ) >>> ' {:-9} YES votes {:2.2%} ' . format ( yes_votes , percentage ) ' 42572654 YES votes 49.67%' \u6700\u540e\uff0c\u8fd8\u53ef\u4ee5\u7528\u5b57\u7b26\u4e32\u5207\u7247\u548c\u5408\u5e76\u64cd\u4f5c\u5b8c\u6210\u5b57\u7b26\u4e32\u5904\u7406\u64cd\u4f5c\uff0c\u521b\u5efa\u4efb\u4f55\u6392\u7248\u5e03\u5c40\u3002\u5b57\u7b26\u4e32\u7c7b\u578b\u8fd8\u652f\u6301\u5c06\u5b57\u7b26\u4e32\u6309\u7ed9\u5b9a\u5217\u5bbd\u8fdb\u884c\u586b\u5145\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u4e5f\u5f88\u6709\u7528\u3002 \u5982\u679c\u4e0d\u9700\u8981\u82b1\u54e8\u7684\u8f93\u51fa\uff0c\u53ea\u60f3\u5feb\u901f\u663e\u793a\u53d8\u91cf\u8fdb\u884c\u8c03\u8bd5\uff0c\u53ef\u4ee5\u7528 repr() \u6216 str() \u51fd\u6570\u628a\u503c\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\uff1a str() \u51fd\u6570\u8fd4\u56de\u4f9b\u4eba\u9605\u8bfb\u7684\u503c\uff0c repr() \u5219\u751f\u6210\u9002\u4e8e\u89e3\u91ca\u5668\u8bfb\u53d6\u7684\u503c\u3002 \u793a\u4f8b\u5982\u4e0b\uff1a >>> s = 'Hello, world.' >>> str ( s ) 'Hello, world.' >>> repr ( s ) \"'Hello, world.'\" >>> str ( 1 / 7 ) '0.14285714285714285' >>> x = 10 * 3.25 >>> y = 200 * 200 >>> s = 'The value of x is ' + repr ( x ) + ', and y is ' + repr ( y ) + '...' >>> print ( s ) The value of x is 32.5 , and y is 40000. .. >>> # The repr() of a string adds string quotes and backslashes: ... hello = 'hello, world \\n ' >>> hellos = repr ( hello ) >>> print ( hellos ) 'hello, world \\n ' >>> # The argument to repr() may be any Python object: ... repr (( x , y , ( 'spam' , 'eggs' ))) \"(32.5, 40000, ('spam', 'eggs'))\"","title":"1.1 \u66f4\u590d\u6742\u7684\u8f93\u51fa\u683c\u5f0f"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#111-f-","text":"f-\u5b57\u7b26\u4e32 \u662f\u5728\u5b57\u7b26\u4e32\u524d\u52a0\u524d\u7f00 f \u6216 F \uff0c\u901a\u8fc7 {expression} \u8868\u8fbe\u5f0f\uff0c\u628a Python \u8868\u8fbe\u5f0f\u7684\u503c\u6dfb\u52a0\u5230\u5b57\u7b26\u4e32\u5185\u3002\u683c\u5f0f\u8bf4\u660e\u7b26\u662f\u53ef\u9009\u7684\uff0c\u5199\u5728\u8868\u8fbe\u5f0f\u540e\u9762\uff0c\u53ef\u4ee5\u66f4\u597d\u5730\u63a7\u5236\u683c\u5f0f\u5316\u503c\u7684\u65b9\u5f0f\u3002\u4e0b\u4f8b\u5c06 pi \u56db\u820d\u4e94\u5165 \u5230\u5c0f\u6570\u70b9\u540e\u4e09\u4f4d\uff1a >>> import math >>> print ( f 'The value of pi is approximately { math . pi : .3f } .' ) The value of pi is approximately 3.142 . \u5728 ':' \u540e\u4f20\u9012\u6574\u6570\uff0c\u4e3a\u8be5\u5b57\u6bb5\u8bbe\u7f6e\u6700\u5c0f\u5b57\u7b26\u5bbd\u5ea6\uff0c\u5e38\u7528\u4e8e\u5217\u5bf9\u9f50\uff1a >>> table = { 'Sjoerd' : 4127 , 'Jack' : 4098 , 'Dcab' : 7678 } >>> for name , phone in table . items (): ... print ( f ' { name : 10 } ==> { phone : 10d } ' ) ... Sjoerd ==> 4127 Jack ==> 4098 Dcab ==> 7678 \u8fd8\u6709\u4e00\u4e9b\u4fee\u9970\u7b26\u53ef\u4ee5\u5728\u683c\u5f0f\u5316\u524d\u8f6c\u6362\u503c\u3002 '!a' \u5e94\u7528 ascii() \uff0c '!s' \u5e94\u7528 str() \uff0c '!r' \u5e94\u7528 repr() \uff1a >>> >>> animals = 'eels' >>> print ( f 'My hovercraft is full of { animals } .' ) My hovercraft is full of eels . >>> print ( f 'My hovercraft is full of { animals !r} .' ) My hovercraft is full of 'eels' . \u683c\u5f0f\u89c4\u8303\u53c2\u8003\u8be6\u89c1\u53c2\u8003\u6307\u5357 \u683c\u5f0f\u89c4\u683c\u8ff7\u4f60\u8bed\u8a00 \u3002","title":"1.1.1 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff08f-\u5b57\u7b26\u4e32\uff09"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#112-format","text":"str.format() \u65b9\u6cd5\u7684\u57fa\u672c\u7528\u6cd5\u5982\u4e0b\u6240\u793a\uff1a >>> print ( 'We are the {} who say \" {} !\"' . format ( 'knights' , 'Ni' )) We are the knights who say \"Ni!\" \u82b1\u62ec\u53f7\u53ca\u4e4b\u5185\u7684\u5b57\u7b26\uff08\u79f0\u4e3a\u683c\u5f0f\u5b57\u6bb5\uff09\u88ab\u66ff\u6362\u4e3a\u4f20\u9012\u7ed9 str.format() \u65b9\u6cd5\u7684\u5bf9\u8c61\u3002\u82b1\u62ec\u53f7\u4e2d\u7684\u6570\u5b57\u8868\u793a\u4f20\u9012\u7ed9 str.format() \u65b9\u6cd5\u7684\u5bf9\u8c61\u6240\u5728\u7684\u4f4d\u7f6e\u3002 >>> print ( ' {0} and {1} ' . format ( 'spam' , 'eggs' )) spam and eggs >>> print ( ' {1} and {0} ' . format ( 'spam' , 'eggs' )) eggs and spam str.format() \u65b9\u6cd5\u4e2d\u4f7f\u7528\u5173\u952e\u5b57\u53c2\u6570\u540d\u5f15\u7528\u503c\u3002 >>> print ( 'This {food} is {adjective} .' . format ( ... food = 'spam' , adjective = 'absolutely horrible' )) This spam is absolutely horrible . \u4f4d\u7f6e\u53c2\u6570\u548c\u5173\u952e\u5b57\u53c2\u6570\u53ef\u4ee5\u4efb\u610f\u7ec4\u5408\uff1a >>> print ( 'The story of {0} , {1} , and {other} .' . format ( 'Bill' , 'Manfred' , other = 'Georg' )) The story of Bill , Manfred , and Georg . \u5982\u679c\u4f60\u6709\u4e00\u4e2a\u5f88\u957f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32, \u800c\u4f60\u4e0d\u60f3\u5c06\u5b83\u4eec\u5206\u5f00, \u90a3\u4e48\u5728\u683c\u5f0f\u5316\u65f6\u901a\u8fc7\u53d8\u91cf\u540d\u800c\u975e\u4f4d\u7f6e\u4f1a\u662f\u5f88\u597d\u7684\u4e8b\u60c5\u3002\u8fd9\u9879\u64cd\u4f5c\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u5b57\u5178\uff0c\u5e76\u7528\u65b9\u62ec\u53f7 '[]' \u8bbf\u95ee\u952e\u6765\u5b8c\u6210\u3002 >>> table = { 'Sjoerd' : 4127 , 'Jack' : 4098 , 'Dcab' : 8637678 } >>> print ( 'Jack: {0[Jack]:d} ; Sjoerd: {0[Sjoerd]:d} ; ' ... 'Dcab: {0[Dcab]:d} ' . format ( table )) Jack : 4098 ; Sjoerd : 4127 ; Dcab : 8637678 \u4e5f\u53ef\u4ee5\u7528 '**' \u7b26\u53f7\uff0c\u628a table \u5f53\u4f5c\u4f20\u9012\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002 >>> table = { 'Sjoerd' : 4127 , 'Jack' : 4098 , 'Dcab' : 8637678 } >>> print ( 'Jack: {Jack:d} ; Sjoerd: {Sjoerd:d} ; Dcab: {Dcab:d} ' . format ( ** table )) Jack : 4098 ; Sjoerd : 4127 ; Dcab : 8637678 \u4e0e\u5185\u7f6e\u51fd\u6570 vars() \u7ed3\u5408\u4f7f\u7528\u65f6\uff0c\u8fd9\u79cd\u65b9\u5f0f\u975e\u5e38\u5b9e\u7528\uff0c\u53ef\u4ee5\u8fd4\u56de\u5305\u542b\u6240\u6709\u5c40\u90e8\u53d8\u91cf\u7684\u5b57\u5178\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u751f\u6210\u4e00\u7ec4\u6574\u9f50\u7684\u5217\uff0c\u5305\u542b\u7ed9\u5b9a\u6574\u6570\u53ca\u5176\u5e73\u65b9\u4e0e\u7acb\u65b9\uff1a >>> for x in range ( 1 , 11 ): ... print ( ' {0:2d} {1:3d} {2:4d} ' . format ( x , x * x , x * x * x )) ... 1 1 1 2 4 8 3 9 27 4 16 64 5 25 125 6 36 216 7 49 343 8 64 512 9 81 729 10 100 1000 str.format() \u8fdb\u884c\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u7684\u5b8c\u6574\u6982\u8ff0\u8be6\u89c1 \u683c\u5f0f\u5b57\u7b26\u4e32\u8bed\u6cd5 \u3002","title":"1.1.2 \u5b57\u7b26\u4e32format() \u65b9\u6cd5"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#113","text":"\u4e0b\u9762\u662f\u4f7f\u7528\u624b\u52a8\u683c\u5f0f\u5316\u65b9\u5f0f\u5b9e\u73b0\u7684\u540c\u4e00\u4e2a\u5e73\u65b9\u548c\u7acb\u65b9\u7684\u8868\uff1a >>> for x in range ( 1 , 11 ): ... print ( repr ( x ) . rjust ( 2 ), repr ( x * x ) . rjust ( 3 ), end = ' ' ) ... # Note use of 'end' on previous line ... print ( repr ( x * x * x ) . rjust ( 4 )) ... 1 1 1 2 4 8 3 9 27 4 16 64 5 25 125 6 36 216 7 49 343 8 64 512 9 81 729 10 100 1000 \uff08\u6ce8\u610f\uff0c\u6bcf\u5217\u4e4b\u95f4\u7684\u7a7a\u683c\u662f\u901a\u8fc7\u4f7f\u7528 print() \u6dfb\u52a0\u7684\uff1a\u5b83\u603b\u5728\u5176\u53c2\u6570\u95f4\u6dfb\u52a0\u7a7a\u683c\u3002\uff09 \u5b57\u7b26\u4e32\u5bf9\u8c61\u7684 str.rjust() \u65b9\u6cd5\u901a\u8fc7\u5728\u5de6\u4fa7\u586b\u5145\u7a7a\u683c\uff0c\u5bf9\u7ed9\u5b9a\u5bbd\u5ea6\u5b57\u6bb5\u4e2d\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u53f3\u5bf9\u9f50\u3002\u540c\u7c7b\u65b9\u6cd5\u8fd8\u6709 str.ljust() \u548c str.center() \u3002\u8fd9\u4e9b\u65b9\u6cd5\u4e0d\u5199\u5165\u4efb\u4f55\u5185\u5bb9\uff0c\u53ea\u8fd4\u56de\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u592a\u957f\uff0c\u5b83\u4eec\u4e0d\u4f1a\u622a\u65ad\u5b57\u7b26\u4e32\uff0c\u800c\u662f\u539f\u6837\u8fd4\u56de\uff1b\u867d\u7136\u8fd9\u79cd\u65b9\u5f0f\u4f1a\u5f04\u4e71\u5217\u5e03\u5c40\uff0c\u4f46\u4e5f\u6bd4\u53e6\u4e00\u79cd\u65b9\u6cd5\u597d\uff0c\u540e\u8005\u5728\u663e\u793a\u503c\u65f6\u53ef\u80fd\u4e0d\u51c6\u786e\uff08\u5982\u679c\u771f\u7684\u60f3\u622a\u65ad\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u4f7f\u7528 x.ljust(n)[:n] \u8fd9\u6837\u7684\u5207\u7247\u64cd\u4f5c \u3002\uff09 \u53e6\u4e00\u79cd\u65b9\u6cd5\u662f str.zfill() \uff0c\u8be5\u65b9\u6cd5\u5728\u6570\u5b57\u5b57\u7b26\u4e32\u5de6\u8fb9\u586b\u5145\u96f6\uff0c\u4e14\u80fd\u8bc6\u522b\u6b63\u8d1f\u53f7\uff1a >>> '12' . zfill ( 5 ) '00012' >>> '-3.14' . zfill ( 7 ) '-003.14' >>> '3.14159265359' . zfill ( 5 ) '3.14159265359'","title":"1.1.3 \u624b\u52a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#114","text":"% \u8fd0\u7b97\u7b26\uff08\u6c42\u4f59\u7b26\uff09\u4e5f\u53ef\u7528\u4e8e\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u3002\u7ed9\u5b9a 'string' % values \uff0c\u5219 string \u4e2d\u7684 % \u5b9e\u4f8b\u4f1a\u4ee5\u96f6\u4e2a\u6216\u591a\u4e2a values \u5143\u7d20\u66ff\u6362\u3002\u6b64\u64cd\u4f5c\u88ab\u79f0\u4e3a\u5b57\u7b26\u4e32\u63d2\u503c\u3002\u4f8b\u5982\uff1a >>> import math >>> print ( 'The value of pi is approximately %5.3f .' % math . pi ) The value of pi is approximately 3.142 . printf \u98ce\u683c\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u5316 \u5c0f\u8282\u4ecb\u7ecd\u66f4\u591a\u76f8\u5173\u5185\u5bb9\u3002","title":"1.1.4 \u65e7\u5f0f\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u65b9\u6cd5"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#12","text":"open() \u8fd4\u56de file object \uff0c\u6700\u5e38\u7528\u7684\u53c2\u6570\u6709\u4e24\u4e2a: open(filename, mode) \u3002 >>> f = open ( 'workfile' , 'w' ) \u7b2c\u4e00\u4e2a\u5b9e\u53c2\u662f\u6587\u4ef6\u540d\u5b57\u7b26\u4e32\u3002\u7b2c\u4e8c\u4e2a\u5b9e\u53c2\u662f\u5305\u542b\u63cf\u8ff0\u6587\u4ef6\u4f7f\u7528\u65b9\u5f0f\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u3002 mode \u7684\u503c\u5305\u62ec 'r' \uff0c\u8868\u793a\u6587\u4ef6\u53ea\u80fd\u8bfb\u53d6\uff1b 'w' \u8868\u793a\u53ea\u80fd\u5199\u5165\uff08\u73b0\u6709\u540c\u540d\u6587\u4ef6\u4f1a\u88ab\u8986\u76d6\uff09\uff1b 'a' \u8868\u793a\u6253\u5f00\u6587\u4ef6\u5e76\u8ffd\u52a0\u5185\u5bb9\uff0c\u4efb\u4f55\u5199\u5165\u7684\u6570\u636e\u4f1a\u81ea\u52a8\u6dfb\u52a0\u5230\u6587\u4ef6\u672b\u5c3e\u3002 'r+' \u8868\u793a\u6253\u5f00\u6587\u4ef6\u8fdb\u884c\u8bfb\u5199\u3002 mode \u5b9e\u53c2\u662f\u53ef\u9009\u7684\uff0c\u7701\u7565\u65f6\u7684\u9ed8\u8ba4\u503c\u4e3a 'r' \u3002 \u901a\u5e38\uff0c\u6587\u4ef6\u4ee5 text mode \u6253\u5f00\uff0c\u5373\uff0c\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6216\u5199\u5165\u5b57\u7b26\u4e32\u65f6\uff0c\u90fd\u4ee5\u6307\u5b9a\u7f16\u7801\u65b9\u5f0f\u8fdb\u884c\u7f16\u7801\u3002\u5982\u672a\u6307\u5b9a\u7f16\u7801\u683c\u5f0f\uff0c\u9ed8\u8ba4\u503c\u4e0e\u5e73\u53f0\u76f8\u5173 (\u53c2\u89c1 open() )\u3002\u5728 mode \u4e2d\u8ffd\u52a0\u7684 'b' \u5219\u4ee5 binary mode \u6253\u5f00\u6587\u4ef6\uff1a\u6b64\u65f6\uff0c\u6570\u636e\u4ee5\u5b57\u8282\u5bf9\u8c61\u7684\u5f62\u5f0f\u8fdb\u884c\u8bfb\u5199\u3002\u8be5\u6a21\u5f0f\u7528\u4e8e\u6240\u6709\u4e0d\u5305\u542b\u6587\u672c\u7684\u6587\u4ef6\u3002 \u5728\u6587\u672c\u6a21\u5f0f\u4e0b\u8bfb\u53d6\u6587\u4ef6\u65f6\uff0c\u9ed8\u8ba4\u628a\u5e73\u53f0\u7279\u5b9a\u7684\u884c\u7ed3\u675f\u7b26\uff08Unix \u4e0a\u4e3a \\n , Windows \u4e0a\u4e3a \\r\\n \uff09\u8f6c\u6362\u4e3a \\n \u3002\u5728\u6587\u672c\u6a21\u5f0f\u4e0b\u5199\u5165\u6570\u636e\u65f6\uff0c\u9ed8\u8ba4\u628a \\n \u8f6c\u6362\u56de\u5e73\u53f0\u7279\u5b9a\u7ed3\u675f\u7b26\u3002\u8fd9\u79cd\u64cd\u4f5c\u65b9\u5f0f\u5728\u540e\u53f0\u4fee\u6539\u6587\u4ef6\u6570\u636e\u5bf9\u6587\u672c\u6587\u4ef6\u6765\u8bf4\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u4f1a\u7834\u574f JPEG \u6216 EXE \u7b49\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u3002\u6ce8\u610f\uff0c\u5728\u8bfb\u5199\u6b64\u7c7b\u6587\u4ef6\u65f6\uff0c\u4e00\u5b9a\u8981\u4f7f\u7528\u4e8c\u8fdb\u5236\u6a21\u5f0f\u3002 \u5728\u5904\u7406\u6587\u4ef6\u5bf9\u8c61\u65f6\uff0c\u6700\u597d\u4f7f\u7528 with \u5173\u952e\u5b57\u3002\u4f18\u70b9\u662f\uff0c\u5b50\u53e5\u4f53\u7ed3\u675f\u540e\uff0c\u6587\u4ef6\u4f1a\u6b63\u786e\u5173\u95ed\uff0c\u5373\u4fbf\u89e6\u53d1\u5f02\u5e38\u4e5f\u53ef\u4ee5\u3002\u800c\u4e14\uff0c\u4f7f\u7528 with \u76f8\u6bd4\u7b49\u6548\u7684 try - finally \u4ee3\u7801\u5757\u8981\u7b80\u77ed\u5f97\u591a\uff1a >>> with open ( 'workfile' ) as f : ... read_data = f . read () >>> # We can check that the file has been automatically closed. >>> f . closed True \u5982\u679c\u6ca1\u6709\u4f7f\u7528 with \u5173\u952e\u5b57\uff0c\u5219\u5e94\u8c03\u7528 f.close() \u5173\u95ed\u6587\u4ef6\uff0c\u5373\u53ef\u91ca\u653e\u6587\u4ef6\u5360\u7528\u7684\u7cfb\u7edf\u8d44\u6e90\u3002 **\u8b66\u544a\uff1a**\u8c03\u7528 f.write() \u65f6\uff0c\u672a\u4f7f\u7528 with \u5173\u952e\u5b57\uff0c\u6216\u672a\u8c03\u7528 f.close() \uff0c\u5373\u4f7f\u7a0b\u5e8f\u6b63\u5e38\u9000\u51fa\uff0c\u4e5f\u53ef\u80fd \u5bfc\u81f4 f.write() \u7684\u53c2\u6570\u6ca1\u6709\u5b8c\u5168\u5199\u5165\u78c1\u76d8\u3002 \u901a\u8fc7 with \u8bed\u53e5\uff0c\u6216\u8c03\u7528 f.close() \u5173\u95ed\u6587\u4ef6\u5bf9\u8c61\u540e\uff0c\u518d\u6b21\u4f7f\u7528\u8be5\u6587\u4ef6\u5bf9\u8c61\u5c06\u4f1a\u5931\u8d25\u3002 >>> f . close () >>> f . read () Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > ValueError : I / O operation on closed file .","title":"1.2 \u8bfb\u5199\u6587\u4ef6"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#121","text":"\u672c\u8282\u4e0b\u6587\u4e2d\u7684\u4f8b\u5b50\u5047\u5b9a\u5df2\u521b\u5efa f \u6587\u4ef6\u5bf9\u8c61\u3002 f.read(size) \u53ef\u7528\u4e8e\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\uff0c\u5b83\u4f1a\u8bfb\u53d6\u4e00\u4e9b\u6570\u636e\uff0c\u5e76\u8fd4\u56de\u5b57\u7b26\u4e32\uff08\u6587\u672c\u6a21\u5f0f\uff09\uff0c\u6216\u5b57\u8282\u4e32\u5bf9\u8c61\uff08\u5728\u4e8c\u8fdb\u5236\u6a21\u5f0f\u4e0b\uff09\u3002 size \u662f\u53ef\u9009\u7684\u6570\u503c\u53c2\u6570\u3002\u7701\u7565 size \u6216 size \u4e3a\u8d1f\u6570\u65f6\uff0c\u8bfb\u53d6\u5e76\u8fd4\u56de\u6574\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\uff1b\u6587\u4ef6\u5927\u5c0f\u662f\u5185\u5b58\u7684\u4e24\u500d\u65f6\uff0c\u4f1a\u51fa\u73b0\u95ee\u9898\u3002 size \u53d6\u5176\u4ed6\u503c\u65f6\uff0c\u8bfb\u53d6\u5e76\u8fd4\u56de\u6700\u591a size \u4e2a\u5b57\u7b26\uff08\u6587\u672c\u6a21\u5f0f\uff09\u6216 size \u4e2a\u5b57\u8282\uff08\u4e8c\u8fdb\u5236\u6a21\u5f0f\uff09\u3002\u5982\u5df2\u5230\u8fbe\u6587\u4ef6\u672b\u5c3e\uff0c f.read() \u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff08 '' \uff09\u3002 >>> f . read () 'This is the entire file. \\n ' >>> f . read () '' f.readline() \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5355\u884c\u6570\u636e\uff1b\u5b57\u7b26\u4e32\u672b\u5c3e\u4fdd\u7559\u6362\u884c\u7b26\uff08 \\n \uff09\uff0c\u53ea\u6709\u5728\u6587\u4ef6\u4e0d\u4ee5\u6362\u884c\u7b26\u7ed3\u5c3e\u65f6\uff0c\u6587\u4ef6\u7684\u6700\u540e\u4e00\u884c\u624d\u4f1a\u7701\u7565\u6362\u884c\u7b26\u3002\u8fd9\u79cd\u65b9\u5f0f\u8ba9\u8fd4\u56de\u503c\u6e05\u6670\u660e\u786e\uff1b\u53ea\u8981 f.readline() \u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u5c31\u8868\u793a\u5df2\u7ecf\u5230\u8fbe\u4e86\u6587\u4ef6\u672b\u5c3e\uff0c\u7a7a\u884c\u4f7f\u7528 '\\n' \u8868\u793a\uff0c\u8be5\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u4e00\u4e2a\u6362\u884c\u7b26\u3002 >>> f . readline () 'This is the first line of the file. \\n ' >>> f . readline () 'Second line of the file \\n ' >>> f . readline () '' \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u591a\u884c\u65f6\uff0c\u53ef\u4ee5\u7528\u5faa\u73af\u904d\u5386\u6574\u4e2a\u6587\u4ef6\u5bf9\u8c61\u3002\u8fd9\u79cd\u64cd\u4f5c\u80fd\u9ad8\u6548\u5229\u7528\u5185\u5b58\uff0c\u5feb\u901f\uff0c\u4e14\u4ee3\u7801\u7b80\u5355\uff1a >>> for line in f : ... print ( line , end = '' ) ... This is the first line of the file . Second line of the file \u5982\u9700\u4ee5\u5217\u8868\u5f62\u5f0f\u8bfb\u53d6\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u884c\uff0c\u53ef\u4ee5\u7528 list(f) \u6216 f.readlines() \u3002 f.write(string) \u628a string \u7684\u5185\u5bb9\u5199\u5165\u6587\u4ef6\uff0c\u5e76\u8fd4\u56de\u5199\u5165\u7684\u5b57\u7b26\u6570\u3002 >>> f . write ( 'This is a test \\n ' ) 15 \u5199\u5165\u5176\u4ed6\u7c7b\u578b\u7684\u5bf9\u8c61\u524d\uff0c\u8981\u5148\u628a\u5b83\u4eec\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\uff08\u6587\u672c\u6a21\u5f0f\uff09\u6216\u5b57\u8282\u5bf9\u8c61\uff08\u4e8c\u8fdb\u5236\u6a21\u5f0f\uff09\uff1a >>> value = ( 'the answer' , 42 ) >>> s = str ( value ) # convert the tuple to string >>> f . write ( s ) 18 f.tell() \u8fd4\u56de\u6574\u6570\uff0c\u7ed9\u51fa\u6587\u4ef6\u5bf9\u8c61\u5728\u6587\u4ef6\u4e2d\u7684\u5f53\u524d\u4f4d\u7f6e\uff0c\u8868\u793a\u4e3a\u4e8c\u8fdb\u5236\u6a21\u5f0f\u4e0b\u65f6\u4ece\u6587\u4ef6\u5f00\u59cb\u7684\u5b57\u8282\u6570\uff0c\u4ee5\u53ca\u6587\u672c\u6a21\u5f0f\u4e0b\u7684\u610f\u4e49\u4e0d\u660e\u7684\u6570\u5b57\u3002 f.seek(offset, whence) \u53ef\u4ee5\u6539\u53d8\u6587\u4ef6\u5bf9\u8c61\u7684\u4f4d\u7f6e\u3002\u901a\u8fc7\u5411\u53c2\u8003\u70b9\u6dfb\u52a0 offset \u8ba1\u7b97\u4f4d\u7f6e\uff1b\u53c2\u8003\u70b9\u7531 whence \u53c2\u6570\u6307\u5b9a\u3002 whence \u503c\u4e3a 0 \u65f6\uff0c\u8868\u793a\u4ece\u6587\u4ef6\u5f00\u5934\u8ba1\u7b97\uff0c1 \u8868\u793a\u4f7f\u7528\u5f53\u524d\u6587\u4ef6\u4f4d\u7f6e\uff0c2 \u8868\u793a\u4f7f\u7528\u6587\u4ef6\u672b\u5c3e\u4f5c\u4e3a\u53c2\u8003\u70b9\u3002\u7701\u7565 whence \u65f6\uff0c\u5176\u9ed8\u8ba4\u503c\u4e3a 0\uff0c\u5373\u4f7f\u7528\u6587\u4ef6\u5f00\u5934\u4f5c\u4e3a\u53c2\u8003\u70b9\u3002 >>> f = open ( 'workfile' , 'rb+' ) >>> f . write ( b '0123456789abcdef' ) 16 >>> f . seek ( 5 ) # Go to the 6th byte in the file 5 >>> f . read ( 1 ) b '5' >>> f . seek ( - 3 , 2 ) # Go to the 3rd byte before the end 13 >>> f . read ( 1 ) b 'd' \u5728\u6587\u672c\u6587\u4ef6\uff08\u6a21\u5f0f\u5b57\u7b26\u4e32\u672a\u4f7f\u7528 b \u65f6\u6253\u5f00\u7684\u6587\u4ef6\uff09\u4e2d\uff0c\u53ea\u5141\u8bb8\u76f8\u5bf9\u4e8e\u6587\u4ef6\u5f00\u5934\u641c\u7d22\uff08\u4f7f\u7528 seek(0, 2) \u641c\u7d22\u5230\u6587\u4ef6\u672b\u5c3e\u662f\u4e2a\u4f8b\u5916\uff09\uff0c\u552f\u4e00\u6709\u6548\u7684 offset \u503c\u662f\u80fd\u4ece f.tell() \u4e2d\u8fd4\u56de\u7684\uff0c\u6216 0\u3002\u5176\u4ed6 offset \u503c\u90fd\u4f1a\u4ea7\u751f\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\u3002 \u6587\u4ef6\u5bf9\u8c61\u8fd8\u652f\u6301 isatty() \u548c truncate() \u7b49\u65b9\u6cd5\uff0c\u4f46\u4e0d\u5e38\u7528\uff1b\u6587\u4ef6\u5bf9\u8c61\u7684\u5b8c\u6574\u6307\u5357\u8be6\u89c1\u5e93\u53c2\u8003\u3002","title":"1.2.1 \u6587\u4ef6\u5bf9\u8c61\u7684\u65b9\u6cd5"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#122-json","text":"\u4ece\u6587\u4ef6\u5199\u5165\u6216\u8bfb\u53d6\u5b57\u7b26\u4e32\u5f88\u7b80\u5355\uff0c\u6570\u5b57\u5219\u7a0d\u663e\u9ebb\u70e6\uff0c\u56e0\u4e3a read() \u65b9\u6cd5\u53ea\u8fd4\u56de\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e9b\u5b57\u7b26\u4e32\u5fc5\u987b\u4f20\u9012\u7ed9 int() \u8fd9\u6837\u7684\u51fd\u6570\uff0c\u63a5\u53d7 '123' \u8fd9\u6837\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u8fd4\u56de\u6570\u5b57\u503c 123\u3002\u4fdd\u5b58\u5d4c\u5957\u5217\u8868\u3001\u5b57\u5178\u7b49\u590d\u6742\u6570\u636e\u7c7b\u578b\u65f6\uff0c\u624b\u52a8\u89e3\u6790\u548c\u5e8f\u5217\u5316\u7684\u64cd\u4f5c\u975e\u5e38\u590d\u6742\u3002 Python \u652f\u6301 JSON (JavaScript Object Notation) \u8fd9\u79cd\u6d41\u884c\u6570\u636e\u4ea4\u6362\u683c\u5f0f\uff0c\u7528\u6237\u65e0\u9700\u6ca1\u5b8c\u6ca1\u4e86\u5730\u7f16\u5199\u3001\u8c03\u8bd5\u4ee3\u7801\uff0c\u624d\u80fd\u628a\u590d\u6742\u7684\u6570\u636e\u7c7b\u578b\u4fdd\u5b58\u5230\u6587\u4ef6\u3002 json \u6807\u51c6\u6a21\u5757\u91c7\u7528 Python \u6570\u636e\u5c42\u6b21\u7ed3\u6784\uff0c\u5e76\u5c06\u4e4b\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\uff1b\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a serializing \uff08\u5e8f\u5217\u5316\uff09\u3002\u4ece\u5b57\u7b26\u4e32\u8868\u793a\u4e2d\u91cd\u5efa\u6570\u636e\u79f0\u4e3a deserializing \uff08\u89e3\u5e8f\u5316\uff09\u3002\u5728\u5e8f\u5217\u5316\u548c\u89e3\u5e8f\u5316\u4e4b\u95f4\uff0c\u8868\u793a\u5bf9\u8c61\u7684\u5b57\u7b26\u4e32\u53ef\u80fd\u5df2\u7ecf\u5b58\u50a8\u5728\u6587\u4ef6\u6216\u6570\u636e\u4e2d\uff0c\u6216\u901a\u8fc7\u7f51\u7edc\u8fde\u63a5\u53d1\u9001\u5230\u8fdc\u65b9 \u7684\u673a\u5668\u3002 \u6ce8\u89e3\uff1a JSON \u683c\u5f0f\u901a\u5e38\u7528\u4e8e\u73b0\u4ee3\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u4ea4\u6362\u3002\u7a0b\u5e8f\u5458\u65e9\u5df2\u5bf9\u5b83\u8033\u719f\u80fd\u8be6\uff0c\u53ef\u8c13\u662f\u4ea4\u4e92\u64cd\u4f5c\u7684\u4e0d\u4e8c\u4e4b\u9009\u3002 \u53ea\u9700\u4e00\u884c\u7b80\u5355\u7684\u4ee3\u7801\u5373\u53ef\u67e5\u770b\u67d0\u4e2a\u5bf9\u8c61\u7684 JSON \u5b57\u7b26\u4e32\u8868\u73b0\u5f62\u5f0f\uff1a >>> import json >>> json . dumps ([ 1 , 'simple' , 'list' ]) '[1, \"simple\", \"list\"]' dumps() \u51fd\u6570\u8fd8\u6709\u4e00\u4e2a\u53d8\u4f53\uff0c dump() \uff0c\u5b83\u53ea\u5c06\u5bf9\u8c61\u5e8f\u5217\u5316\u4e3a text file \u3002\u56e0\u6b64\uff0c\u5982\u679c f \u662f text file \u5bf9\u8c61\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a json . dump ( x , f ) \u8981\u518d\u6b21\u89e3\u7801\u5bf9\u8c61\uff0c\u5982\u679c f \u662f\u5df2\u6253\u5f00\u3001\u4f9b\u8bfb\u53d6\u7684 text file \u5bf9\u8c61\uff1a x = json . load ( f ) \u8fd9\u79cd\u7b80\u5355\u7684\u5e8f\u5217\u5316\u6280\u672f\u53ef\u4ee5\u5904\u7406\u5217\u8868\u548c\u5b57\u5178\uff0c\u4f46\u5728 JSON \u4e2d\u5e8f\u5217\u5316\u4efb\u610f\u7c7b\u7684\u5b9e\u4f8b\uff0c\u5219\u9700\u8981\u4ed8\u51fa\u989d\u5916\u52aa\u529b\u3002 json \u6a21\u5757\u7684\u53c2\u8003\u5305\u542b\u5bf9\u6b64\u7684\u89e3\u91ca\u3002 \u53c2\u89c1\uff1a pickle - \u5c01\u5b58\u6a21\u5757 \u4e0e JSON \u4e0d\u540c\uff0c pickle \u662f\u4e00\u79cd\u5141\u8bb8\u5bf9\u590d\u6742 Python \u5bf9\u8c61\u8fdb\u884c\u5e8f\u5217\u5316\u7684\u534f\u8bae\u3002\u56e0\u6b64\uff0c\u5b83\u4e3a Python \u6240\u7279\u6709\uff0c\u4e0d\u80fd\u7528\u4e8e\u4e0e\u5176\u4ed6\u8bed\u8a00\u7f16\u5199\u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u4fe1\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5b83\u4e5f\u662f\u4e0d\u5b89\u5168\u7684\uff1a\u5982\u679c\u89e3\u5e8f\u5316\u7684\u6570\u636e\u662f\u7531\u624b\u6bb5\u9ad8\u660e\u7684\u653b\u51fb\u8005\u7cbe\u5fc3\u8bbe\u8ba1\u7684\uff0c\u8fd9\u79cd\u4e0d\u53d7\u4fe1\u4efb\u6765\u6e90\u7684 pickle \u6570\u636e\u53ef\u4ee5\u6267\u884c\u4efb\u610f\u4ee3\u7801\u3002","title":"1.2.2 \u4f7f\u7528 json \u4fdd\u5b58\u7ed3\u6784\u5316\u6570\u636e"},{"location":"python%E5%9F%BA%E7%A1%80/%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#123","text":"Python \u63d0\u4f9b\u4e86 input() \u5185\u7f6e\u51fd\u6570 \u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u5165\u4e00\u884c\u6587\u672c\uff0c\u9ed8\u8ba4\u7684\u6807\u51c6\u8f93\u5165\u662f\u952e\u76d8\u3002 number = int ( input ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff1a\" )) print ( \"\u4f60\u8f93\u5165\u7684\u6574\u6570\u662f: \" , number ) \u8bf7\u8f93\u5165\u4e00\u4e2a\u6574\u6570 \uff1a 12 \u4f60\u8f93\u5165\u7684\u6574\u6570\u662f \uff1a 12","title":"1.2.3 \u8bfb\u53d6\u952e\u76d8\u8f93\u5165"},{"location":"python%E5%9F%BA%E7%A1%80/%E9%94%99%E8%AF%AF%E5%92%8C%E5%BC%82%E5%B8%B8/","text":"\u9519\u8bef\u548c\u5f02\u5e38 \u00b6 Python \u6709\u4e24\u79cd\u9519\u8bef\u5f88\u5bb9\u6613\u8fa8\u8ba4\uff1a\u8bed\u6cd5\u9519\u8bef\u548c\u5f02\u5e38\u3002 1.1 \u8bed\u6cd5\u9519\u8bef \u00b6 \u8bed\u6cd5\u9519\u8bef\u53c8\u79f0\u89e3\u6790\u9519\u8bef\uff0c\u662f\u5b66\u4e60 Python \u65f6\u6700\u5e38\u89c1\u7684\u9519\u8bef\uff1a >>> while True print ( 'Hello world' ) File \"<stdin>\" , line 1 while True print ( 'Hello world' ) ^ SyntaxError : invalid syntax \u89e3\u6790\u5668\u4f1a\u590d\u73b0\u51fa\u73b0\u53e5\u6cd5\u9519\u8bef\u7684\u4ee3\u7801\u884c\uff0c\u5e76\u7528\u5c0f\u201c\u7bad\u5934\u201d\u6307\u5411\u884c\u91cc\u68c0\u6d4b\u5230\u7684\u7b2c\u4e00\u4e2a\u9519\u8bef\u3002\u9519\u8bef\u662f\u7531\u7bad\u5934 \u4e0a\u65b9 \u7684 token \u89e6\u53d1\u7684\uff08\u81f3\u5c11\u662f\u5728\u8fd9\u91cc\u68c0\u6d4b\u51fa\u7684\uff09\uff1a\u672c\u4f8b\u4e2d\uff0c\u5728 print() \u51fd\u6570\u4e2d\u68c0\u6d4b\u5230\u9519\u8bef\uff0c\u56e0\u4e3a\uff0c\u5728\u5b83\u524d\u9762\u7f3a\u5c11\u5192\u53f7\uff08 ':' \uff09 \u3002\u9519\u8bef\u4fe1\u606f\u8fd8\u8f93\u51fa\u6587\u4ef6\u540d\u4e0e\u884c\u53f7\uff0c\u5728\u4f7f\u7528\u811a\u672c\u6587\u4ef6\u65f6\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u53bb\u54ea\u91cc\u67e5\u9519\u3002 1.2 \u5f02\u5e38 \u00b6 \u5373\u4f7f\u8bed\u53e5\u6216\u8868\u8fbe\u5f0f\u7684\u8bed\u6cd5\u662f\u6b63\u786e\u7684\uff0c\u6267\u884c\u65f6\u4ecd\u53ef\u80fd\u89e6\u53d1\u9519\u8bef\u3002\u6267\u884c\u65f6\u68c0\u6d4b\u5230\u7684\u9519\u8bef\u79f0\u4e3a \u5f02\u5e38 \uff0c\u5f02\u5e38\u4e0d\u4e00\u5b9a\u5bfc\u81f4\u4e25\u91cd\u7684\u540e\u679c\uff1a\u5f88\u5feb\u6211\u4eec\u5c31\u80fd\u5b66\u4f1a\u5982\u4f55\u5904\u7406 Python \u7684\u5f02\u5e38\u3002\u5927\u591a\u6570\u5f02\u5e38\u4e0d\u4f1a\u88ab\u7a0b\u5e8f\u5904\u7406\uff0c\u800c\u662f\u663e\u793a\u4e0b\u5217\u9519\u8bef\u4fe1\u606f\uff1a >>> 10 * ( 1 / 0 ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > ZeroDivisionError : division by zero >>> 4 + spam * 3 Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > NameError : name 'spam' is not defined >>> '2' + 2 Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : Can 't convert ' int ' object to str implicitly \u9519\u8bef\u4fe1\u606f\u7684\u6700\u540e\u4e00\u884c\u8bf4\u660e\u7a0b\u5e8f\u9047\u5230\u4e86\u4ec0\u4e48\u7c7b\u578b\u7684\u9519\u8bef\u3002\u5f02\u5e38\u6709\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u800c\u7c7b\u578b\u540d\u79f0\u4f1a\u4f5c\u4e3a\u9519\u8bef\u4fe1\u606f\u7684\u4e00\u90e8\u5206\u4e2d\u6253\u5370\u51fa\u6765\uff1a\u4e0a\u8ff0\u793a\u4f8b\u4e2d\u7684\u5f02\u5e38\u7c7b\u578b\u4f9d\u6b21\u662f\uff1a ZeroDivisionError \uff0c NameError \u548c TypeError \u3002\u4f5c\u4e3a\u5f02\u5e38\u7c7b\u578b\u6253\u5370\u7684\u5b57\u7b26\u4e32\u662f\u53d1\u751f\u7684\u5185\u7f6e\u5f02\u5e38\u7684\u540d\u79f0\u3002\u5bf9\u4e8e\u6240\u6709\u5185\u7f6e\u5f02\u5e38\u90fd\u662f\u5982\u6b64\uff0c\u4f46\u5bf9\u4e8e\u7528\u6237\u5b9a\u4e49\u7684\u5f02\u5e38\u5219\u4e0d\u4e00\u5b9a\u5982\u6b64\uff08\u867d\u7136\u8fd9\u79cd\u89c4\u8303\u5f88\u6709\u7528\uff09\u3002\u6807\u51c6\u7684\u5f02\u5e38\u7c7b\u578b\u662f\u5185\u7f6e\u7684\u6807\u8bc6\u7b26\uff08\u4e0d\u662f\u4fdd\u7559\u5173\u952e\u5b57\uff09\u3002 \u8fd9\u4e00\u884c\u7684\u5269\u4e0b\u7684\u90e8\u5206\u6839\u636e\u5f02\u5e38\u7c7b\u578b\u53ca\u5176\u539f\u56e0\u63d0\u4f9b\u8be6\u7ec6\u4fe1\u606f\u3002 \u9519\u8bef\u6d88\u606f\u7684\u5f00\u5934\u90e8\u5206\u4ee5\u5806\u6808\u56de\u6eaf\u7684\u5f62\u5f0f\u663e\u793a\u53d1\u751f\u5f02\u5e38\u7684\u4e0a\u4e0b\u6587\u3002 \u901a\u5e38\u5b83\u4f1a\u5305\u542b\u5217\u51fa\u6e90\u4ee3\u7801\u884c\u7684\u5806\u6808\u56de\u6eaf\uff1b\u4f46\u662f\uff0c\u5b83\u5c06\u4e0d\u4f1a\u663e\u793a\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6\u7684\u884c\u3002 \u5185\u7f6e\u5f02\u5e38 \u5217\u51fa\u4e86\u5185\u7f6e\u5f02\u5e38\u548c\u5b83\u4eec\u7684\u542b\u4e49\u3002 1.3 \u5904\u7406\u5f02\u5e38 \u00b6 \u53ef\u4ee5\u7f16\u5199\u5904\u7406\u6240\u9009\u5f02\u5e38\u7684\u7a0b\u5e8f\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u5b83\u4f1a\u8981\u6c42\u7528\u6237\u4e00\u76f4\u8f93\u5165\uff0c\u76f4\u5230\u8f93\u5165\u7684\u662f\u4e00\u4e2a\u6709\u6548\u7684\u6574\u6570\uff0c\u4f46\u5141\u8bb8\u7528\u6237\u4e2d\u65ad\u7a0b\u5e8f\uff08\u4f7f\u7528 Control-C \u6216\u64cd\u4f5c\u7cfb\u7edf\u652f\u6301\u7684\u5176\u4ed6\u64cd\u4f5c\uff09\uff1b\u8bf7\u6ce8\u610f\u7528\u6237\u5f15\u8d77\u7684\u4e2d\u65ad\u53ef\u4ee5\u901a\u8fc7\u5f15\u53d1 KeyboardInterrupt \u5f02\u5e38\u6765\u6307\u793a\u3002: >>> while True : ... try : ... x = int ( input ( \"Please enter a number: \" )) ... break ... except ValueError : ... print ( \"Oops! That was no valid number. Try again...\" ) ... try \u8bed\u53e5\u7684\u5de5\u4f5c\u539f\u7406\u5982\u4e0b\uff1a \u9996\u5148\uff0c\u6267\u884c try \u5b50\u53e5 \uff08 try \u548c except \u5173\u952e\u5b57\u4e4b\u95f4\u7684\uff08\u591a\u884c\uff09\u8bed\u53e5\uff09\u3002 \u5982\u679c\u6ca1\u6709\u5f02\u5e38\u53d1\u751f\uff0c\u5219\u8df3\u8fc7 except \u5b50\u53e5 \u5e76\u5b8c\u6210 try \u8bed\u53e5\u7684\u6267\u884c\u3002 \u5982\u679c\u5728\u6267\u884c try \u5b50\u53e5\u65f6\u53d1\u751f\u4e86\u5f02\u5e38\uff0c\u5219\u8df3\u8fc7\u8be5\u5b50\u53e5\u4e2d\u5269\u4e0b\u7684\u90e8\u5206\u3002 \u7136\u540e\uff0c\u5982\u679c\u5f02\u5e38\u7684\u7c7b\u578b\u548c except \u5173\u952e\u5b57\u540e\u9762\u7684\u5f02\u5e38\u5339\u914d\uff0c\u5219\u6267\u884c except \u5b50\u53e5\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c try \u8bed\u53e5\u4e4b\u540e\u7684\u4ee3\u7801\u3002 \u5982\u679c\u53d1\u751f\u7684\u5f02\u5e38\u548c except \u5b50\u53e5\u4e2d\u6307\u5b9a\u7684\u5f02\u5e38\u4e0d\u5339\u914d\uff0c\u5219\u5c06\u5176\u4f20\u9012\u5230\u5916\u90e8\u7684 try \u8bed\u53e5\u4e2d\uff1b\u5982\u679c\u6ca1\u6709\u627e\u5230\u5904\u7406\u7a0b\u5e8f\uff0c\u5219\u5b83\u662f\u4e00\u4e2a \u672a\u5904\u7406\u5f02\u5e38 \uff0c\u6267\u884c\u5c06\u505c\u6b62\u5e76\u663e\u793a\u5982\u4e0a\u6240\u793a\u7684\u6d88\u606f\u3002 \u4e00\u4e2a try \u8bed\u53e5\u53ef\u80fd\u6709\u591a\u4e2a except \u5b50\u53e5\uff0c\u4ee5\u6307\u5b9a\u4e0d\u540c\u5f02\u5e38\u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u6700\u591a\u4f1a\u6267\u884c\u4e00\u4e2a\u5904\u7406\u7a0b\u5e8f\u3002 \u5904\u7406\u7a0b\u5e8f\u53ea\u5904\u7406\u76f8\u5e94\u7684 try \u5b50\u53e5\u4e2d\u53d1\u751f\u7684\u5f02\u5e38\uff0c\u800c\u4e0d\u5904\u7406\u540c\u4e00 try \u8bed\u53e5\u5185\u5176\u4ed6\u5904\u7406\u7a0b\u5e8f\u4e2d\u7684\u5f02\u5e38\u3002 \u4e00\u4e2a except \u5b50\u53e5\u53ef\u4ee5\u5c06\u591a\u4e2a\u5f02\u5e38\u547d\u540d\u4e3a\u5e26\u62ec\u53f7\u7684\u5143\u7ec4\uff0c\u4f8b\u5982: ... except ( RuntimeError , TypeError , NameError ): ... pass \u5982\u679c\u53d1\u751f\u7684\u5f02\u5e38\u548c except \u5b50\u53e5\u4e2d\u7684\u7c7b\u662f\u540c\u4e00\u4e2a\u7c7b\u6216\u8005\u662f\u5b83\u7684\u57fa\u7c7b\uff0c\u5219\u5f02\u5e38\u548c except \u5b50\u53e5\u4e2d\u7684\u7c7b\u662f\u517c\u5bb9\u7684\uff08\u4f46\u53cd\u8fc7\u6765\u5219\u4e0d\u6210\u7acb --- \u5217\u51fa\u6d3e\u751f\u7c7b\u7684 except \u5b50\u53e5\u4e0e\u57fa\u7c7b\u4e0d\u517c\u5bb9\uff09\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u5c06\u4f9d\u6b21\u6253\u5370 B, C, D class B ( Exception ): pass class C ( B ): pass class D ( C ): pass for cls in [ B , C , D ]: try : raise cls () except D : print ( \"D\" ) except C : print ( \"C\" ) except B : print ( \"B\" ) \u8bf7\u6ce8\u610f\u5982\u679c except \u5b50\u53e5\u88ab\u98a0\u5012\uff08\u628a except B \u653e\u5230\u7b2c\u4e00\u4e2a\uff09\uff0c\u5b83\u5c06\u6253\u5370 B\uff0cB\uff0cB --- \u5373\u7b2c\u4e00\u4e2a\u5339\u914d\u7684 except \u5b50\u53e5\u88ab\u89e6\u53d1\u3002 \u6700\u540e\u7684 except \u5b50\u53e5\u53ef\u4ee5\u7701\u7565\u5f02\u5e38\u540d\uff0c\u4ee5\u7528\u4f5c\u901a\u914d\u7b26\u3002\u4f46\u8bf7\u8c28\u614e\u4f7f\u7528\uff0c\u56e0\u4e3a\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5f88\u5bb9\u6613\u63a9\u76d6\u771f\u6b63\u7684\u7f16\u7a0b\u9519\u8bef\uff01\u5b83\u8fd8\u53ef\u7528\u4e8e\u6253\u5370\u9519\u8bef\u6d88\u606f\uff0c\u7136\u540e\u91cd\u65b0\u5f15\u53d1\u5f02\u5e38\uff08\u540c\u6837\u5141\u8bb8\u8c03\u7528\u8005\u5904\u7406\u5f02\u5e38\uff09: import sys try : f = open ( 'myfile.txt' ) s = f . readline () i = int ( s . strip ()) except OSError as err : print ( \"OS error: {0} \" . format ( err )) except ValueError : print ( \"Could not convert data to an integer.\" ) except : print ( \"Unexpected error:\" , sys . exc_info ()[ 0 ]) raise try ... except \u8bed\u53e5\u6709\u4e00\u4e2a\u53ef\u9009\u7684 else \u5b50\u53e5 \uff0c\u5728\u4f7f\u7528\u65f6\u5fc5\u987b\u653e\u5728\u6240\u6709\u7684 except \u5b50\u53e5\u540e\u9762\u3002\u5bf9\u4e8e\u5728 try \u5b50\u53e5\u4e0d\u5f15\u53d1\u5f02\u5e38\u65f6\u5fc5\u987b\u6267\u884c\u7684\u4ee3\u7801\u6765\u8bf4\u5f88\u6709\u7528\u3002 \u4f8b\u5982: for arg in sys.argv[1:]: try: f = open(arg, 'r') except OSError: print('cannot open', arg) else: print(arg, 'has', len(f.readlines()), 'lines') f.close() \u4f7f\u7528 else \u5b50\u53e5\u6bd4\u5411 try \u5b50\u53e5\u6dfb\u52a0\u989d\u5916\u7684\u4ee3\u7801\u8981\u597d\uff0c\u56e0\u4e3a\u5b83\u907f\u514d\u4e86\u610f\u5916\u6355\u83b7\u975e try ... except \u8bed\u53e5\u4fdd\u62a4\u7684\u4ee3\u7801\u5f15\u53d1\u7684\u5f02\u5e38\u3002 \u53d1\u751f\u5f02\u5e38\u65f6\uff0c\u5b83\u53ef\u80fd\u5177\u6709\u5173\u8054\u503c\uff0c\u4e5f\u79f0\u4e3a\u5f02\u5e38 \u53c2\u6570 \u3002\u53c2\u6570\u7684\u5b58\u5728\u548c\u7c7b\u578b\u53d6\u51b3\u4e8e\u5f02\u5e38\u7c7b\u578b\u3002 except \u5b50\u53e5\u53ef\u4ee5\u5728\u5f02\u5e38\u540d\u79f0\u540e\u9762\u6307\u5b9a\u4e00\u4e2a\u53d8\u91cf\u3002\u8fd9\u4e2a\u53d8\u91cf\u548c\u4e00\u4e2a\u5f02\u5e38\u5b9e\u4f8b\u7ed1\u5b9a\uff0c\u5b83\u7684\u53c2\u6570\u5b58\u50a8\u5728 instance.args \u4e2d\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u5f02\u5e38\u5b9e\u4f8b\u5b9a\u4e49\u4e86 __str__() \uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u6253\u5370\u53c2\u6570\u800c\u65e0\u9700\u5f15\u7528 .args \u3002\u4e5f\u53ef\u4ee5\u5728\u629b\u51fa\u4e4b\u524d\u9996\u5148\u5b9e\u4f8b\u5316\u5f02\u5e38\uff0c\u5e76\u6839\u636e\u9700\u8981\u5411\u5176\u6dfb\u52a0\u4efb\u4f55\u5c5e\u6027\u3002: >>> try : ... raise Exception ( 'spam' , 'eggs' ) ... except Exception as inst : ... print ( type ( inst )) # the exception instance ... print ( inst . args ) # arguments stored in .args ... print ( inst ) # __str__ allows args to be printed directly, ... # but may be overridden in exception subclasses ... x , y = inst . args # unpack args ... print ( 'x =' , x ) ... print ( 'y =' , y ) ... < class ' Exception '> ( 'spam' , 'eggs' ) ( 'spam' , 'eggs' ) x = spam y = eggs \u5982\u679c\u5f02\u5e38\u6709\u53c2\u6570\uff0c\u5219\u5b83\u4eec\u5c06\u4f5c\u4e3a\u672a\u5904\u7406\u5f02\u5e38\u7684\u6d88\u606f\u7684\u6700\u540e\u4e00\u90e8\u5206\uff08'\u8be6\u7ec6\u4fe1\u606f'\uff09\u6253\u5370\u3002 \u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u4e0d\u4ec5\u5904\u7406 try \u5b50\u53e5\u4e2d\u9047\u5230\u7684\u5f02\u5e38\uff0c\u8fd8\u5904\u7406 try \u5b50\u53e5\u4e2d\u8c03\u7528\uff08\u5373\u4f7f\u662f\u95f4\u63a5\u5730\uff09\u7684\u51fd\u6570\u5185\u90e8\u53d1\u751f\u7684\u5f02\u5e38\u3002\u4f8b\u5982: >>> def this_fails (): ... x = 1 / 0 ... >>> try : ... this_fails () ... except ZeroDivisionError as err : ... print ( 'Handling run-time error:' , err ) ... Handling run - time error : division by zero 1.4 \u629b\u51fa\u5f02\u5e38 \u00b6 Python \u4f7f\u7528 raise \u8bed\u53e5\u629b\u51fa\u4e00\u4e2a\u6307\u5b9a\u7684\u5f02\u5e38\u3002\u4f8b\u5982\uff1a >>> raise NameError ( 'HiThere' ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > NameError : HiThere raise \u552f\u4e00\u7684\u53c2\u6570\u5c31\u662f\u8981\u89e6\u53d1\u7684\u5f02\u5e38\u3002\u8fd9\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u5f02\u5e38\u5b9e\u4f8b\u6216\u5f02\u5e38\u7c7b\uff08\u6d3e\u751f\u81ea Exception \u7684\u7c7b\uff09\u3002\u5982\u679c\u4f20\u9012\u7684\u662f\u5f02\u5e38\u7c7b\uff0c\u5c06\u901a\u8fc7\u8c03\u7528\u6ca1\u6709\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u6765\u9690\u5f0f\u5b9e\u4f8b\u5316\uff1a raise ValueError # shorthand for 'raise ValueError()' \u5982\u679c\u4f60\u9700\u8981\u786e\u5b9a\u662f\u5426\u5f15\u53d1\u4e86\u5f02\u5e38\u4f46\u4e0d\u6253\u7b97\u5904\u7406\u5b83\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u66f4\u7b80\u5355\u7684 raise \u8bed\u53e5\u5f62\u5f0f\u91cd\u65b0\u5f15\u53d1\u5f02\u5e38 >>> try : ... raise NameError ( 'HiThere' ) ... except NameError : ... print ( 'An exception flew by!' ) ... raise ... An exception flew by ! Traceback ( most recent call last ): File \"<stdin>\" , line 2 , in < module > NameError : HiThere 1.5 \u7528\u6237\u81ea\u5b9a\u4e49\u5f02\u5e38 \u00b6 \u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u65b0\u7684\u5f02\u5e38\u7c7b\u6765\u547d\u540d\u5b83\u4eec\u81ea\u5df1\u7684\u5f02\u5e38\uff08\u6709\u5173Python \u7c7b\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u7c7b \uff09\u3002\u5f02\u5e38\u901a\u5e38\u5e94\u8be5\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u4ece Exception \u7c7b\u6d3e\u751f\u3002 \u53ef\u4ee5\u5b9a\u4e49\u5f02\u5e38\u7c7b\uff0c\u5b83\u53ef\u4ee5\u6267\u884c\u4efb\u4f55\u5176\u4ed6\u7c7b\u53ef\u4ee5\u6267\u884c\u7684\u4efb\u4f55\u64cd\u4f5c\uff0c\u4f46\u901a\u5e38\u4fdd\u6301\u7b80\u5355\uff0c\u53ea\u63d0\u4f9b\u4e00\u4e9b\u5c5e\u6027\uff0c\u8fd9\u4e9b\u5c5e\u6027\u5141\u8bb8\u5904\u7406\u7a0b\u5e8f\u4e3a\u5f02\u5e38\u63d0\u53d6\u6709\u5173\u9519\u8bef\u7684\u4fe1\u606f\u3002 \u5728\u521b\u5efa\u53ef\u80fd\u5f15\u53d1\u591a\u4e2a\u4e0d\u540c\u9519\u8bef\u7684\u6a21\u5757\u65f6\uff0c\u901a\u5e38\u7684\u505a\u6cd5\u662f\u4e3a\u8be5\u6a21\u5757\u5b9a\u4e49\u7684\u5f02\u5e38\u521b\u5efa\u57fa\u7c7b\uff0c\u5e76\u4e3a\u4e0d\u540c\u9519\u8bef\u6761\u4ef6\u521b\u5efa\u7279\u5b9a\u5f02\u5e38\u7c7b\u7684\u5b50\u7c7b: class Error ( Exception ): \"\"\"Base class for exceptions in this module.\"\"\" pass class InputError ( Error ): \"\"\"Exception raised for errors in the input. Attributes: expression -- input expression in which the error occurred message -- explanation of the error \"\"\" def __init__ ( self , expression , message ): self . expression = expression self . message = message class TransitionError ( Error ): \"\"\"Raised when an operation attempts a state transition that's not allowed. Attributes: previous -- state at beginning of transition next -- attempted new state message -- explanation of why the specific transition is not allowed \"\"\" def __init__ ( self , previous , next , message ): self . previous = previous self . next = next self . message = message \u5927\u591a\u6570\u5f02\u5e38\u90fd\u5b9a\u4e49\u4e3a\u540d\u79f0\u4ee5\u201cError\u201d\u7ed3\u5c3e\uff0c\u7c7b\u4f3c\u4e8e\u6807\u51c6\u5f02\u5e38\u7684\u547d\u540d\u3002 \u8bb8\u591a\u6807\u51c6\u6a21\u5757\u5b9a\u4e49\u4e86\u5b83\u4eec\u81ea\u5df1\u7684\u5f02\u5e38\uff0c\u4ee5\u62a5\u544a\u5b83\u4eec\u5b9a\u4e49\u7684\u51fd\u6570\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u9519\u8bef\u3002\u6709\u5173\u7c7b\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u7c7b \u7ae0\u8282\u3002 1.6 \u5b9a\u4e49\u6e05\u7406\u64cd\u4f5c \u00b6 try \u8bed\u53e5\u6709\u53e6\u4e00\u4e2a\u53ef\u9009\u5b50\u53e5\uff0c\u7528\u4e8e\u5b9a\u4e49\u5fc5\u987b\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u6267\u884c\u7684\u6e05\u7406\u64cd\u4f5c\u3002\u4f8b\u5982: >>> try : ... raise KeyboardInterrupt ... finally : ... print ( 'Goodbye, world!' ) ... Goodbye , world ! KeyboardInterrupt Traceback ( most recent call last ): File \"<stdin>\" , line 2 , in < module > \u5982\u679c\u5b58\u5728 finally \u5b50\u53e5\uff0c\u5219 finally \u5b50\u53e5\u5c06\u4f5c\u4e3a try \u8bed\u53e5\u7ed3\u675f\u524d\u7684\u6700\u540e\u4e00\u9879\u4efb\u52a1\u88ab\u6267\u884c\u3002 finally \u5b50\u53e5\u4e0d\u8bba try \u8bed\u53e5\u662f\u5426\u4ea7\u751f\u4e86\u5f02\u5e38\u90fd\u4f1a\u88ab\u6267\u884c\u3002 \u4ee5\u4e0b\u51e0\u70b9\u8ba8\u8bba\u4e86\u5f53\u5f02\u5e38\u53d1\u751f\u65f6\u4e00\u4e9b\u66f4\u590d\u6742\u7684\u60c5\u51b5\uff1a \u5982\u679c\u5728\u6267\u884c try \u5b50\u53e5\u671f\u95f4\u53d1\u751f\u4e86\u5f02\u5e38\uff0c\u8be5\u5f02\u5e38\u53ef\u7531\u4e00\u4e2a except \u5b50\u53e5\u8fdb\u884c\u5904\u7406\u3002 \u5982\u679c\u5f02\u5e38\u6ca1\u6709\u88ab\u67d0\u4e2a except \u5b50\u53e5\u6240\u5904\u7406\uff0c\u5219\u8be5\u5f02\u5e38\u4f1a\u5728 finally \u5b50\u53e5\u6267\u884c\u4e4b\u540e\u88ab\u91cd\u65b0\u5f15\u53d1\u3002 \u5f02\u5e38\u4e5f\u53ef\u80fd\u5728 except \u6216 else \u5b50\u53e5\u6267\u884c\u671f\u95f4\u53d1\u751f\u3002 \u540c\u6837\u5730\uff0c\u8be5\u5f02\u5e38\u4f1a\u5728 finally \u5b50\u53e5\u6267\u884c\u4e4b\u540e\u88ab\u91cd\u65b0\u5f15\u53d1\u3002 \u5982\u679c\u5728\u6267\u884c try \u8bed\u53e5\u65f6\u9047\u5230\u4e00\u4e2a break , continue \u6216 return \u8bed\u53e5\uff0c\u5219 finally \u5b50\u53e5\u5c06\u5728\u6267\u884c break , continue \u6216 return \u8bed\u53e5\u4e4b\u524d\u88ab\u6267\u884c\u3002 \u5982\u679c finally \u5b50\u53e5\u4e2d\u5305\u542b\u4e00\u4e2a return \u8bed\u53e5\uff0c\u5219\u8fd4\u56de\u503c\u5c06\u6765\u81ea finally \u5b50\u53e5\u7684\u67d0\u4e2a return \u8bed\u53e5\u7684\u8fd4\u56de\u503c\uff0c\u800c\u975e\u6765\u81ea try \u5b50\u53e5\u7684 return \u8bed\u53e5\u7684\u8fd4\u56de\u503c\u3002 \u4f8b\u5982: >>> def bool_return (): ... try : ... return True ... finally : ... return False ... >>> bool_return () False \u4e00\u4e2a\u66f4\u4e3a\u590d\u6742\u7684\u4f8b\u5b50: >>> def divide ( x , y ): ... try : ... result = x / y ... except ZeroDivisionError : ... print ( \"division by zero!\" ) ... else : ... print ( \"result is\" , result ) ... finally : ... print ( \"executing finally clause\" ) ... >>> divide ( 2 , 1 ) result is 2.0 executing finally clause >>> divide ( 2 , 0 ) division by zero ! executing finally clause >>> divide ( \"2\" , \"1\" ) executing finally clause Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > File \"<stdin>\" , line 3 , in divide TypeError : unsupported operand type ( s ) for / : 'str' and 'str' \u6b63\u5982\u4f60\u6240\u770b\u5230\u7684\uff0c finally \u5b50\u53e5\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u4f1a\u88ab\u6267\u884c\u3002 \u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u9664\u6240\u5f15\u53d1\u7684 TypeError \u4e0d\u4f1a\u7531 except \u5b50\u53e5\u5904\u7406\uff0c\u56e0\u6b64\u4f1a\u5728 finally \u5b50\u53e5\u6267\u884c\u540e\u88ab\u91cd\u65b0\u5f15\u53d1\u3002 \u5728\u5b9e\u9645\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c finally \u5b50\u53e5\u5bf9\u4e8e\u91ca\u653e\u5916\u90e8\u8d44\u6e90\uff08\u4f8b\u5982\u6587\u4ef6\u6216\u8005\u7f51\u7edc\u8fde\u63a5\uff09\u975e\u5e38\u6709\u7528\uff0c\u65e0\u8bba\u662f\u5426\u6210\u529f\u4f7f\u7528\u8d44\u6e90\u3002 1.7 \u9884\u5b9a\u4e49\u7684\u6e05\u7406\u64cd\u4f5c \u00b6 \u67d0\u4e9b\u5bf9\u8c61\u5b9a\u4e49\u4e86\u5728\u4e0d\u518d\u9700\u8981\u8be5\u5bf9\u8c61\u65f6\u8981\u6267\u884c\u7684\u6807\u51c6\u6e05\u7406\u64cd\u4f5c\uff0c\u65e0\u8bba\u4f7f\u7528\u8be5\u5bf9\u8c61\u7684\u64cd\u4f5c\u662f\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0c\u6e05\u7406\u64cd\u4f5c\u90fd\u4f1a\u88ab\u6267\u884c\u3002 \u8bf7\u67e5\u770b\u4e0b\u9762\u7684\u793a\u4f8b\uff0c\u5b83\u5c1d\u8bd5\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u5e76\u628a\u5176\u5185\u5bb9\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\u3002: for line in open ( \"myfile.txt\" ): print ( line , end = \"\" ) \u8fd9\u4e2a\u4ee3\u7801\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u5b83\u5728\u8fd9\u90e8\u5206\u4ee3\u7801\u6267\u884c\u5b8c\u540e\uff0c\u4f1a\u4f7f\u6587\u4ef6\u5728\u4e00\u6bb5\u4e0d\u786e\u5b9a\u7684\u65f6\u95f4\u5185\u5904\u4e8e\u6253\u5f00\u72b6\u6001\u3002\u8fd9\u5728\u7b80\u5355\u811a\u672c\u4e2d\u4e0d\u662f\u95ee\u9898\uff0c\u4f46\u5bf9\u4e8e\u8f83\u5927\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\u53ef\u80fd\u662f\u4e2a\u95ee\u9898\u3002 with \u8bed\u53e5\u5141\u8bb8\u50cf\u6587\u4ef6\u8fd9\u6837\u7684\u5bf9\u8c61\u80fd\u591f\u4ee5\u4e00\u79cd\u786e\u4fdd\u5b83\u4eec\u5f97\u5230\u53ca\u65f6\u548c\u6b63\u786e\u7684\u6e05\u7406\u7684\u65b9\u5f0f\u4f7f\u7528\u3002: with open ( \"myfile.txt\" ) as f : for line in f : print ( line , end = \"\" ) \u6267\u884c\u5b8c\u8bed\u53e5\u540e\uff0c\u5373\u4f7f\u5728\u5904\u7406\u884c\u65f6\u9047\u5230\u95ee\u9898\uff0c\u6587\u4ef6 f \u4e5f\u59cb\u7ec8\u4f1a\u88ab\u5173\u95ed\u3002\u548c\u6587\u4ef6\u4e00\u6837\uff0c\u63d0\u4f9b\u9884\u5b9a\u4e49\u6e05\u7406\u64cd\u4f5c\u7684\u5bf9\u8c61\u5c06\u5728\u5176\u6587\u6863\u4e2d\u6307\u51fa\u8fd9\u4e00\u70b9\u3002","title":"\u9519\u8bef\u548c\u5f02\u5e38"},{"location":"python%E5%9F%BA%E7%A1%80/%E9%94%99%E8%AF%AF%E5%92%8C%E5%BC%82%E5%B8%B8/#_1","text":"Python \u6709\u4e24\u79cd\u9519\u8bef\u5f88\u5bb9\u6613\u8fa8\u8ba4\uff1a\u8bed\u6cd5\u9519\u8bef\u548c\u5f02\u5e38\u3002","title":"\u9519\u8bef\u548c\u5f02\u5e38"},{"location":"python%E5%9F%BA%E7%A1%80/%E9%94%99%E8%AF%AF%E5%92%8C%E5%BC%82%E5%B8%B8/#11","text":"\u8bed\u6cd5\u9519\u8bef\u53c8\u79f0\u89e3\u6790\u9519\u8bef\uff0c\u662f\u5b66\u4e60 Python \u65f6\u6700\u5e38\u89c1\u7684\u9519\u8bef\uff1a >>> while True print ( 'Hello world' ) File \"<stdin>\" , line 1 while True print ( 'Hello world' ) ^ SyntaxError : invalid syntax \u89e3\u6790\u5668\u4f1a\u590d\u73b0\u51fa\u73b0\u53e5\u6cd5\u9519\u8bef\u7684\u4ee3\u7801\u884c\uff0c\u5e76\u7528\u5c0f\u201c\u7bad\u5934\u201d\u6307\u5411\u884c\u91cc\u68c0\u6d4b\u5230\u7684\u7b2c\u4e00\u4e2a\u9519\u8bef\u3002\u9519\u8bef\u662f\u7531\u7bad\u5934 \u4e0a\u65b9 \u7684 token \u89e6\u53d1\u7684\uff08\u81f3\u5c11\u662f\u5728\u8fd9\u91cc\u68c0\u6d4b\u51fa\u7684\uff09\uff1a\u672c\u4f8b\u4e2d\uff0c\u5728 print() \u51fd\u6570\u4e2d\u68c0\u6d4b\u5230\u9519\u8bef\uff0c\u56e0\u4e3a\uff0c\u5728\u5b83\u524d\u9762\u7f3a\u5c11\u5192\u53f7\uff08 ':' \uff09 \u3002\u9519\u8bef\u4fe1\u606f\u8fd8\u8f93\u51fa\u6587\u4ef6\u540d\u4e0e\u884c\u53f7\uff0c\u5728\u4f7f\u7528\u811a\u672c\u6587\u4ef6\u65f6\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u53bb\u54ea\u91cc\u67e5\u9519\u3002","title":"1.1 \u8bed\u6cd5\u9519\u8bef"},{"location":"python%E5%9F%BA%E7%A1%80/%E9%94%99%E8%AF%AF%E5%92%8C%E5%BC%82%E5%B8%B8/#12","text":"\u5373\u4f7f\u8bed\u53e5\u6216\u8868\u8fbe\u5f0f\u7684\u8bed\u6cd5\u662f\u6b63\u786e\u7684\uff0c\u6267\u884c\u65f6\u4ecd\u53ef\u80fd\u89e6\u53d1\u9519\u8bef\u3002\u6267\u884c\u65f6\u68c0\u6d4b\u5230\u7684\u9519\u8bef\u79f0\u4e3a \u5f02\u5e38 \uff0c\u5f02\u5e38\u4e0d\u4e00\u5b9a\u5bfc\u81f4\u4e25\u91cd\u7684\u540e\u679c\uff1a\u5f88\u5feb\u6211\u4eec\u5c31\u80fd\u5b66\u4f1a\u5982\u4f55\u5904\u7406 Python \u7684\u5f02\u5e38\u3002\u5927\u591a\u6570\u5f02\u5e38\u4e0d\u4f1a\u88ab\u7a0b\u5e8f\u5904\u7406\uff0c\u800c\u662f\u663e\u793a\u4e0b\u5217\u9519\u8bef\u4fe1\u606f\uff1a >>> 10 * ( 1 / 0 ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > ZeroDivisionError : division by zero >>> 4 + spam * 3 Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > NameError : name 'spam' is not defined >>> '2' + 2 Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : Can 't convert ' int ' object to str implicitly \u9519\u8bef\u4fe1\u606f\u7684\u6700\u540e\u4e00\u884c\u8bf4\u660e\u7a0b\u5e8f\u9047\u5230\u4e86\u4ec0\u4e48\u7c7b\u578b\u7684\u9519\u8bef\u3002\u5f02\u5e38\u6709\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u800c\u7c7b\u578b\u540d\u79f0\u4f1a\u4f5c\u4e3a\u9519\u8bef\u4fe1\u606f\u7684\u4e00\u90e8\u5206\u4e2d\u6253\u5370\u51fa\u6765\uff1a\u4e0a\u8ff0\u793a\u4f8b\u4e2d\u7684\u5f02\u5e38\u7c7b\u578b\u4f9d\u6b21\u662f\uff1a ZeroDivisionError \uff0c NameError \u548c TypeError \u3002\u4f5c\u4e3a\u5f02\u5e38\u7c7b\u578b\u6253\u5370\u7684\u5b57\u7b26\u4e32\u662f\u53d1\u751f\u7684\u5185\u7f6e\u5f02\u5e38\u7684\u540d\u79f0\u3002\u5bf9\u4e8e\u6240\u6709\u5185\u7f6e\u5f02\u5e38\u90fd\u662f\u5982\u6b64\uff0c\u4f46\u5bf9\u4e8e\u7528\u6237\u5b9a\u4e49\u7684\u5f02\u5e38\u5219\u4e0d\u4e00\u5b9a\u5982\u6b64\uff08\u867d\u7136\u8fd9\u79cd\u89c4\u8303\u5f88\u6709\u7528\uff09\u3002\u6807\u51c6\u7684\u5f02\u5e38\u7c7b\u578b\u662f\u5185\u7f6e\u7684\u6807\u8bc6\u7b26\uff08\u4e0d\u662f\u4fdd\u7559\u5173\u952e\u5b57\uff09\u3002 \u8fd9\u4e00\u884c\u7684\u5269\u4e0b\u7684\u90e8\u5206\u6839\u636e\u5f02\u5e38\u7c7b\u578b\u53ca\u5176\u539f\u56e0\u63d0\u4f9b\u8be6\u7ec6\u4fe1\u606f\u3002 \u9519\u8bef\u6d88\u606f\u7684\u5f00\u5934\u90e8\u5206\u4ee5\u5806\u6808\u56de\u6eaf\u7684\u5f62\u5f0f\u663e\u793a\u53d1\u751f\u5f02\u5e38\u7684\u4e0a\u4e0b\u6587\u3002 \u901a\u5e38\u5b83\u4f1a\u5305\u542b\u5217\u51fa\u6e90\u4ee3\u7801\u884c\u7684\u5806\u6808\u56de\u6eaf\uff1b\u4f46\u662f\uff0c\u5b83\u5c06\u4e0d\u4f1a\u663e\u793a\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6\u7684\u884c\u3002 \u5185\u7f6e\u5f02\u5e38 \u5217\u51fa\u4e86\u5185\u7f6e\u5f02\u5e38\u548c\u5b83\u4eec\u7684\u542b\u4e49\u3002","title":"1.2 \u5f02\u5e38"},{"location":"python%E5%9F%BA%E7%A1%80/%E9%94%99%E8%AF%AF%E5%92%8C%E5%BC%82%E5%B8%B8/#13","text":"\u53ef\u4ee5\u7f16\u5199\u5904\u7406\u6240\u9009\u5f02\u5e38\u7684\u7a0b\u5e8f\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u5b83\u4f1a\u8981\u6c42\u7528\u6237\u4e00\u76f4\u8f93\u5165\uff0c\u76f4\u5230\u8f93\u5165\u7684\u662f\u4e00\u4e2a\u6709\u6548\u7684\u6574\u6570\uff0c\u4f46\u5141\u8bb8\u7528\u6237\u4e2d\u65ad\u7a0b\u5e8f\uff08\u4f7f\u7528 Control-C \u6216\u64cd\u4f5c\u7cfb\u7edf\u652f\u6301\u7684\u5176\u4ed6\u64cd\u4f5c\uff09\uff1b\u8bf7\u6ce8\u610f\u7528\u6237\u5f15\u8d77\u7684\u4e2d\u65ad\u53ef\u4ee5\u901a\u8fc7\u5f15\u53d1 KeyboardInterrupt \u5f02\u5e38\u6765\u6307\u793a\u3002: >>> while True : ... try : ... x = int ( input ( \"Please enter a number: \" )) ... break ... except ValueError : ... print ( \"Oops! That was no valid number. Try again...\" ) ... try \u8bed\u53e5\u7684\u5de5\u4f5c\u539f\u7406\u5982\u4e0b\uff1a \u9996\u5148\uff0c\u6267\u884c try \u5b50\u53e5 \uff08 try \u548c except \u5173\u952e\u5b57\u4e4b\u95f4\u7684\uff08\u591a\u884c\uff09\u8bed\u53e5\uff09\u3002 \u5982\u679c\u6ca1\u6709\u5f02\u5e38\u53d1\u751f\uff0c\u5219\u8df3\u8fc7 except \u5b50\u53e5 \u5e76\u5b8c\u6210 try \u8bed\u53e5\u7684\u6267\u884c\u3002 \u5982\u679c\u5728\u6267\u884c try \u5b50\u53e5\u65f6\u53d1\u751f\u4e86\u5f02\u5e38\uff0c\u5219\u8df3\u8fc7\u8be5\u5b50\u53e5\u4e2d\u5269\u4e0b\u7684\u90e8\u5206\u3002 \u7136\u540e\uff0c\u5982\u679c\u5f02\u5e38\u7684\u7c7b\u578b\u548c except \u5173\u952e\u5b57\u540e\u9762\u7684\u5f02\u5e38\u5339\u914d\uff0c\u5219\u6267\u884c except \u5b50\u53e5\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c try \u8bed\u53e5\u4e4b\u540e\u7684\u4ee3\u7801\u3002 \u5982\u679c\u53d1\u751f\u7684\u5f02\u5e38\u548c except \u5b50\u53e5\u4e2d\u6307\u5b9a\u7684\u5f02\u5e38\u4e0d\u5339\u914d\uff0c\u5219\u5c06\u5176\u4f20\u9012\u5230\u5916\u90e8\u7684 try \u8bed\u53e5\u4e2d\uff1b\u5982\u679c\u6ca1\u6709\u627e\u5230\u5904\u7406\u7a0b\u5e8f\uff0c\u5219\u5b83\u662f\u4e00\u4e2a \u672a\u5904\u7406\u5f02\u5e38 \uff0c\u6267\u884c\u5c06\u505c\u6b62\u5e76\u663e\u793a\u5982\u4e0a\u6240\u793a\u7684\u6d88\u606f\u3002 \u4e00\u4e2a try \u8bed\u53e5\u53ef\u80fd\u6709\u591a\u4e2a except \u5b50\u53e5\uff0c\u4ee5\u6307\u5b9a\u4e0d\u540c\u5f02\u5e38\u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u6700\u591a\u4f1a\u6267\u884c\u4e00\u4e2a\u5904\u7406\u7a0b\u5e8f\u3002 \u5904\u7406\u7a0b\u5e8f\u53ea\u5904\u7406\u76f8\u5e94\u7684 try \u5b50\u53e5\u4e2d\u53d1\u751f\u7684\u5f02\u5e38\uff0c\u800c\u4e0d\u5904\u7406\u540c\u4e00 try \u8bed\u53e5\u5185\u5176\u4ed6\u5904\u7406\u7a0b\u5e8f\u4e2d\u7684\u5f02\u5e38\u3002 \u4e00\u4e2a except \u5b50\u53e5\u53ef\u4ee5\u5c06\u591a\u4e2a\u5f02\u5e38\u547d\u540d\u4e3a\u5e26\u62ec\u53f7\u7684\u5143\u7ec4\uff0c\u4f8b\u5982: ... except ( RuntimeError , TypeError , NameError ): ... pass \u5982\u679c\u53d1\u751f\u7684\u5f02\u5e38\u548c except \u5b50\u53e5\u4e2d\u7684\u7c7b\u662f\u540c\u4e00\u4e2a\u7c7b\u6216\u8005\u662f\u5b83\u7684\u57fa\u7c7b\uff0c\u5219\u5f02\u5e38\u548c except \u5b50\u53e5\u4e2d\u7684\u7c7b\u662f\u517c\u5bb9\u7684\uff08\u4f46\u53cd\u8fc7\u6765\u5219\u4e0d\u6210\u7acb --- \u5217\u51fa\u6d3e\u751f\u7c7b\u7684 except \u5b50\u53e5\u4e0e\u57fa\u7c7b\u4e0d\u517c\u5bb9\uff09\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u5c06\u4f9d\u6b21\u6253\u5370 B, C, D class B ( Exception ): pass class C ( B ): pass class D ( C ): pass for cls in [ B , C , D ]: try : raise cls () except D : print ( \"D\" ) except C : print ( \"C\" ) except B : print ( \"B\" ) \u8bf7\u6ce8\u610f\u5982\u679c except \u5b50\u53e5\u88ab\u98a0\u5012\uff08\u628a except B \u653e\u5230\u7b2c\u4e00\u4e2a\uff09\uff0c\u5b83\u5c06\u6253\u5370 B\uff0cB\uff0cB --- \u5373\u7b2c\u4e00\u4e2a\u5339\u914d\u7684 except \u5b50\u53e5\u88ab\u89e6\u53d1\u3002 \u6700\u540e\u7684 except \u5b50\u53e5\u53ef\u4ee5\u7701\u7565\u5f02\u5e38\u540d\uff0c\u4ee5\u7528\u4f5c\u901a\u914d\u7b26\u3002\u4f46\u8bf7\u8c28\u614e\u4f7f\u7528\uff0c\u56e0\u4e3a\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5f88\u5bb9\u6613\u63a9\u76d6\u771f\u6b63\u7684\u7f16\u7a0b\u9519\u8bef\uff01\u5b83\u8fd8\u53ef\u7528\u4e8e\u6253\u5370\u9519\u8bef\u6d88\u606f\uff0c\u7136\u540e\u91cd\u65b0\u5f15\u53d1\u5f02\u5e38\uff08\u540c\u6837\u5141\u8bb8\u8c03\u7528\u8005\u5904\u7406\u5f02\u5e38\uff09: import sys try : f = open ( 'myfile.txt' ) s = f . readline () i = int ( s . strip ()) except OSError as err : print ( \"OS error: {0} \" . format ( err )) except ValueError : print ( \"Could not convert data to an integer.\" ) except : print ( \"Unexpected error:\" , sys . exc_info ()[ 0 ]) raise try ... except \u8bed\u53e5\u6709\u4e00\u4e2a\u53ef\u9009\u7684 else \u5b50\u53e5 \uff0c\u5728\u4f7f\u7528\u65f6\u5fc5\u987b\u653e\u5728\u6240\u6709\u7684 except \u5b50\u53e5\u540e\u9762\u3002\u5bf9\u4e8e\u5728 try \u5b50\u53e5\u4e0d\u5f15\u53d1\u5f02\u5e38\u65f6\u5fc5\u987b\u6267\u884c\u7684\u4ee3\u7801\u6765\u8bf4\u5f88\u6709\u7528\u3002 \u4f8b\u5982: for arg in sys.argv[1:]: try: f = open(arg, 'r') except OSError: print('cannot open', arg) else: print(arg, 'has', len(f.readlines()), 'lines') f.close() \u4f7f\u7528 else \u5b50\u53e5\u6bd4\u5411 try \u5b50\u53e5\u6dfb\u52a0\u989d\u5916\u7684\u4ee3\u7801\u8981\u597d\uff0c\u56e0\u4e3a\u5b83\u907f\u514d\u4e86\u610f\u5916\u6355\u83b7\u975e try ... except \u8bed\u53e5\u4fdd\u62a4\u7684\u4ee3\u7801\u5f15\u53d1\u7684\u5f02\u5e38\u3002 \u53d1\u751f\u5f02\u5e38\u65f6\uff0c\u5b83\u53ef\u80fd\u5177\u6709\u5173\u8054\u503c\uff0c\u4e5f\u79f0\u4e3a\u5f02\u5e38 \u53c2\u6570 \u3002\u53c2\u6570\u7684\u5b58\u5728\u548c\u7c7b\u578b\u53d6\u51b3\u4e8e\u5f02\u5e38\u7c7b\u578b\u3002 except \u5b50\u53e5\u53ef\u4ee5\u5728\u5f02\u5e38\u540d\u79f0\u540e\u9762\u6307\u5b9a\u4e00\u4e2a\u53d8\u91cf\u3002\u8fd9\u4e2a\u53d8\u91cf\u548c\u4e00\u4e2a\u5f02\u5e38\u5b9e\u4f8b\u7ed1\u5b9a\uff0c\u5b83\u7684\u53c2\u6570\u5b58\u50a8\u5728 instance.args \u4e2d\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u5f02\u5e38\u5b9e\u4f8b\u5b9a\u4e49\u4e86 __str__() \uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u6253\u5370\u53c2\u6570\u800c\u65e0\u9700\u5f15\u7528 .args \u3002\u4e5f\u53ef\u4ee5\u5728\u629b\u51fa\u4e4b\u524d\u9996\u5148\u5b9e\u4f8b\u5316\u5f02\u5e38\uff0c\u5e76\u6839\u636e\u9700\u8981\u5411\u5176\u6dfb\u52a0\u4efb\u4f55\u5c5e\u6027\u3002: >>> try : ... raise Exception ( 'spam' , 'eggs' ) ... except Exception as inst : ... print ( type ( inst )) # the exception instance ... print ( inst . args ) # arguments stored in .args ... print ( inst ) # __str__ allows args to be printed directly, ... # but may be overridden in exception subclasses ... x , y = inst . args # unpack args ... print ( 'x =' , x ) ... print ( 'y =' , y ) ... < class ' Exception '> ( 'spam' , 'eggs' ) ( 'spam' , 'eggs' ) x = spam y = eggs \u5982\u679c\u5f02\u5e38\u6709\u53c2\u6570\uff0c\u5219\u5b83\u4eec\u5c06\u4f5c\u4e3a\u672a\u5904\u7406\u5f02\u5e38\u7684\u6d88\u606f\u7684\u6700\u540e\u4e00\u90e8\u5206\uff08'\u8be6\u7ec6\u4fe1\u606f'\uff09\u6253\u5370\u3002 \u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u4e0d\u4ec5\u5904\u7406 try \u5b50\u53e5\u4e2d\u9047\u5230\u7684\u5f02\u5e38\uff0c\u8fd8\u5904\u7406 try \u5b50\u53e5\u4e2d\u8c03\u7528\uff08\u5373\u4f7f\u662f\u95f4\u63a5\u5730\uff09\u7684\u51fd\u6570\u5185\u90e8\u53d1\u751f\u7684\u5f02\u5e38\u3002\u4f8b\u5982: >>> def this_fails (): ... x = 1 / 0 ... >>> try : ... this_fails () ... except ZeroDivisionError as err : ... print ( 'Handling run-time error:' , err ) ... Handling run - time error : division by zero","title":"1.3 \u5904\u7406\u5f02\u5e38"},{"location":"python%E5%9F%BA%E7%A1%80/%E9%94%99%E8%AF%AF%E5%92%8C%E5%BC%82%E5%B8%B8/#14","text":"Python \u4f7f\u7528 raise \u8bed\u53e5\u629b\u51fa\u4e00\u4e2a\u6307\u5b9a\u7684\u5f02\u5e38\u3002\u4f8b\u5982\uff1a >>> raise NameError ( 'HiThere' ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > NameError : HiThere raise \u552f\u4e00\u7684\u53c2\u6570\u5c31\u662f\u8981\u89e6\u53d1\u7684\u5f02\u5e38\u3002\u8fd9\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u5f02\u5e38\u5b9e\u4f8b\u6216\u5f02\u5e38\u7c7b\uff08\u6d3e\u751f\u81ea Exception \u7684\u7c7b\uff09\u3002\u5982\u679c\u4f20\u9012\u7684\u662f\u5f02\u5e38\u7c7b\uff0c\u5c06\u901a\u8fc7\u8c03\u7528\u6ca1\u6709\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u6765\u9690\u5f0f\u5b9e\u4f8b\u5316\uff1a raise ValueError # shorthand for 'raise ValueError()' \u5982\u679c\u4f60\u9700\u8981\u786e\u5b9a\u662f\u5426\u5f15\u53d1\u4e86\u5f02\u5e38\u4f46\u4e0d\u6253\u7b97\u5904\u7406\u5b83\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u66f4\u7b80\u5355\u7684 raise \u8bed\u53e5\u5f62\u5f0f\u91cd\u65b0\u5f15\u53d1\u5f02\u5e38 >>> try : ... raise NameError ( 'HiThere' ) ... except NameError : ... print ( 'An exception flew by!' ) ... raise ... An exception flew by ! Traceback ( most recent call last ): File \"<stdin>\" , line 2 , in < module > NameError : HiThere","title":"1.4 \u629b\u51fa\u5f02\u5e38"},{"location":"python%E5%9F%BA%E7%A1%80/%E9%94%99%E8%AF%AF%E5%92%8C%E5%BC%82%E5%B8%B8/#15","text":"\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u65b0\u7684\u5f02\u5e38\u7c7b\u6765\u547d\u540d\u5b83\u4eec\u81ea\u5df1\u7684\u5f02\u5e38\uff08\u6709\u5173Python \u7c7b\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u7c7b \uff09\u3002\u5f02\u5e38\u901a\u5e38\u5e94\u8be5\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u4ece Exception \u7c7b\u6d3e\u751f\u3002 \u53ef\u4ee5\u5b9a\u4e49\u5f02\u5e38\u7c7b\uff0c\u5b83\u53ef\u4ee5\u6267\u884c\u4efb\u4f55\u5176\u4ed6\u7c7b\u53ef\u4ee5\u6267\u884c\u7684\u4efb\u4f55\u64cd\u4f5c\uff0c\u4f46\u901a\u5e38\u4fdd\u6301\u7b80\u5355\uff0c\u53ea\u63d0\u4f9b\u4e00\u4e9b\u5c5e\u6027\uff0c\u8fd9\u4e9b\u5c5e\u6027\u5141\u8bb8\u5904\u7406\u7a0b\u5e8f\u4e3a\u5f02\u5e38\u63d0\u53d6\u6709\u5173\u9519\u8bef\u7684\u4fe1\u606f\u3002 \u5728\u521b\u5efa\u53ef\u80fd\u5f15\u53d1\u591a\u4e2a\u4e0d\u540c\u9519\u8bef\u7684\u6a21\u5757\u65f6\uff0c\u901a\u5e38\u7684\u505a\u6cd5\u662f\u4e3a\u8be5\u6a21\u5757\u5b9a\u4e49\u7684\u5f02\u5e38\u521b\u5efa\u57fa\u7c7b\uff0c\u5e76\u4e3a\u4e0d\u540c\u9519\u8bef\u6761\u4ef6\u521b\u5efa\u7279\u5b9a\u5f02\u5e38\u7c7b\u7684\u5b50\u7c7b: class Error ( Exception ): \"\"\"Base class for exceptions in this module.\"\"\" pass class InputError ( Error ): \"\"\"Exception raised for errors in the input. Attributes: expression -- input expression in which the error occurred message -- explanation of the error \"\"\" def __init__ ( self , expression , message ): self . expression = expression self . message = message class TransitionError ( Error ): \"\"\"Raised when an operation attempts a state transition that's not allowed. Attributes: previous -- state at beginning of transition next -- attempted new state message -- explanation of why the specific transition is not allowed \"\"\" def __init__ ( self , previous , next , message ): self . previous = previous self . next = next self . message = message \u5927\u591a\u6570\u5f02\u5e38\u90fd\u5b9a\u4e49\u4e3a\u540d\u79f0\u4ee5\u201cError\u201d\u7ed3\u5c3e\uff0c\u7c7b\u4f3c\u4e8e\u6807\u51c6\u5f02\u5e38\u7684\u547d\u540d\u3002 \u8bb8\u591a\u6807\u51c6\u6a21\u5757\u5b9a\u4e49\u4e86\u5b83\u4eec\u81ea\u5df1\u7684\u5f02\u5e38\uff0c\u4ee5\u62a5\u544a\u5b83\u4eec\u5b9a\u4e49\u7684\u51fd\u6570\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u9519\u8bef\u3002\u6709\u5173\u7c7b\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u7c7b \u7ae0\u8282\u3002","title":"1.5 \u7528\u6237\u81ea\u5b9a\u4e49\u5f02\u5e38"},{"location":"python%E5%9F%BA%E7%A1%80/%E9%94%99%E8%AF%AF%E5%92%8C%E5%BC%82%E5%B8%B8/#16","text":"try \u8bed\u53e5\u6709\u53e6\u4e00\u4e2a\u53ef\u9009\u5b50\u53e5\uff0c\u7528\u4e8e\u5b9a\u4e49\u5fc5\u987b\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u6267\u884c\u7684\u6e05\u7406\u64cd\u4f5c\u3002\u4f8b\u5982: >>> try : ... raise KeyboardInterrupt ... finally : ... print ( 'Goodbye, world!' ) ... Goodbye , world ! KeyboardInterrupt Traceback ( most recent call last ): File \"<stdin>\" , line 2 , in < module > \u5982\u679c\u5b58\u5728 finally \u5b50\u53e5\uff0c\u5219 finally \u5b50\u53e5\u5c06\u4f5c\u4e3a try \u8bed\u53e5\u7ed3\u675f\u524d\u7684\u6700\u540e\u4e00\u9879\u4efb\u52a1\u88ab\u6267\u884c\u3002 finally \u5b50\u53e5\u4e0d\u8bba try \u8bed\u53e5\u662f\u5426\u4ea7\u751f\u4e86\u5f02\u5e38\u90fd\u4f1a\u88ab\u6267\u884c\u3002 \u4ee5\u4e0b\u51e0\u70b9\u8ba8\u8bba\u4e86\u5f53\u5f02\u5e38\u53d1\u751f\u65f6\u4e00\u4e9b\u66f4\u590d\u6742\u7684\u60c5\u51b5\uff1a \u5982\u679c\u5728\u6267\u884c try \u5b50\u53e5\u671f\u95f4\u53d1\u751f\u4e86\u5f02\u5e38\uff0c\u8be5\u5f02\u5e38\u53ef\u7531\u4e00\u4e2a except \u5b50\u53e5\u8fdb\u884c\u5904\u7406\u3002 \u5982\u679c\u5f02\u5e38\u6ca1\u6709\u88ab\u67d0\u4e2a except \u5b50\u53e5\u6240\u5904\u7406\uff0c\u5219\u8be5\u5f02\u5e38\u4f1a\u5728 finally \u5b50\u53e5\u6267\u884c\u4e4b\u540e\u88ab\u91cd\u65b0\u5f15\u53d1\u3002 \u5f02\u5e38\u4e5f\u53ef\u80fd\u5728 except \u6216 else \u5b50\u53e5\u6267\u884c\u671f\u95f4\u53d1\u751f\u3002 \u540c\u6837\u5730\uff0c\u8be5\u5f02\u5e38\u4f1a\u5728 finally \u5b50\u53e5\u6267\u884c\u4e4b\u540e\u88ab\u91cd\u65b0\u5f15\u53d1\u3002 \u5982\u679c\u5728\u6267\u884c try \u8bed\u53e5\u65f6\u9047\u5230\u4e00\u4e2a break , continue \u6216 return \u8bed\u53e5\uff0c\u5219 finally \u5b50\u53e5\u5c06\u5728\u6267\u884c break , continue \u6216 return \u8bed\u53e5\u4e4b\u524d\u88ab\u6267\u884c\u3002 \u5982\u679c finally \u5b50\u53e5\u4e2d\u5305\u542b\u4e00\u4e2a return \u8bed\u53e5\uff0c\u5219\u8fd4\u56de\u503c\u5c06\u6765\u81ea finally \u5b50\u53e5\u7684\u67d0\u4e2a return \u8bed\u53e5\u7684\u8fd4\u56de\u503c\uff0c\u800c\u975e\u6765\u81ea try \u5b50\u53e5\u7684 return \u8bed\u53e5\u7684\u8fd4\u56de\u503c\u3002 \u4f8b\u5982: >>> def bool_return (): ... try : ... return True ... finally : ... return False ... >>> bool_return () False \u4e00\u4e2a\u66f4\u4e3a\u590d\u6742\u7684\u4f8b\u5b50: >>> def divide ( x , y ): ... try : ... result = x / y ... except ZeroDivisionError : ... print ( \"division by zero!\" ) ... else : ... print ( \"result is\" , result ) ... finally : ... print ( \"executing finally clause\" ) ... >>> divide ( 2 , 1 ) result is 2.0 executing finally clause >>> divide ( 2 , 0 ) division by zero ! executing finally clause >>> divide ( \"2\" , \"1\" ) executing finally clause Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > File \"<stdin>\" , line 3 , in divide TypeError : unsupported operand type ( s ) for / : 'str' and 'str' \u6b63\u5982\u4f60\u6240\u770b\u5230\u7684\uff0c finally \u5b50\u53e5\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u4f1a\u88ab\u6267\u884c\u3002 \u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u9664\u6240\u5f15\u53d1\u7684 TypeError \u4e0d\u4f1a\u7531 except \u5b50\u53e5\u5904\u7406\uff0c\u56e0\u6b64\u4f1a\u5728 finally \u5b50\u53e5\u6267\u884c\u540e\u88ab\u91cd\u65b0\u5f15\u53d1\u3002 \u5728\u5b9e\u9645\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c finally \u5b50\u53e5\u5bf9\u4e8e\u91ca\u653e\u5916\u90e8\u8d44\u6e90\uff08\u4f8b\u5982\u6587\u4ef6\u6216\u8005\u7f51\u7edc\u8fde\u63a5\uff09\u975e\u5e38\u6709\u7528\uff0c\u65e0\u8bba\u662f\u5426\u6210\u529f\u4f7f\u7528\u8d44\u6e90\u3002","title":"1.6 \u5b9a\u4e49\u6e05\u7406\u64cd\u4f5c"},{"location":"python%E5%9F%BA%E7%A1%80/%E9%94%99%E8%AF%AF%E5%92%8C%E5%BC%82%E5%B8%B8/#17","text":"\u67d0\u4e9b\u5bf9\u8c61\u5b9a\u4e49\u4e86\u5728\u4e0d\u518d\u9700\u8981\u8be5\u5bf9\u8c61\u65f6\u8981\u6267\u884c\u7684\u6807\u51c6\u6e05\u7406\u64cd\u4f5c\uff0c\u65e0\u8bba\u4f7f\u7528\u8be5\u5bf9\u8c61\u7684\u64cd\u4f5c\u662f\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0c\u6e05\u7406\u64cd\u4f5c\u90fd\u4f1a\u88ab\u6267\u884c\u3002 \u8bf7\u67e5\u770b\u4e0b\u9762\u7684\u793a\u4f8b\uff0c\u5b83\u5c1d\u8bd5\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u5e76\u628a\u5176\u5185\u5bb9\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\u3002: for line in open ( \"myfile.txt\" ): print ( line , end = \"\" ) \u8fd9\u4e2a\u4ee3\u7801\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u5b83\u5728\u8fd9\u90e8\u5206\u4ee3\u7801\u6267\u884c\u5b8c\u540e\uff0c\u4f1a\u4f7f\u6587\u4ef6\u5728\u4e00\u6bb5\u4e0d\u786e\u5b9a\u7684\u65f6\u95f4\u5185\u5904\u4e8e\u6253\u5f00\u72b6\u6001\u3002\u8fd9\u5728\u7b80\u5355\u811a\u672c\u4e2d\u4e0d\u662f\u95ee\u9898\uff0c\u4f46\u5bf9\u4e8e\u8f83\u5927\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\u53ef\u80fd\u662f\u4e2a\u95ee\u9898\u3002 with \u8bed\u53e5\u5141\u8bb8\u50cf\u6587\u4ef6\u8fd9\u6837\u7684\u5bf9\u8c61\u80fd\u591f\u4ee5\u4e00\u79cd\u786e\u4fdd\u5b83\u4eec\u5f97\u5230\u53ca\u65f6\u548c\u6b63\u786e\u7684\u6e05\u7406\u7684\u65b9\u5f0f\u4f7f\u7528\u3002: with open ( \"myfile.txt\" ) as f : for line in f : print ( line , end = \"\" ) \u6267\u884c\u5b8c\u8bed\u53e5\u540e\uff0c\u5373\u4f7f\u5728\u5904\u7406\u884c\u65f6\u9047\u5230\u95ee\u9898\uff0c\u6587\u4ef6 f \u4e5f\u59cb\u7ec8\u4f1a\u88ab\u5173\u95ed\u3002\u548c\u6587\u4ef6\u4e00\u6837\uff0c\u63d0\u4f9b\u9884\u5b9a\u4e49\u6e05\u7406\u64cd\u4f5c\u7684\u5bf9\u8c61\u5c06\u5728\u5176\u6587\u6863\u4e2d\u6307\u51fa\u8fd9\u4e00\u70b9\u3002","title":"1.7 \u9884\u5b9a\u4e49\u7684\u6e05\u7406\u64cd\u4f5c"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/","text":"\u6570\u636e\u6574\u7406 \u00b6 \u6570\u636e\u6574\u7406\u662f\u5728\u6570\u636e\u6e05\u6d17\u7684\u57fa\u7840\u4e0a\uff0c\u8fdb\u4e00\u6b65\u5c06\u6570\u636e\u5904\u7406\u6210\u53ef\u4ee5\u5206\u6790\u6216\u53ef\u89c6\u5316\u7684\u6570\u636e\uff0c\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u4ee5\u4e0b\u53ea\u7b80\u5355\u7f57\u5217\u4e86\u4e00\u4e9b\u51fd\u6570\uff0c\u5e76\u5bf9\u5e38\u7528\u7684 groupby() \u548c to_datetime() \u51fd\u6570\u8fdb\u884c\u4e86\u4ecb\u7ecd\uff1b\u66f4\u591a\u51fd\u6570\u53ca\u4ecb\u7ecd\uff0c\u8bf7\u53c2\u9605 pandas\u5b98\u65b9\u6587\u6863 \u3002 \u6570\u636e\u5408\u5e76 concat() append() merge() join() compare() \u91cd\u5851\u548c\u900f\u89c6\u8868 pivot() stack() unstack() melt() pivot_table() crosstab() cut() get_dummies() factorize() \u65e5\u671f\u529f\u80fd to_datetime() \u5206\u7ec4 groupby() groupby() \u51fd\u6570 \u00b6 DataFrame DataFrame . groupby ( by = None , axis = 0 , level = None , as_index = True , sort = True , group_keys = True , squeeze =< object object > , observed = False , dropna = True ) # by: mapping, function, label, or list of labels # axis: {0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0 # level: int, level name, or sequence of such, default None # sort: bool, default True # group_keys: bool, default True # squeeze: bool, default False # observed: bool, default False # dropna: bool, default True Series Series . groupby ( by = None , axis = 0 , level = None , as_index = True , sort = True , group_keys = True , squeeze =< object object > , observed = False , dropna = True ) \u6570\u636e\u5206\u7ec4 \u00b6 pandas \u5bf9\u8c61\u53ef\u4ee5\u5728\u4efb\u4f55\u8f74\u4e0a\u62c6\u5206,\u5206\u7ec4\u7684\u62bd\u8c61\u5b9a\u4e49\u662f\u63d0\u4f9b\u6807\u7b7e\u5230\u5206\u7ec4\u540d\u79f0\u7684\u6620\u5c04\u3002 import pandas as pd import numpy as np df = pd . DataFrame ( [( \"bird\" , \"Falconiformes\" , 389.0 ), ( \"bird\" , \"Psittaciformes\" , 24.0 ), ( \"mammal\" , \"Carnivora\" , 80.2 ), ( \"mammal\" , \"Primates\" , np . nan ), ( \"mammal\" , \"Carnivora\" , 58 ),], index = [ \"falcon\" , \"parrot\" , \"lion\" , \"monkey\" , \"leopard\" ], columns = ( \"class\" , \"order\" , \"max_speed\" ),) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } class order max_speed falcon bird Falconiformes 389.0 parrot bird Psittaciformes 24.0 lion mammal Carnivora 80.2 monkey mammal Primates NaN leopard mammal Carnivora 58.0 grouped = df . groupby ( \"class\" ) # \u9ed8\u8ba4 axis = 0 ; df.groupby('A')\u53ea\u662f\u8bed\u6cd5\u7cd6df.groupby(df['A']) grouped = df . groupby ( \"order\" , axis = \"columns\" ) # axis = 1 \u6309\u5217 grouped = df . groupby ([ \"class\" , \"order\" ]) # \u6309\u591a\u5217\u5206\u7ec4 \u6392\u5e8f \u00b6 \u5728 groupby() \u8fc7\u7a0b\u4e2d\u662f\u9ed8\u8ba4\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u53c2\u6570 sort = False \u6765\u53d6\u6d88\u81ea\u52a8\u6392\u5e8f\u3002 df2 = pd . DataFrame ({ \"X\" : [ \"B\" , \"B\" , \"A\" , \"A\" ], \"Y\" : [ 1 , 2 , 3 , 4 ]}) df2 . groupby ([ \"X\" ]) . sum () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Y X A 7 B 3 df2 . groupby ([ \"X\" ], sort = False ) . sum () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Y X B 3 A 7 \u7f3a\u5931\u503c \u00b6 \u5728 groupby() \u8fc7\u7a0b\u4e2d\u662f\u9ed8\u8ba4\u5bf9NA\u8fdb\u884c\u5220\u9664\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u53c2\u6570 dropna = False \u6765\u53d6\u6d88\u3002 df_list = [[ 1 , 2 , 3 ], [ 1 , None , 4 ], [ 2 , 1 , 3 ], [ 1 , 2 , 2 ]] df_dropna = pd . DataFrame ( df_list , columns = [ \"a\" , \"b\" , \"c\" ]) df_dropna .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c 0 1 2.0 3 1 1 NaN 4 2 2 1.0 3 3 1 2.0 2 df_dropna . groupby ( by = [ \"b\" ], dropna = True ) . sum () # \u9ed8\u8ba4 dropna = True .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a c b 1.0 2 3 2.0 2 5 df_dropna . groupby ( by = [ \"b\" ], dropna = False ) . sum () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a c b 1.0 2 3 2.0 2 5 NaN 1 4 groupby\u5bf9\u8c61\u5c5e\u6027 \u00b6 groups\u662f\u4e2a\u5b57\u5178\u3002The groups attribute is a dict whose keys are the computed unique groups and corresponding values being the axis labels belonging to each group. df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } class order max_speed falcon bird Falconiformes 389.0 parrot bird Psittaciformes 24.0 lion mammal Carnivora 80.2 monkey mammal Primates NaN leopard mammal Carnivora 58.0 df . groupby ( 'class' ) . groups {'bird': ['falcon', 'parrot'], 'mammal': ['lion', 'monkey', 'leopard']} \u53ef\u4ee5\u904d\u5386\u5404\u7ec4\u6570\u636e grouped = df . groupby ( \"class\" ) for name , group in grouped : print ( name ) print ( group ) bird class order max_speed falcon bird Falconiformes 389.0 parrot bird Psittaciformes 24.0 mammal class order max_speed lion mammal Carnivora 80.2 monkey mammal Primates NaN leopard mammal Carnivora 58.0 \u9009\u62e9\u4e00\u7ec4\u6570\u636e get_group() grouped . get_group ( 'bird' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } class order max_speed falcon bird Falconiformes 389.0 parrot bird Psittaciformes 24.0 \u6570\u636e\u805a\u5408 \u00b6 \u521b\u5efagroupBy\u5bf9\u8c61\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u65b9\u6cd5\u5bf9\u5206\u7ec4\u6570\u636e\u8fdb\u884c\u8ba1\u7b97, aggregate() \u6216\u7b49\u6548 agg() \u662f\u4e00\u79cd\u65b9\u6cd5\u3002 df . groupby ( 'class' ) . agg ( sum ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } max_speed class bird 413.0 mammal 138.2 df . groupby ([ 'class' , 'order' ]) . sum () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } max_speed class order bird Falconiformes 389.0 Psittaciformes 24.0 mammal Carnivora 138.2 Primates 0.0 \u8fd0\u7528\u591a\u4e2a\u51fd\u6570 df . groupby ( 'class' )[ 'max_speed' ] . agg ([ np . sum , np . mean , np . std ]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } sum mean std class bird 413.0 206.5 258.093975 mammal 138.2 69.1 15.697771 \u547d\u540d\u805a\u5408 animals = pd . DataFrame ( { \"kind\" : [ \"cat\" , \"dog\" , \"cat\" , \"dog\" ], \"height\" : [ 9.1 , 6.0 , 9.5 , 34.0 ], \"weight\" : [ 7.9 , 7.5 , 9.9 , 198.0 ], } ) animals .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } kind height weight 0 cat 9.1 7.9 1 dog 6.0 7.5 2 cat 9.5 9.9 3 dog 34.0 198.0 animals . groupby ( \"kind\" ) . agg ( min_height = ( \"height\" , \"min\" ), max_height = ( \"height\" , \"max\" ), average_weight = ( \"weight\" , np . mean ),) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } min_height max_height average_weight kind cat 9.1 9.5 8.90 dog 6.0 34.0 102.75 animals . groupby ( \"kind\" ) . agg ( min_height = pd . NamedAgg ( column = \"height\" , aggfunc = \"min\" ), max_height = pd . NamedAgg ( column = \"height\" , aggfunc = \"max\" ), average_weight = pd . NamedAgg ( column = \"weight\" , aggfunc = np . mean ),) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } min_height max_height average_weight kind cat 9.1 9.5 8.90 dog 6.0 34.0 102.75 animals . groupby ( \"kind\" ) . agg ( ** { \"total weight\" : pd . NamedAgg ( column = \"weight\" , aggfunc = sum )} ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } total weight kind cat 17.8 dog 205.5 # \u5bf9\u5e8f\u5217\u540c\u6837\u6709\u6548 animals . groupby ( \"kind\" ) . height . agg ( min_height = \"min\" , max_height = \"max\" , ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } min_height max_height kind cat 9.1 9.5 dog 6.0 34.0 \u5c06\u4e0d\u540c\u51fd\u6570\u8fd0\u7528\u5230\u4e0d\u540c\u5217 animals . groupby ( 'kind' ) . agg ({ 'height' : 'min' , 'weight' : 'max' }) # \u53ea\u4f20\u5165\u51fd\u6570\u540d\uff0c\u4e0d\u5e26\u62ec\u53f7\uff1b\u4e5f\u53ef\u4ee5\u4f20\u5165lambda\u51fd\u6570 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } height weight kind cat 9.1 9.9 dog 6.0 198.0 apply() \u00b6 \u5bf9\u5206\u7ec4\u6570\u636e\u8fdb\u884c\u7684\u67d0\u4e9b\u64cd\u4f5c\u53ef\u80fd\u65e2\u4e0d\u9002\u5408\u805a\u5408\u7c7b\u522b\uff0c\u4e5f\u4e0d\u9002\u5408\u8f6c\u6362\u7c7b\u522b\uff1b\u6216\u8005\uff0c\u60a8\u53ef\u80fd\u53ea\u662f\u5e0c\u671bgroupBy\u63a8\u65ad\u5982\u4f55\u5408\u5e76\u7ed3\u679c\u3002\u5bf9\u4e8e\u8fd9\u4e9b\uff0c\u53ef\u4ee5\u4f7f\u7528apply\u7684\u529f\u80fd\uff1bapply\u53ef\u4ee5\u5904\u7406\u4e00\u4e9b\u7279\u6b8a\u7684\u7528\u4f8b\u3002 data = pd . DataFrame ( { \"A\" : [ \"foo\" , \"bar\" , \"foo\" , \"bar\" , \"foo\" , \"bar\" , \"foo\" , \"foo\" ], \"B\" : [ \"one\" , \"one\" , \"two\" , \"three\" , \"two\" , \"two\" , \"one\" , \"three\" ], \"C\" : np . random . randn ( 8 ), \"D\" : np . random . randn ( 8 ), } ) data .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 foo one -0.170393 0.347397 1 bar one 0.733136 -0.304196 2 foo two 0.576483 -3.176851 3 bar three 0.192013 1.323317 4 foo two 1.443719 1.287474 5 bar two -0.182249 1.171232 6 foo one 1.658044 -1.198488 7 foo three 0.454383 1.242889 grouped = data . groupby ( \"A\" ) # could also just call .describe() grouped [ \"C\" ] . apply ( lambda x : x . describe ()) A bar count 3.000000 mean 0.247633 std 0.460220 min -0.182249 25% 0.004882 50% 0.192013 75% 0.462574 max 0.733136 foo count 5.000000 mean 0.792447 std 0.751898 min -0.170393 25% 0.454383 50% 0.576483 75% 1.443719 max 1.658044 Name: C, dtype: float64 grouped = data . groupby ( 'A' )[ 'C' ] def f ( group ): return pd . DataFrame ({ 'original' : group , 'demeaned' : group - group . mean ()}) grouped . apply ( f ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } original demeaned 0 -0.170393 -0.962840 1 0.733136 0.485502 2 0.576483 -0.215964 3 0.192013 -0.055620 4 1.443719 0.651272 5 -0.182249 -0.429882 6 1.658044 0.865597 7 0.454383 -0.338064 = \u8f6c\u6362\u65b9\u6cd5-transform()\u6ca1\u600e\u4e48\u7528\u5230\u8fc7\uff0c\u611f\u5174\u8da3\u7684\u53ef\u67e5\u9605 groupby() to_datetime() \u00b6 pandas . to_datetime ( arg , errors = 'raise' , dayfirst = False , yearfirst = False , utc = None , format = None , exact = True , unit = None , infer_datetime_format = False , origin = 'unix' , cache = True ) \u57fa\u672c\u7528\u6cd5 df = pd . DataFrame ({ 'year' : [ 2015 , 2016 ], 'month' : [ 2 , 3 ], 'day' : [ 4 , 5 ]}) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } year month day 0 2015 2 4 1 2016 3 5 pd . to_datetime ( df ) 0 2015 - 02 - 04 1 2016 - 03 - 05 dtype : datetime64 [ ns ] \u8f6c\u6362\u65e5\u671f\uff0c\u63d0\u53d6\u5e74\u6708\u65e5 data = pd . DataFrame ({ 'date' : [ 20210107 , 20210406 ], 'weight' : [ 140 , 130 ]}) data .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } date weight 0 20210107 140 1 20210406 130 # \u8f6c\u6362\u6210\u65e5\u671f data [ 'date' ] = pd . to_datetime ( data [ 'date' ], format = '%Y%m %d ' ) data .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } date weight 0 2021-01-07 140 1 2021-04-06 130 # \u63d0\u53d6\u5e74\u3001\u6708\u3001\u65e5 year = data [ 'date' ] . dt . year year 0 2021 1 2021 Name : date , dtype : int 64 month = data [ 'date' ] . dt . month month 0 1 1 4 Name : date , dtype : int 64 day = data [ 'date' ] . dt . day day 0 7 1 6 Name : date , dtype : int 64","title":"\u6570\u636e\u6574\u7406"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/#_1","text":"\u6570\u636e\u6574\u7406\u662f\u5728\u6570\u636e\u6e05\u6d17\u7684\u57fa\u7840\u4e0a\uff0c\u8fdb\u4e00\u6b65\u5c06\u6570\u636e\u5904\u7406\u6210\u53ef\u4ee5\u5206\u6790\u6216\u53ef\u89c6\u5316\u7684\u6570\u636e\uff0c\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u4ee5\u4e0b\u53ea\u7b80\u5355\u7f57\u5217\u4e86\u4e00\u4e9b\u51fd\u6570\uff0c\u5e76\u5bf9\u5e38\u7528\u7684 groupby() \u548c to_datetime() \u51fd\u6570\u8fdb\u884c\u4e86\u4ecb\u7ecd\uff1b\u66f4\u591a\u51fd\u6570\u53ca\u4ecb\u7ecd\uff0c\u8bf7\u53c2\u9605 pandas\u5b98\u65b9\u6587\u6863 \u3002 \u6570\u636e\u5408\u5e76 concat() append() merge() join() compare() \u91cd\u5851\u548c\u900f\u89c6\u8868 pivot() stack() unstack() melt() pivot_table() crosstab() cut() get_dummies() factorize() \u65e5\u671f\u529f\u80fd to_datetime() \u5206\u7ec4 groupby()","title":"\u6570\u636e\u6574\u7406"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/#groupby","text":"DataFrame DataFrame . groupby ( by = None , axis = 0 , level = None , as_index = True , sort = True , group_keys = True , squeeze =< object object > , observed = False , dropna = True ) # by: mapping, function, label, or list of labels # axis: {0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0 # level: int, level name, or sequence of such, default None # sort: bool, default True # group_keys: bool, default True # squeeze: bool, default False # observed: bool, default False # dropna: bool, default True Series Series . groupby ( by = None , axis = 0 , level = None , as_index = True , sort = True , group_keys = True , squeeze =< object object > , observed = False , dropna = True )","title":"groupby()\u51fd\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/#_2","text":"pandas \u5bf9\u8c61\u53ef\u4ee5\u5728\u4efb\u4f55\u8f74\u4e0a\u62c6\u5206,\u5206\u7ec4\u7684\u62bd\u8c61\u5b9a\u4e49\u662f\u63d0\u4f9b\u6807\u7b7e\u5230\u5206\u7ec4\u540d\u79f0\u7684\u6620\u5c04\u3002 import pandas as pd import numpy as np df = pd . DataFrame ( [( \"bird\" , \"Falconiformes\" , 389.0 ), ( \"bird\" , \"Psittaciformes\" , 24.0 ), ( \"mammal\" , \"Carnivora\" , 80.2 ), ( \"mammal\" , \"Primates\" , np . nan ), ( \"mammal\" , \"Carnivora\" , 58 ),], index = [ \"falcon\" , \"parrot\" , \"lion\" , \"monkey\" , \"leopard\" ], columns = ( \"class\" , \"order\" , \"max_speed\" ),) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } class order max_speed falcon bird Falconiformes 389.0 parrot bird Psittaciformes 24.0 lion mammal Carnivora 80.2 monkey mammal Primates NaN leopard mammal Carnivora 58.0 grouped = df . groupby ( \"class\" ) # \u9ed8\u8ba4 axis = 0 ; df.groupby('A')\u53ea\u662f\u8bed\u6cd5\u7cd6df.groupby(df['A']) grouped = df . groupby ( \"order\" , axis = \"columns\" ) # axis = 1 \u6309\u5217 grouped = df . groupby ([ \"class\" , \"order\" ]) # \u6309\u591a\u5217\u5206\u7ec4","title":"\u6570\u636e\u5206\u7ec4"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/#_3","text":"\u5728 groupby() \u8fc7\u7a0b\u4e2d\u662f\u9ed8\u8ba4\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u53c2\u6570 sort = False \u6765\u53d6\u6d88\u81ea\u52a8\u6392\u5e8f\u3002 df2 = pd . DataFrame ({ \"X\" : [ \"B\" , \"B\" , \"A\" , \"A\" ], \"Y\" : [ 1 , 2 , 3 , 4 ]}) df2 . groupby ([ \"X\" ]) . sum () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Y X A 7 B 3 df2 . groupby ([ \"X\" ], sort = False ) . sum () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Y X B 3 A 7","title":"\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/#_4","text":"\u5728 groupby() \u8fc7\u7a0b\u4e2d\u662f\u9ed8\u8ba4\u5bf9NA\u8fdb\u884c\u5220\u9664\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u53c2\u6570 dropna = False \u6765\u53d6\u6d88\u3002 df_list = [[ 1 , 2 , 3 ], [ 1 , None , 4 ], [ 2 , 1 , 3 ], [ 1 , 2 , 2 ]] df_dropna = pd . DataFrame ( df_list , columns = [ \"a\" , \"b\" , \"c\" ]) df_dropna .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c 0 1 2.0 3 1 1 NaN 4 2 2 1.0 3 3 1 2.0 2 df_dropna . groupby ( by = [ \"b\" ], dropna = True ) . sum () # \u9ed8\u8ba4 dropna = True .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a c b 1.0 2 3 2.0 2 5 df_dropna . groupby ( by = [ \"b\" ], dropna = False ) . sum () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a c b 1.0 2 3 2.0 2 5 NaN 1 4","title":"\u7f3a\u5931\u503c"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/#groupby_1","text":"groups\u662f\u4e2a\u5b57\u5178\u3002The groups attribute is a dict whose keys are the computed unique groups and corresponding values being the axis labels belonging to each group. df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } class order max_speed falcon bird Falconiformes 389.0 parrot bird Psittaciformes 24.0 lion mammal Carnivora 80.2 monkey mammal Primates NaN leopard mammal Carnivora 58.0 df . groupby ( 'class' ) . groups {'bird': ['falcon', 'parrot'], 'mammal': ['lion', 'monkey', 'leopard']} \u53ef\u4ee5\u904d\u5386\u5404\u7ec4\u6570\u636e grouped = df . groupby ( \"class\" ) for name , group in grouped : print ( name ) print ( group ) bird class order max_speed falcon bird Falconiformes 389.0 parrot bird Psittaciformes 24.0 mammal class order max_speed lion mammal Carnivora 80.2 monkey mammal Primates NaN leopard mammal Carnivora 58.0 \u9009\u62e9\u4e00\u7ec4\u6570\u636e get_group() grouped . get_group ( 'bird' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } class order max_speed falcon bird Falconiformes 389.0 parrot bird Psittaciformes 24.0","title":"groupby\u5bf9\u8c61\u5c5e\u6027"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/#_5","text":"\u521b\u5efagroupBy\u5bf9\u8c61\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u65b9\u6cd5\u5bf9\u5206\u7ec4\u6570\u636e\u8fdb\u884c\u8ba1\u7b97, aggregate() \u6216\u7b49\u6548 agg() \u662f\u4e00\u79cd\u65b9\u6cd5\u3002 df . groupby ( 'class' ) . agg ( sum ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } max_speed class bird 413.0 mammal 138.2 df . groupby ([ 'class' , 'order' ]) . sum () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } max_speed class order bird Falconiformes 389.0 Psittaciformes 24.0 mammal Carnivora 138.2 Primates 0.0 \u8fd0\u7528\u591a\u4e2a\u51fd\u6570 df . groupby ( 'class' )[ 'max_speed' ] . agg ([ np . sum , np . mean , np . std ]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } sum mean std class bird 413.0 206.5 258.093975 mammal 138.2 69.1 15.697771 \u547d\u540d\u805a\u5408 animals = pd . DataFrame ( { \"kind\" : [ \"cat\" , \"dog\" , \"cat\" , \"dog\" ], \"height\" : [ 9.1 , 6.0 , 9.5 , 34.0 ], \"weight\" : [ 7.9 , 7.5 , 9.9 , 198.0 ], } ) animals .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } kind height weight 0 cat 9.1 7.9 1 dog 6.0 7.5 2 cat 9.5 9.9 3 dog 34.0 198.0 animals . groupby ( \"kind\" ) . agg ( min_height = ( \"height\" , \"min\" ), max_height = ( \"height\" , \"max\" ), average_weight = ( \"weight\" , np . mean ),) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } min_height max_height average_weight kind cat 9.1 9.5 8.90 dog 6.0 34.0 102.75 animals . groupby ( \"kind\" ) . agg ( min_height = pd . NamedAgg ( column = \"height\" , aggfunc = \"min\" ), max_height = pd . NamedAgg ( column = \"height\" , aggfunc = \"max\" ), average_weight = pd . NamedAgg ( column = \"weight\" , aggfunc = np . mean ),) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } min_height max_height average_weight kind cat 9.1 9.5 8.90 dog 6.0 34.0 102.75 animals . groupby ( \"kind\" ) . agg ( ** { \"total weight\" : pd . NamedAgg ( column = \"weight\" , aggfunc = sum )} ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } total weight kind cat 17.8 dog 205.5 # \u5bf9\u5e8f\u5217\u540c\u6837\u6709\u6548 animals . groupby ( \"kind\" ) . height . agg ( min_height = \"min\" , max_height = \"max\" , ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } min_height max_height kind cat 9.1 9.5 dog 6.0 34.0 \u5c06\u4e0d\u540c\u51fd\u6570\u8fd0\u7528\u5230\u4e0d\u540c\u5217 animals . groupby ( 'kind' ) . agg ({ 'height' : 'min' , 'weight' : 'max' }) # \u53ea\u4f20\u5165\u51fd\u6570\u540d\uff0c\u4e0d\u5e26\u62ec\u53f7\uff1b\u4e5f\u53ef\u4ee5\u4f20\u5165lambda\u51fd\u6570 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } height weight kind cat 9.1 9.9 dog 6.0 198.0","title":"\u6570\u636e\u805a\u5408"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/#apply","text":"\u5bf9\u5206\u7ec4\u6570\u636e\u8fdb\u884c\u7684\u67d0\u4e9b\u64cd\u4f5c\u53ef\u80fd\u65e2\u4e0d\u9002\u5408\u805a\u5408\u7c7b\u522b\uff0c\u4e5f\u4e0d\u9002\u5408\u8f6c\u6362\u7c7b\u522b\uff1b\u6216\u8005\uff0c\u60a8\u53ef\u80fd\u53ea\u662f\u5e0c\u671bgroupBy\u63a8\u65ad\u5982\u4f55\u5408\u5e76\u7ed3\u679c\u3002\u5bf9\u4e8e\u8fd9\u4e9b\uff0c\u53ef\u4ee5\u4f7f\u7528apply\u7684\u529f\u80fd\uff1bapply\u53ef\u4ee5\u5904\u7406\u4e00\u4e9b\u7279\u6b8a\u7684\u7528\u4f8b\u3002 data = pd . DataFrame ( { \"A\" : [ \"foo\" , \"bar\" , \"foo\" , \"bar\" , \"foo\" , \"bar\" , \"foo\" , \"foo\" ], \"B\" : [ \"one\" , \"one\" , \"two\" , \"three\" , \"two\" , \"two\" , \"one\" , \"three\" ], \"C\" : np . random . randn ( 8 ), \"D\" : np . random . randn ( 8 ), } ) data .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 foo one -0.170393 0.347397 1 bar one 0.733136 -0.304196 2 foo two 0.576483 -3.176851 3 bar three 0.192013 1.323317 4 foo two 1.443719 1.287474 5 bar two -0.182249 1.171232 6 foo one 1.658044 -1.198488 7 foo three 0.454383 1.242889 grouped = data . groupby ( \"A\" ) # could also just call .describe() grouped [ \"C\" ] . apply ( lambda x : x . describe ()) A bar count 3.000000 mean 0.247633 std 0.460220 min -0.182249 25% 0.004882 50% 0.192013 75% 0.462574 max 0.733136 foo count 5.000000 mean 0.792447 std 0.751898 min -0.170393 25% 0.454383 50% 0.576483 75% 1.443719 max 1.658044 Name: C, dtype: float64 grouped = data . groupby ( 'A' )[ 'C' ] def f ( group ): return pd . DataFrame ({ 'original' : group , 'demeaned' : group - group . mean ()}) grouped . apply ( f ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } original demeaned 0 -0.170393 -0.962840 1 0.733136 0.485502 2 0.576483 -0.215964 3 0.192013 -0.055620 4 1.443719 0.651272 5 -0.182249 -0.429882 6 1.658044 0.865597 7 0.454383 -0.338064 = \u8f6c\u6362\u65b9\u6cd5-transform()\u6ca1\u600e\u4e48\u7528\u5230\u8fc7\uff0c\u611f\u5174\u8da3\u7684\u53ef\u67e5\u9605 groupby()","title":"apply()"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/#to_datetime","text":"pandas . to_datetime ( arg , errors = 'raise' , dayfirst = False , yearfirst = False , utc = None , format = None , exact = True , unit = None , infer_datetime_format = False , origin = 'unix' , cache = True ) \u57fa\u672c\u7528\u6cd5 df = pd . DataFrame ({ 'year' : [ 2015 , 2016 ], 'month' : [ 2 , 3 ], 'day' : [ 4 , 5 ]}) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } year month day 0 2015 2 4 1 2016 3 5 pd . to_datetime ( df ) 0 2015 - 02 - 04 1 2016 - 03 - 05 dtype : datetime64 [ ns ] \u8f6c\u6362\u65e5\u671f\uff0c\u63d0\u53d6\u5e74\u6708\u65e5 data = pd . DataFrame ({ 'date' : [ 20210107 , 20210406 ], 'weight' : [ 140 , 130 ]}) data .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } date weight 0 20210107 140 1 20210406 130 # \u8f6c\u6362\u6210\u65e5\u671f data [ 'date' ] = pd . to_datetime ( data [ 'date' ], format = '%Y%m %d ' ) data .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } date weight 0 2021-01-07 140 1 2021-04-06 130 # \u63d0\u53d6\u5e74\u3001\u6708\u3001\u65e5 year = data [ 'date' ] . dt . year year 0 2021 1 2021 Name : date , dtype : int 64 month = data [ 'date' ] . dt . month month 0 1 1 4 Name : date , dtype : int 64 day = data [ 'date' ] . dt . day day 0 7 1 6 Name : date , dtype : int 64","title":"to_datetime()"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/","text":"\u6570\u636e\u6e05\u6d17 \u00b6 \u6570\u636e\u5904\u7406\u662f\u6307\u5c06\u6536\u96c6\u5230\u7684\u6570\u636e\u8fdb\u884c\u52a0\u5de5\u3001\u6574\u7406\uff0c\u5f62\u6210\u9002\u5408\u6570\u636e\u5206\u6790\u7684\u6837\u5f0f\uff1b\u53ef\u4ee5\u5c06\u6570\u636e\u5904\u7406\u7b80\u5355\u7684\u5206\u4e3a\u6570\u636e\u7684\u6e05\u6d17\u3001\u6570\u636e\u7684\u6574\u7406\uff1b\u6570\u636e\u6e05\u6d17\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u4e09\u4e2a\u8fc7\u7a0b\uff1a \u5904\u7406\u7f3a\u5931\u503c \u5904\u7406\u91cd\u590d\u503c \u5904\u7406\u5f02\u5e38\u503c \u4e3b\u8981\u7528\u5230\u7684\u662f pandas \u5e93\u3002 \u5904\u7406\u7f3a\u5931\u503c \u00b6 \u67e5\u770b\u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f import pandas as pd data = pd . read_excel ( 'path_to_file.xls\u6216.xlsx' , sheet_name = 'Sheet1' ) # \u4ee5\u8bfb\u53d6\u7684excel\u6587\u4ef6\u4e3a\u4f8b data . info () # \u5176\u4e2d\u4e3b\u8981\u5305\u62ec\uff1a\u6574\u4f53\u6570\u636e\u7684\u603b\u884c\u6570\u3001\u5404\u5217\u6570\u636e\u7c7b\u578b\u7edf\u8ba1\u3001\u5404\u5217\u7684\u5217\u540d\u3001\u5404\u5217\u603b\u5171\u6709\u591a\u5c11\u975e\u7a7a\u6570\u636e\u3001\u8868\u683c\u5360\u7528\u7684\u7cfb\u7edf\u7a7a\u95f4\u7b49 \u67e5\u770b\u524d\u51e0\u884c\u53ef\u4ee5\u4f7f\u7528 df.head(\u6570\u5b57) ,\u67e5\u770b\u540e\u51e0\u884c\u4f7f\u7528 df.tail(\u6570\u5b57) \u67e5\u627e\u7f3a\u5931\u503c \u5728 pandas \u91cc\uff0c\u53ef\u4ee5\u4f7f\u7528 isna() \u548c notna() \u65b9\u6cd5\u6765\u67e5\u627e DataFrame\u5bf9\u8c61 \u4ee5\u53ca Series\u5bf9\u8c61 \u4e2d\u7684\u7f3a\u5931\u503c\u3002 df.isna() \u8fd4\u56de\u7684\u662fDATa Frame\u5bf9\u8c61\uff0c Series.isna() \u8fd4\u56de\u7684\u662fSeries\u5bf9\u8c61\u3002\u8fd4\u56de\u5bf9\u8c61\u7684\u5185\u5bb9\u662f\u5e03\u5c14\u503c\uff0c\u7f3a\u5931\u6570\u636e\u4f1a\u7528 True \u6765\u8868\u793a\uff0c False \u4ee3\u8868\u6570\u636e\u4e0d\u7f3a\u5931\u3002 \u5220\u9664\u7f3a\u5931\u503c \u53ef\u4ee5\u4f7f\u7528 dropna() \u65b9\u6cd5\u76f4\u63a5\u5220\u9664 DataFrame \u5bf9\u8c61\u548c Series \u5bf9\u8c61\u4e2d\u542b\u6709\u7f3a\u5931\u503c\u7684\u6570\u636e\uff1b\u53ea\u8981\u6267\u884c df.dropna() \u8fd9\u4e00\u4ee3\u7801\u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5c06 DataFrame \u5bf9\u8c61\u4e2d\u5305\u542b\u7f3a\u5931\u503c\u7684\u6bcf\u4e00\u884c\u5168\u90e8\u5220\u6389\u3002 DataFrame . dropna ( axis = 0 , how = 'any' , thresh = None , subset = None , inplace = False ) # axis: 0/'index'\uff1a\u5220\u9664\u5305\u542b\u7f3a\u5931\u503c\u7684\u884c, 1/'columns'\uff1a\u5220\u9664\u5305\u542b\u7f3a\u5931\u503c\u7684\u5217 ;\u9ed8\u8ba4\u503c\u4e3a 0 # how: 'any': \u5982\u679c\u5b58\u5728\u4efb\u4f55NA\u503c\uff0c\u5219\u5220\u9664\u8be5\u884c\u6216\u5217; 'all': \u5982\u679c\u6240\u6709\u503c\u5747\u4e3aNA\uff0c\u5219\u5220\u9664\u8be5\u884c\u6216\u5217;\u9ed8\u8ba4\u503c\u662f'any' # thresh: int, optional Require that many non-NA values\u3002\u8981\u4fdd\u7559\u7684\u975eNA\u4e2a\u6570 # subset: \u5220\u9664\u6307\u5b9a\u5217\u7684\u7f3a\u5931\u6570\u636e['\u5217\u540d'] # inplace: \u662f\u5426\u5c31\u5730\u4fee\u6539 Series . dropna ( axis = 0 , inplace = False , how = None ) # axis: \u53ea\u6709\u4e00\u4e2a\u503c0\u6216\u8005'index' # inplace: \u662f\u5426\u5c31\u5730\u4fee\u6539 # how: str, optional,Not in use. Kept for compatibility. \u586b\u5145\u7f3a\u5931\u6570\u636e DataFrame . fillna ( value = None , method = None , axis = None , inplace = False , limit = None , downcast = None ) Series . fillna ( value = None , method = None , axis = None , inplace = False , limit = None , downcast = None ) # value: scalar, dict, Series, or DataFrame # method: {\u2018backfill\u2019, \u2018bfill\u2019, \u2018pad\u2019, \u2018ffill\u2019, None}, default None # axis: DataFrame-{0 or \u2018index\u2019, 1 or \u2018columns\u2019};Series-0 or \u2018index\u2019 # inplace: bool, default False # limit: int, default None\u586b\u5145\u6570\u91cf # downcast: dict, default is None \u5904\u7406\u91cd\u590d\u503c \u00b6 \u67e5\u627e\u91cd\u590d\u503c \u53ef\u4ee5\u4f7f\u7528 df.duplicated() \u67e5\u770bDataFrame\u5bf9\u8c61\u7684\u91cd\u590d\u6570\u636e\uff0c\u8fd4\u56de\u4e00\u4e2aSeries\u5bf9\u8c61\uff0c\u91cd\u590d\u4e3aTrue\uff0c\u4e0d\u91cd\u590d\u4e3aFalse\uff1b\u4f7f\u7528 Series.duplicated() \u67e5\u770bSeries\u7684\u91cd\u590d\u6570\u636e\uff0c\u8fd4\u56de\u4e00\u4e2aSeries\u5bf9\u8c61\uff0c\u91cd\u590d\u4e3aTrue\uff0c\u4e0d\u91cd\u590d\u4e3aFalse\u3002 \u4e5f\u53ef\u4ee5\u901a\u8fc7 df[df.duplicated()] \u67e5\u770b\u91cd\u590d\u884c\u7684\u6570\u636e\u3002 DataFrame . duplicated ( subset = None , keep = 'first' ) # subset: \u6307\u5b9a\u5217\uff0c\u9ed8\u8ba4\u6240\u6709\u5217 # keep: {\u2018first\u2019, \u2018last\u2019, False}, default \u2018first\u2019,\u4fdd\u7559\u7b2c\u4e00\u4e2a\u8fd8\u662f\u6700\u540e\u4e00\u4e2a Series . duplicated ( keep = 'first' ) \u5220\u9664\u91cd\u590d\u503c \u53ef\u4ee5\u4f7f\u7528 df.drop_duplicates() \u5220\u9664DataFrame \u5bf9\u8c61\u4e2d\u91cd\u590d\u51fa\u73b0\u7684\u6574\u884c\u6570\u636e\uff1b\u4f7f\u7528 Series.drop_duplicates() \u5220\u9664Series \u5bf9\u8c61\u4e2d\u91cd\u590d\u51fa\u73b0\u7684\u6574\u884c\u6570\u636e\u3002 DataFrame . drop_duplicates ( subset = None , keep = 'first' , inplace = False , ignore_index = False ) # ignore_index: bool, default False,If True, the resulting axis will be labeled 0, 1, \u2026, n - 1 Series . drop_duplicates ( keep = 'first' , inplace = False ) \u5904\u7406\u5f02\u5e38\u503c \u00b6 \u68c0\u67e5\u3001\u7b5b\u9664\u5f02\u5e38\u503c \u4f7f\u7528 df.describe() \u53ef\u4ee5\u67e5\u770bDataFrame\u5bf9\u8c61\u7684\u63cf\u8ff0\u6027\u7edf\u8ba1\u4fe1\u606f\uff0c\u7136\u540e\u6839\u636e\u6700\u5927\u3001\u6700\u5c0f\u503c\u3001\u5e73\u5747\u6570\u3001\u4e2d\u4f4d\u6570\u7b49\u4fe1\u606f\uff0c\u5229\u7528\u5e03\u5c14\u7d22\u5f15\u7684\u65b9\u5f0f\u7b5b\u9664\u5f02\u5e38\u503c\u3002\u6bd4\u5982\u6709\u4e2a\u8bb0\u5f55\u852c\u83dc\u4ef7\u683c\u548c\u9500\u91cf\u7684\u6570\u636edata\uff0c\u8981\u7b5b\u9664\u6570\u636e\u4e2d\u4ef7\u683c\u5c0f\u4e8e0\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\uff1a data = data [ data [ '\u5355\u4ef7' ] > 0 ] \u6848\u4f8b \u00b6 \u8fd8\u662f\u4ee52016\u5e74\u4e16\u754c\u5404\u56fd\u4e8c\u6c27\u5316\u78b3\u6392\u653e\u91cf\uff082016world-co2.xls\uff09\u7684\u6570\u636e\u4e3a\u4f8b\u3002 \u6570\u636e\u7684\u8bfb\u53d6 import pandas as pd # \u8bfb\u53d62016\u5e74\u7684\u6570\u636e data = pd . read_excel ( r 'C:\\Users\\Administrator\\Desktop\\2016world-co2.xls' , sheet_name = 'Data' , header = 3 ) \u7f3a\u5931\u503c\u5904\u7406 \u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f data.info() \u53ef\u4ee5\u770b\u51fa\u5171\u6709264\u884c\u6570\u636e\uff0c\u9664\u5217'2016'\u5916\uff0c\u5176\u4ed6\u6570\u636e\u4e0d\u5b58\u5728\u7f3a\u5931\u3002 \u5220\u9664\u7f3a\u5931\u503c\uff08\u73b0\u5b9e\u4e2d\uff0c\u8981\u6839\u636e\u4e1a\u52a1\u6216\u5176\u4ed6\u8981\u6c42\u6765\u51b3\u5b9a\u662f\u5220\u9664\uff0c\u8fd8\u662f\u586b\u5145\u6570\u636e\uff09 data.dropna(inplace=True) \u5e76\u67e5\u770b\u3002 \u91cd\u590d\u6570\u636e\u5904\u7406 data.duplicated() \u53d1\u73b0\u5e76\u65e0\u91cd\u590d\u6570\u636e\u3002 \u5f02\u5e38\u6570\u636e\u5904\u7406 data.describe() \u73b0\u5b9e\u4e2d\uff0c\u8981\u6839\u636e\u4e1a\u52a1\u6216\u5176\u4ed6\u8981\u6c42\u6765\u51b3\u5b9a\u662f\u5426\u662f\u5f02\u5e38\u503c\u3002","title":"\u6570\u636e\u6e05\u6d17"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/#_1","text":"\u6570\u636e\u5904\u7406\u662f\u6307\u5c06\u6536\u96c6\u5230\u7684\u6570\u636e\u8fdb\u884c\u52a0\u5de5\u3001\u6574\u7406\uff0c\u5f62\u6210\u9002\u5408\u6570\u636e\u5206\u6790\u7684\u6837\u5f0f\uff1b\u53ef\u4ee5\u5c06\u6570\u636e\u5904\u7406\u7b80\u5355\u7684\u5206\u4e3a\u6570\u636e\u7684\u6e05\u6d17\u3001\u6570\u636e\u7684\u6574\u7406\uff1b\u6570\u636e\u6e05\u6d17\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u4e09\u4e2a\u8fc7\u7a0b\uff1a \u5904\u7406\u7f3a\u5931\u503c \u5904\u7406\u91cd\u590d\u503c \u5904\u7406\u5f02\u5e38\u503c \u4e3b\u8981\u7528\u5230\u7684\u662f pandas \u5e93\u3002","title":"\u6570\u636e\u6e05\u6d17"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/#_2","text":"\u67e5\u770b\u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f import pandas as pd data = pd . read_excel ( 'path_to_file.xls\u6216.xlsx' , sheet_name = 'Sheet1' ) # \u4ee5\u8bfb\u53d6\u7684excel\u6587\u4ef6\u4e3a\u4f8b data . info () # \u5176\u4e2d\u4e3b\u8981\u5305\u62ec\uff1a\u6574\u4f53\u6570\u636e\u7684\u603b\u884c\u6570\u3001\u5404\u5217\u6570\u636e\u7c7b\u578b\u7edf\u8ba1\u3001\u5404\u5217\u7684\u5217\u540d\u3001\u5404\u5217\u603b\u5171\u6709\u591a\u5c11\u975e\u7a7a\u6570\u636e\u3001\u8868\u683c\u5360\u7528\u7684\u7cfb\u7edf\u7a7a\u95f4\u7b49 \u67e5\u770b\u524d\u51e0\u884c\u53ef\u4ee5\u4f7f\u7528 df.head(\u6570\u5b57) ,\u67e5\u770b\u540e\u51e0\u884c\u4f7f\u7528 df.tail(\u6570\u5b57) \u67e5\u627e\u7f3a\u5931\u503c \u5728 pandas \u91cc\uff0c\u53ef\u4ee5\u4f7f\u7528 isna() \u548c notna() \u65b9\u6cd5\u6765\u67e5\u627e DataFrame\u5bf9\u8c61 \u4ee5\u53ca Series\u5bf9\u8c61 \u4e2d\u7684\u7f3a\u5931\u503c\u3002 df.isna() \u8fd4\u56de\u7684\u662fDATa Frame\u5bf9\u8c61\uff0c Series.isna() \u8fd4\u56de\u7684\u662fSeries\u5bf9\u8c61\u3002\u8fd4\u56de\u5bf9\u8c61\u7684\u5185\u5bb9\u662f\u5e03\u5c14\u503c\uff0c\u7f3a\u5931\u6570\u636e\u4f1a\u7528 True \u6765\u8868\u793a\uff0c False \u4ee3\u8868\u6570\u636e\u4e0d\u7f3a\u5931\u3002 \u5220\u9664\u7f3a\u5931\u503c \u53ef\u4ee5\u4f7f\u7528 dropna() \u65b9\u6cd5\u76f4\u63a5\u5220\u9664 DataFrame \u5bf9\u8c61\u548c Series \u5bf9\u8c61\u4e2d\u542b\u6709\u7f3a\u5931\u503c\u7684\u6570\u636e\uff1b\u53ea\u8981\u6267\u884c df.dropna() \u8fd9\u4e00\u4ee3\u7801\u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5c06 DataFrame \u5bf9\u8c61\u4e2d\u5305\u542b\u7f3a\u5931\u503c\u7684\u6bcf\u4e00\u884c\u5168\u90e8\u5220\u6389\u3002 DataFrame . dropna ( axis = 0 , how = 'any' , thresh = None , subset = None , inplace = False ) # axis: 0/'index'\uff1a\u5220\u9664\u5305\u542b\u7f3a\u5931\u503c\u7684\u884c, 1/'columns'\uff1a\u5220\u9664\u5305\u542b\u7f3a\u5931\u503c\u7684\u5217 ;\u9ed8\u8ba4\u503c\u4e3a 0 # how: 'any': \u5982\u679c\u5b58\u5728\u4efb\u4f55NA\u503c\uff0c\u5219\u5220\u9664\u8be5\u884c\u6216\u5217; 'all': \u5982\u679c\u6240\u6709\u503c\u5747\u4e3aNA\uff0c\u5219\u5220\u9664\u8be5\u884c\u6216\u5217;\u9ed8\u8ba4\u503c\u662f'any' # thresh: int, optional Require that many non-NA values\u3002\u8981\u4fdd\u7559\u7684\u975eNA\u4e2a\u6570 # subset: \u5220\u9664\u6307\u5b9a\u5217\u7684\u7f3a\u5931\u6570\u636e['\u5217\u540d'] # inplace: \u662f\u5426\u5c31\u5730\u4fee\u6539 Series . dropna ( axis = 0 , inplace = False , how = None ) # axis: \u53ea\u6709\u4e00\u4e2a\u503c0\u6216\u8005'index' # inplace: \u662f\u5426\u5c31\u5730\u4fee\u6539 # how: str, optional,Not in use. Kept for compatibility. \u586b\u5145\u7f3a\u5931\u6570\u636e DataFrame . fillna ( value = None , method = None , axis = None , inplace = False , limit = None , downcast = None ) Series . fillna ( value = None , method = None , axis = None , inplace = False , limit = None , downcast = None ) # value: scalar, dict, Series, or DataFrame # method: {\u2018backfill\u2019, \u2018bfill\u2019, \u2018pad\u2019, \u2018ffill\u2019, None}, default None # axis: DataFrame-{0 or \u2018index\u2019, 1 or \u2018columns\u2019};Series-0 or \u2018index\u2019 # inplace: bool, default False # limit: int, default None\u586b\u5145\u6570\u91cf # downcast: dict, default is None","title":"\u5904\u7406\u7f3a\u5931\u503c"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/#_3","text":"\u67e5\u627e\u91cd\u590d\u503c \u53ef\u4ee5\u4f7f\u7528 df.duplicated() \u67e5\u770bDataFrame\u5bf9\u8c61\u7684\u91cd\u590d\u6570\u636e\uff0c\u8fd4\u56de\u4e00\u4e2aSeries\u5bf9\u8c61\uff0c\u91cd\u590d\u4e3aTrue\uff0c\u4e0d\u91cd\u590d\u4e3aFalse\uff1b\u4f7f\u7528 Series.duplicated() \u67e5\u770bSeries\u7684\u91cd\u590d\u6570\u636e\uff0c\u8fd4\u56de\u4e00\u4e2aSeries\u5bf9\u8c61\uff0c\u91cd\u590d\u4e3aTrue\uff0c\u4e0d\u91cd\u590d\u4e3aFalse\u3002 \u4e5f\u53ef\u4ee5\u901a\u8fc7 df[df.duplicated()] \u67e5\u770b\u91cd\u590d\u884c\u7684\u6570\u636e\u3002 DataFrame . duplicated ( subset = None , keep = 'first' ) # subset: \u6307\u5b9a\u5217\uff0c\u9ed8\u8ba4\u6240\u6709\u5217 # keep: {\u2018first\u2019, \u2018last\u2019, False}, default \u2018first\u2019,\u4fdd\u7559\u7b2c\u4e00\u4e2a\u8fd8\u662f\u6700\u540e\u4e00\u4e2a Series . duplicated ( keep = 'first' ) \u5220\u9664\u91cd\u590d\u503c \u53ef\u4ee5\u4f7f\u7528 df.drop_duplicates() \u5220\u9664DataFrame \u5bf9\u8c61\u4e2d\u91cd\u590d\u51fa\u73b0\u7684\u6574\u884c\u6570\u636e\uff1b\u4f7f\u7528 Series.drop_duplicates() \u5220\u9664Series \u5bf9\u8c61\u4e2d\u91cd\u590d\u51fa\u73b0\u7684\u6574\u884c\u6570\u636e\u3002 DataFrame . drop_duplicates ( subset = None , keep = 'first' , inplace = False , ignore_index = False ) # ignore_index: bool, default False,If True, the resulting axis will be labeled 0, 1, \u2026, n - 1 Series . drop_duplicates ( keep = 'first' , inplace = False )","title":"\u5904\u7406\u91cd\u590d\u503c"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/#_4","text":"\u68c0\u67e5\u3001\u7b5b\u9664\u5f02\u5e38\u503c \u4f7f\u7528 df.describe() \u53ef\u4ee5\u67e5\u770bDataFrame\u5bf9\u8c61\u7684\u63cf\u8ff0\u6027\u7edf\u8ba1\u4fe1\u606f\uff0c\u7136\u540e\u6839\u636e\u6700\u5927\u3001\u6700\u5c0f\u503c\u3001\u5e73\u5747\u6570\u3001\u4e2d\u4f4d\u6570\u7b49\u4fe1\u606f\uff0c\u5229\u7528\u5e03\u5c14\u7d22\u5f15\u7684\u65b9\u5f0f\u7b5b\u9664\u5f02\u5e38\u503c\u3002\u6bd4\u5982\u6709\u4e2a\u8bb0\u5f55\u852c\u83dc\u4ef7\u683c\u548c\u9500\u91cf\u7684\u6570\u636edata\uff0c\u8981\u7b5b\u9664\u6570\u636e\u4e2d\u4ef7\u683c\u5c0f\u4e8e0\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\uff1a data = data [ data [ '\u5355\u4ef7' ] > 0 ]","title":"\u5904\u7406\u5f02\u5e38\u503c"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/#_5","text":"\u8fd8\u662f\u4ee52016\u5e74\u4e16\u754c\u5404\u56fd\u4e8c\u6c27\u5316\u78b3\u6392\u653e\u91cf\uff082016world-co2.xls\uff09\u7684\u6570\u636e\u4e3a\u4f8b\u3002 \u6570\u636e\u7684\u8bfb\u53d6 import pandas as pd # \u8bfb\u53d62016\u5e74\u7684\u6570\u636e data = pd . read_excel ( r 'C:\\Users\\Administrator\\Desktop\\2016world-co2.xls' , sheet_name = 'Data' , header = 3 ) \u7f3a\u5931\u503c\u5904\u7406 \u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f data.info() \u53ef\u4ee5\u770b\u51fa\u5171\u6709264\u884c\u6570\u636e\uff0c\u9664\u5217'2016'\u5916\uff0c\u5176\u4ed6\u6570\u636e\u4e0d\u5b58\u5728\u7f3a\u5931\u3002 \u5220\u9664\u7f3a\u5931\u503c\uff08\u73b0\u5b9e\u4e2d\uff0c\u8981\u6839\u636e\u4e1a\u52a1\u6216\u5176\u4ed6\u8981\u6c42\u6765\u51b3\u5b9a\u662f\u5220\u9664\uff0c\u8fd8\u662f\u586b\u5145\u6570\u636e\uff09 data.dropna(inplace=True) \u5e76\u67e5\u770b\u3002 \u91cd\u590d\u6570\u636e\u5904\u7406 data.duplicated() \u53d1\u73b0\u5e76\u65e0\u91cd\u590d\u6570\u636e\u3002 \u5f02\u5e38\u6570\u636e\u5904\u7406 data.describe() \u73b0\u5b9e\u4e2d\uff0c\u8981\u6839\u636e\u4e1a\u52a1\u6216\u5176\u4ed6\u8981\u6c42\u6765\u51b3\u5b9a\u662f\u5426\u662f\u5f02\u5e38\u503c\u3002","title":"\u6848\u4f8b"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/","text":"\u6570\u636e\u8bfb\u53d6\u4e0e\u4fdd\u5b58 \u00b6 \u4e3b\u8981\u7528\u5230\u7684\u662f pandas\u5e93 \uff0c\u53ef\u4ee5\u901a\u8fc7 pip install pandas \u8fdb\u884c\u5b89\u88c5\uff1b\u4f7f\u7528\u65f6\u901a\u8fc7 import pandas as pd \u5bfc\u5165\uff08\u4ee5pd\u4f5c\u4e3a\u522b\u540d\uff09\uff1b pandas \u80fd\u8bfb\u53d6\u7684\u6587\u4ef6\u7c7b\u578b\u5f88\u591a\uff0c\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u5bf9 csv\u3001excel \u6587\u4ef6\u7684\u8bfb\u53d6\u548c\u4fdd\u5b58\uff1b\u66f4\u591a\u529f\u80fd\u53ef\u67e5\u9605 \u5b98\u65b9\u6587\u6863 \u3002 \u8bfb\u53d6\u4e0e\u4fdd\u5b58-excel\u6587\u4ef6 \u00b6 \u9700\u8981\u901a\u8fc7pip\u547d\u4ee4\u5b89\u88c5 openpyxl \u4e0e xlrd \uff1a pip install openpyxl pip install xlrd \u8bfb\u53d6excel\u6587\u4ef6 read_excel() \u00b6 pandas . read_excel ( io , sheet_name = 0 , header = 0 , names = None , index_col = None , usecols = None , squeeze = False , dtype = None , engine = None , converters = None , true_values = None , false_values = None , skiprows = None , nrows = None , na_values = None , keep_default_na = True , na_filter = True , verbose = False , parse_dates = False , date_parser = None , thousands = None , comment = None , skipfooter = 0 , convert_float = True , mangle_dupe_cols = True , storage_options = None ) \u5e38\u7528\u53c2\u6570\u4ecb\u7ecd\uff1a \u53c2\u6570 \u63cf\u8ff0 io str, bytes, ExcelFile, xlrd.Book, path object, or file-like object \u4e00\u822c\u4e3a\u6587\u4ef6\u8def\u5f84\u6216ExcelFile\u7c7b sheet_name str\uff08\u8868\u540d\uff09, int\uff08\u4ece0\u5f00\u59cb\u7b2c\u51e0\u4e2a\u8868\uff09, list\uff08\u591a\u4e2a\u5de5\u4f5c\u8868\uff09, or None\uff08\u6240\u6709\u5de5\u4f5c\u8868\uff09, default 0 header int, list of int, default 0 \u662f\u5426\u5c06\u7b2c\u4e00\u884c\u5f53\u4f5c\u5217\u540d index_col int, list of int, default None \u7d22\u5f15 na_values scalar, str, list-like, or dict, default None parse_dates bool, list-like, or dict, default False \u89e3\u6790\u4e3a\u65f6\u95f4\uff1aparse_dates=['\u5217\u540d'] \u57fa\u7840\u7528\u6cd5\uff1a import pandas as pd data = pd . read_excel ( 'path_to_file.xls\u6216.xlsx' , sheet_name = 'Sheet1' ) # \u6587\u4ef6\u8def\u5f84\u548csheet_name\u6839\u636e\u81ea\u5df1\u6587\u4ef6\u5185\u5bb9\u4fee\u6539\uff08\u4e0b\u540c\uff09 Excelfile\u7c7b\uff1a \u8bfb\u53d6\u4e00\u4e2aexcel\u6587\u4ef6\u7684\u591a\u5f20\u5de5\u4f5c\u8868\u65f6\uff0c\u5229\u7528\u8be5\u7c7b\u80fd\u591f\u4e00\u6b21\u8bfb\u53d6\u5230\u5185\u5b58\u3002 xlsx = pd . ExcelFile ( \"path_to_file.xls\u6216.xlsx\" ) df = pd . read_excel ( xlsx , \"Sheet1\" ) \u6216\u8005 with pd . ExcelFile ( \"path_to_file.xls\" ) as xls : df1 = pd . read_excel ( xls , \"Sheet1\" ) df2 = pd . read_excel ( xls , \"Sheet2\" ) \u5bf9\u4e0d\u540c\u5de5\u4f5c\u8868\u4f20\u4e0d\u540c\u53c2\u6570 data = {} # For when Sheet1's format differs from Sheet2 with pd . ExcelFile ( \"path_to_file.xls\" ) as xls : data [ \"Sheet1\" ] = pd . read_excel ( xls , \"Sheet1\" , index_col = None , na_values = [ \"NA\" ]) data [ \"Sheet2\" ] = pd . read_excel ( xls , \"Sheet2\" , index_col = 1 ) \u5982\u679c\u4e0d\u540c\u5de5\u4f5c\u8868\u4f20\u7684\u53c2\u6570\u76f8\u540c\uff0cExcelFile\u65b9\u5f0f\u76f8\u5f53\u4e8eread_excel\u51fd\u6570 data = {} with pd . ExcelFile ( \"path_to_file.xls\" ) as xls : data [ \"Sheet1\" ] = pd . read_excel ( xls , \"Sheet1\" , index_col = None , na_values = [ \"NA\" ]) data [ \"Sheet2\" ] = pd . read_excel ( xls , \"Sheet2\" , index_col = None , na_values = [ \"NA\" ]) # equivalent using the read_excel function data = pd . read_excel ( \"path_to_file.xls\" , [ \"Sheet1\" , \"Sheet2\" ], index_col = None , na_values = [ \"NA\" ]) \u89e3\u6790\u65e5\u671f\uff1a pd . read_excel ( \"path_to_file.xls\" , \"Sheet1\" , parse_dates = [ \"date_strings\" ]) \u6307\u5b9a\u7d22\u5f15\uff1a pd . read_excel ( \"path_to_file.xls\" , \"Sheet1\" , index_col = '\u5217\u540d' ) # index_col\u9ed8\u8ba4\u503c\u662fNone \u4fdd\u5b58\u5230excel\u6587\u4ef6 to_excel() \u00b6 \u8981\u5c06 DataFrame \u5bf9\u8c61\u5199\u5165Excel\u6587\u4ef6\u7684\u5de5\u4f5c\u8868\uff0c\u53ef\u4ee5\u4f7f\u7528 to_excel \u5b9e\u4f8b\u65b9\u6cd5\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u662fexcel\u6587\u4ef6\u7684\u8def\u5f84\u540d\u79f0\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u5199\u5165excel\u7684\u5de5\u8d44\u8868\u540d\u79f0\u3002\u4f8b\u5982\uff1a df . to_excel ( 'path_to_file.xlsx' , sheet_name = 'Sheet1' ) \u66f4\u591a\u53c2\u6570\u4ecb\u7ecd\uff0c\u8bf7\u67e5\u9605 pandas.read_excel \u3002 \u8bfb\u53d6\u4e0e\u4fdd\u5b58-csv\u6587\u4ef6 \u00b6 \u8bfb\u53d6csv\u6587\u4ef6 read_csv() \u00b6 pandas . read_csv ( filepath_or_buffer , sep =< object object > , delimiter = None , header = 'infer' , names = None , index_col = None , usecols = None , squeeze = False , prefix = None , mangle_dupe_cols = True , dtype = None , engine = None , converters = None , true_values = None , false_values = None , skipinitialspace = False , skiprows = None , skipfooter = 0 , nrows = None , na_values = None , keep_default_na = True , na_filter = True , verbose = False , skip_blank_lines = True , parse_dates = False , infer_datetime_format = False , keep_date_col = False , date_parser = None , dayfirst = False , cache_dates = True , iterator = False , chunksize = None , compression = 'infer' , thousands = None , decimal = '.' , lineterminator = None , quotechar = '\"' , quoting = 0 , doublequote = True , escapechar = None , comment = None , encoding = None , dialect = None , error_bad_lines = True , warn_bad_lines = True , delim_whitespace = False , low_memory = True , memory_map = False , float_precision = None , storage_options = None ) \u53ef\u89c1 read_csv \u7684\u53c2\u6570\u8f83\u591a\uff0c\u4f7f\u7528\u65f6\u6839\u636e\u6587\u4ef6\u5185\u5bb9\u8fdb\u884c\u9009\u62e9\uff1b\u5e38\u7528\u7684\u6709\u4ee5\u4e0b\u51e0\u4e2a\u53c2\u6570\uff1a \u53c2\u6570 \u63cf\u8ff0 filepath_or_buffer str, path object or file-like object sep str, default \u2018,\u2019\u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u662f\u9017\u53f7 header int, list of int, default \u2018infer\u2019 \u8868\u5934 index_col int, str, sequence of int / str, or False, default None \u7d22\u5f15 encoding str, optional \u89e3\u7801 parse_dates bool or list of int or names or list of lists or dict, default False \u57fa\u7840\u7528\u6cd5\uff1a pd . read_csv ( '\u6587\u4ef6\u8def\u5f84' , sep = '\u5206\u9694\u7b26' , encoding = '\u89e3\u7801\u65b9\u5f0f' ) \u4fdd\u5b58\u5230csv\u6587\u4ef6 to_csv() \u00b6 to_csv() \u7684\u53ef\u9009\u53c2\u6570\u4e5f\u8f83\u591a\uff0c\u5e38\u7528\u7684\u53c2\u6570\u6709\uff1a \u53c2\u6570 \u63cf\u8ff0 path_or_buf \u4fdd\u5b58\u8def\u5f84 sep \u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u662f\u2018,\u2019 na_rep \u7f3a\u5931\u503c\uff0c\u9ed8\u8ba4\u662f\u7a7a\u683c header \u662f\u5426\u5e26\u8868\u5934\uff0c\u9ed8\u8ba4\u662fTrue encoding \u89e3\u7801\u65b9\u5f0f \u66f4\u591a\u53c2\u6570\u4ecb\u7ecd\uff0c\u8bf7\u67e5\u9605 pandas.read_csv \u6848\u4f8b \u00b6 \u8bfb\u53d6excel\u6570\u636e \u00b6 \u6570\u636e\u4e3a2016\u5e74\u4e16\u754c\u5404\u56fd\u4e8c\u6c27\u5316\u78b3\u6392\u653e\u91cf\uff082016world-co2.xls\uff09\uff0c\u6570\u636e\u6e90\u4e8e \u4e16\u754c\u94f6\u884c \u6587\u4ef6\u5b58\u653e\u5728 C:\\Users\\Administrator\\Desktop\\2016world-co2.xls ,\u5185\u5bb9\u5982\u4e0b\uff1a \u53ef\u4ee5\u53d1\u73b0Excel\u6587\u4ef6\u67093\u4e2a\u5de5\u4f5c\u8868\uff0c\u6211\u4eec\u9700\u8981\u7684\u6570\u636e\u5728Data\u5de5\u4f5c\u8868\u4e2d\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e0d\u4f20 sheet_name \u53c2\u6570\uff0c\u56e0\u4e3a\u9700\u8981\u7684\u6570\u636e\u5c31\u5728\u7b2c0\u4e2a\u5de5\u4f5c\u8868\u4e2d\uff09\uff0c\u53e6\u5916\u8868\u5934\u4e3a\u7b2c\u4e09\u884c\uff08\u4ece0\u5f00\u59cb\u7b97\uff09\uff1b\u4e3a\u6b64\u53ef\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8bfb\u53d6\u6570\u636e\uff1a import pandas as pd # \u8bfb\u53d62016\u5e74\u7684\u6570\u636e data = pd . read_excel ( r 'C:\\Users\\Administrator\\Desktop\\2016world-co2.xls' , sheet_name = 'Data' , header = 3 ) \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a \u4fdd\u5b58\u6570\u636e \u00b6 data . to_excel ( 'data.xlsx' , sheet_name = 'co2' ) # \u4fdd\u5b58\u5230\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e0b\uff0c\u6587\u4ef6\u540d\u4e3adata.xlsx\uff0c\u5de5\u4f5c\u8868\u540d\u4e3aco2","title":"\u6570\u636e\u8bfb\u53d6\u4e0e\u4fdd\u5b58"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#_1","text":"\u4e3b\u8981\u7528\u5230\u7684\u662f pandas\u5e93 \uff0c\u53ef\u4ee5\u901a\u8fc7 pip install pandas \u8fdb\u884c\u5b89\u88c5\uff1b\u4f7f\u7528\u65f6\u901a\u8fc7 import pandas as pd \u5bfc\u5165\uff08\u4ee5pd\u4f5c\u4e3a\u522b\u540d\uff09\uff1b pandas \u80fd\u8bfb\u53d6\u7684\u6587\u4ef6\u7c7b\u578b\u5f88\u591a\uff0c\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u5bf9 csv\u3001excel \u6587\u4ef6\u7684\u8bfb\u53d6\u548c\u4fdd\u5b58\uff1b\u66f4\u591a\u529f\u80fd\u53ef\u67e5\u9605 \u5b98\u65b9\u6587\u6863 \u3002","title":"\u6570\u636e\u8bfb\u53d6\u4e0e\u4fdd\u5b58"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#-excel","text":"\u9700\u8981\u901a\u8fc7pip\u547d\u4ee4\u5b89\u88c5 openpyxl \u4e0e xlrd \uff1a pip install openpyxl pip install xlrd","title":"\u8bfb\u53d6\u4e0e\u4fdd\u5b58-excel\u6587\u4ef6"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#excel-read_excel","text":"pandas . read_excel ( io , sheet_name = 0 , header = 0 , names = None , index_col = None , usecols = None , squeeze = False , dtype = None , engine = None , converters = None , true_values = None , false_values = None , skiprows = None , nrows = None , na_values = None , keep_default_na = True , na_filter = True , verbose = False , parse_dates = False , date_parser = None , thousands = None , comment = None , skipfooter = 0 , convert_float = True , mangle_dupe_cols = True , storage_options = None ) \u5e38\u7528\u53c2\u6570\u4ecb\u7ecd\uff1a \u53c2\u6570 \u63cf\u8ff0 io str, bytes, ExcelFile, xlrd.Book, path object, or file-like object \u4e00\u822c\u4e3a\u6587\u4ef6\u8def\u5f84\u6216ExcelFile\u7c7b sheet_name str\uff08\u8868\u540d\uff09, int\uff08\u4ece0\u5f00\u59cb\u7b2c\u51e0\u4e2a\u8868\uff09, list\uff08\u591a\u4e2a\u5de5\u4f5c\u8868\uff09, or None\uff08\u6240\u6709\u5de5\u4f5c\u8868\uff09, default 0 header int, list of int, default 0 \u662f\u5426\u5c06\u7b2c\u4e00\u884c\u5f53\u4f5c\u5217\u540d index_col int, list of int, default None \u7d22\u5f15 na_values scalar, str, list-like, or dict, default None parse_dates bool, list-like, or dict, default False \u89e3\u6790\u4e3a\u65f6\u95f4\uff1aparse_dates=['\u5217\u540d'] \u57fa\u7840\u7528\u6cd5\uff1a import pandas as pd data = pd . read_excel ( 'path_to_file.xls\u6216.xlsx' , sheet_name = 'Sheet1' ) # \u6587\u4ef6\u8def\u5f84\u548csheet_name\u6839\u636e\u81ea\u5df1\u6587\u4ef6\u5185\u5bb9\u4fee\u6539\uff08\u4e0b\u540c\uff09 Excelfile\u7c7b\uff1a \u8bfb\u53d6\u4e00\u4e2aexcel\u6587\u4ef6\u7684\u591a\u5f20\u5de5\u4f5c\u8868\u65f6\uff0c\u5229\u7528\u8be5\u7c7b\u80fd\u591f\u4e00\u6b21\u8bfb\u53d6\u5230\u5185\u5b58\u3002 xlsx = pd . ExcelFile ( \"path_to_file.xls\u6216.xlsx\" ) df = pd . read_excel ( xlsx , \"Sheet1\" ) \u6216\u8005 with pd . ExcelFile ( \"path_to_file.xls\" ) as xls : df1 = pd . read_excel ( xls , \"Sheet1\" ) df2 = pd . read_excel ( xls , \"Sheet2\" ) \u5bf9\u4e0d\u540c\u5de5\u4f5c\u8868\u4f20\u4e0d\u540c\u53c2\u6570 data = {} # For when Sheet1's format differs from Sheet2 with pd . ExcelFile ( \"path_to_file.xls\" ) as xls : data [ \"Sheet1\" ] = pd . read_excel ( xls , \"Sheet1\" , index_col = None , na_values = [ \"NA\" ]) data [ \"Sheet2\" ] = pd . read_excel ( xls , \"Sheet2\" , index_col = 1 ) \u5982\u679c\u4e0d\u540c\u5de5\u4f5c\u8868\u4f20\u7684\u53c2\u6570\u76f8\u540c\uff0cExcelFile\u65b9\u5f0f\u76f8\u5f53\u4e8eread_excel\u51fd\u6570 data = {} with pd . ExcelFile ( \"path_to_file.xls\" ) as xls : data [ \"Sheet1\" ] = pd . read_excel ( xls , \"Sheet1\" , index_col = None , na_values = [ \"NA\" ]) data [ \"Sheet2\" ] = pd . read_excel ( xls , \"Sheet2\" , index_col = None , na_values = [ \"NA\" ]) # equivalent using the read_excel function data = pd . read_excel ( \"path_to_file.xls\" , [ \"Sheet1\" , \"Sheet2\" ], index_col = None , na_values = [ \"NA\" ]) \u89e3\u6790\u65e5\u671f\uff1a pd . read_excel ( \"path_to_file.xls\" , \"Sheet1\" , parse_dates = [ \"date_strings\" ]) \u6307\u5b9a\u7d22\u5f15\uff1a pd . read_excel ( \"path_to_file.xls\" , \"Sheet1\" , index_col = '\u5217\u540d' ) # index_col\u9ed8\u8ba4\u503c\u662fNone","title":"\u8bfb\u53d6excel\u6587\u4ef6 read_excel()"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#excel-to_excel","text":"\u8981\u5c06 DataFrame \u5bf9\u8c61\u5199\u5165Excel\u6587\u4ef6\u7684\u5de5\u4f5c\u8868\uff0c\u53ef\u4ee5\u4f7f\u7528 to_excel \u5b9e\u4f8b\u65b9\u6cd5\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u662fexcel\u6587\u4ef6\u7684\u8def\u5f84\u540d\u79f0\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u5199\u5165excel\u7684\u5de5\u8d44\u8868\u540d\u79f0\u3002\u4f8b\u5982\uff1a df . to_excel ( 'path_to_file.xlsx' , sheet_name = 'Sheet1' ) \u66f4\u591a\u53c2\u6570\u4ecb\u7ecd\uff0c\u8bf7\u67e5\u9605 pandas.read_excel \u3002","title":"\u4fdd\u5b58\u5230excel\u6587\u4ef6 to_excel()"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#-csv","text":"","title":"\u8bfb\u53d6\u4e0e\u4fdd\u5b58-csv\u6587\u4ef6"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#csv-read_csv","text":"pandas . read_csv ( filepath_or_buffer , sep =< object object > , delimiter = None , header = 'infer' , names = None , index_col = None , usecols = None , squeeze = False , prefix = None , mangle_dupe_cols = True , dtype = None , engine = None , converters = None , true_values = None , false_values = None , skipinitialspace = False , skiprows = None , skipfooter = 0 , nrows = None , na_values = None , keep_default_na = True , na_filter = True , verbose = False , skip_blank_lines = True , parse_dates = False , infer_datetime_format = False , keep_date_col = False , date_parser = None , dayfirst = False , cache_dates = True , iterator = False , chunksize = None , compression = 'infer' , thousands = None , decimal = '.' , lineterminator = None , quotechar = '\"' , quoting = 0 , doublequote = True , escapechar = None , comment = None , encoding = None , dialect = None , error_bad_lines = True , warn_bad_lines = True , delim_whitespace = False , low_memory = True , memory_map = False , float_precision = None , storage_options = None ) \u53ef\u89c1 read_csv \u7684\u53c2\u6570\u8f83\u591a\uff0c\u4f7f\u7528\u65f6\u6839\u636e\u6587\u4ef6\u5185\u5bb9\u8fdb\u884c\u9009\u62e9\uff1b\u5e38\u7528\u7684\u6709\u4ee5\u4e0b\u51e0\u4e2a\u53c2\u6570\uff1a \u53c2\u6570 \u63cf\u8ff0 filepath_or_buffer str, path object or file-like object sep str, default \u2018,\u2019\u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u662f\u9017\u53f7 header int, list of int, default \u2018infer\u2019 \u8868\u5934 index_col int, str, sequence of int / str, or False, default None \u7d22\u5f15 encoding str, optional \u89e3\u7801 parse_dates bool or list of int or names or list of lists or dict, default False \u57fa\u7840\u7528\u6cd5\uff1a pd . read_csv ( '\u6587\u4ef6\u8def\u5f84' , sep = '\u5206\u9694\u7b26' , encoding = '\u89e3\u7801\u65b9\u5f0f' )","title":"\u8bfb\u53d6csv\u6587\u4ef6 read_csv()"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#csv-to_csv","text":"to_csv() \u7684\u53ef\u9009\u53c2\u6570\u4e5f\u8f83\u591a\uff0c\u5e38\u7528\u7684\u53c2\u6570\u6709\uff1a \u53c2\u6570 \u63cf\u8ff0 path_or_buf \u4fdd\u5b58\u8def\u5f84 sep \u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u662f\u2018,\u2019 na_rep \u7f3a\u5931\u503c\uff0c\u9ed8\u8ba4\u662f\u7a7a\u683c header \u662f\u5426\u5e26\u8868\u5934\uff0c\u9ed8\u8ba4\u662fTrue encoding \u89e3\u7801\u65b9\u5f0f \u66f4\u591a\u53c2\u6570\u4ecb\u7ecd\uff0c\u8bf7\u67e5\u9605 pandas.read_csv","title":"\u4fdd\u5b58\u5230csv\u6587\u4ef6 to_csv()"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#_2","text":"","title":"\u6848\u4f8b"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#excel","text":"\u6570\u636e\u4e3a2016\u5e74\u4e16\u754c\u5404\u56fd\u4e8c\u6c27\u5316\u78b3\u6392\u653e\u91cf\uff082016world-co2.xls\uff09\uff0c\u6570\u636e\u6e90\u4e8e \u4e16\u754c\u94f6\u884c \u6587\u4ef6\u5b58\u653e\u5728 C:\\Users\\Administrator\\Desktop\\2016world-co2.xls ,\u5185\u5bb9\u5982\u4e0b\uff1a \u53ef\u4ee5\u53d1\u73b0Excel\u6587\u4ef6\u67093\u4e2a\u5de5\u4f5c\u8868\uff0c\u6211\u4eec\u9700\u8981\u7684\u6570\u636e\u5728Data\u5de5\u4f5c\u8868\u4e2d\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e0d\u4f20 sheet_name \u53c2\u6570\uff0c\u56e0\u4e3a\u9700\u8981\u7684\u6570\u636e\u5c31\u5728\u7b2c0\u4e2a\u5de5\u4f5c\u8868\u4e2d\uff09\uff0c\u53e6\u5916\u8868\u5934\u4e3a\u7b2c\u4e09\u884c\uff08\u4ece0\u5f00\u59cb\u7b97\uff09\uff1b\u4e3a\u6b64\u53ef\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8bfb\u53d6\u6570\u636e\uff1a import pandas as pd # \u8bfb\u53d62016\u5e74\u7684\u6570\u636e data = pd . read_excel ( r 'C:\\Users\\Administrator\\Desktop\\2016world-co2.xls' , sheet_name = 'Data' , header = 3 ) \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a","title":"\u8bfb\u53d6excel\u6570\u636e"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#_3","text":"data . to_excel ( 'data.xlsx' , sheet_name = 'co2' ) # \u4fdd\u5b58\u5230\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e0b\uff0c\u6587\u4ef6\u540d\u4e3adata.xlsx\uff0c\u5de5\u4f5c\u8868\u540d\u4e3aco2","title":"\u4fdd\u5b58\u6570\u636e"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/","text":"\u67f1\u72b6\u56fe \u00b6 \u7ed8\u56fe\u4e3b\u8981\u7528\u5230\u7684\u662f matplotlib \u5e93\uff08\u7248\u672c\u4e3a 3.4.1 \uff09\u3001 seaborn \u5e93\uff08\u7248\u672c\u4e3a 0.11.1 \uff09\uff1b matplotlib \u5e93\uff08\u7248\u672c\u4e3a 3.4.1 \uff09\u589e\u52a0\u4e9b\u65b0\u529f\u80fd\uff0c\u4f8b\u5982\uff1a bar_label() \u53ef\u4ee5\u5b9e\u73b0\u5bf9\u67f1\u72b6\u56fe\u3001\u6761\u5f62\u56fe\u81ea\u52a8\u6dfb\u52a0\u6807\u7b7e\u7b49\uff1b\u8981\u5347\u7ea7\u5230\u6b64\u7248\u672c\uff0c\u8bf7\u4f7f\u7528 pip install - -upgrade matplotlib \u8fdb\u884c\u5347\u7ea7\uff0c\u66f4\u591a\u529f\u80fd\u8bf7\u67e5\u9605 \u5b98\u65b9\u6587\u6863 \uff1b seaborn \u529f\u80fd\u53ca\u64cd\u4f5c\uff0c\u8be6\u89c1 \u5b98\u65b9\u6587\u6863 \u3002 import pandas as pd import matplotlib.pyplot as plt import matplotlib as mpl import seaborn as sns import numpy as np import warnings warnings . filterwarnings ( 'ignore' ) # \u5ffd\u7565\u9519\u8bef\u8f93\u51fa % matplotlib inline # jupyter note\u663e\u793a\u56fe\u7247 \u6570\u636e\u7b80\u4ecb \u00b6 \u8bfb\u53d6\u6570\u636e \u6570\u636e\u662f\u5173\u4e8e\u91d1\u7816\u56fd\u5bb6\u7684GDP\u548c\u4eba\u5747GDP\uff0c\u6570\u636e\u6e90\u4e8e \u4e16\u754c\u94f6\u884c \u3002 data = pd . read_excel ( 'BRICS.xlsx' ) data . head () Series Name Country Name Country Code 1990 2000 2011 2012 2013 2014 2015 2016 2017 2018 2019 0 GDP \u5df4\u897f BRA 1.189604e+12 1.538706e+12 2.296662e+12 2.340784e+12 2.411121e+12 2.423272e+12 2.337348e+12 2.260779e+12 2.290686e+12 2.320859e+12 2.347238e+12 1 \u4eba\u5747 GDP \u5df4\u897f BRA 7.983747e+03 8.803153e+03 1.162781e+04 1.174578e+04 1.199348e+04 1.195121e+04 1.143115e+04 1.096597e+04 1.102172e+04 1.107971e+04 1.112174e+04 2 GDP \u4fc4\u7f57\u65af\u8054\u90a6 RUS 1.416187e+12 9.515709e+11 1.590489e+12 1.654492e+12 1.683535e+12 1.695931e+12 1.662475e+12 1.665695e+12 1.696107e+12 1.739126e+12 1.762463e+12 3 \u4eba\u5747 GDP \u4fc4\u7f57\u65af\u8054\u90a6 RUS 9.570808e+03 6.491072e+03 1.112534e+04 1.155358e+04 1.173138e+04 1.160876e+04 1.135524e+04 1.135640e+04 1.155053e+04 1.184444e+04 1.201153e+04 4 GDP \u5370\u5ea6 IND 5.075650e+11 8.733574e+11 1.763440e+12 1.859660e+12 1.978420e+12 2.125025e+12 2.294947e+12 2.484425e+12 2.659424e+12 2.822169e+12 2.940157e+12 \u4e3a\u65b9\u4fbf\u663e\u793a\uff0c\u5bf9\u8f93\u51fa\u7ed3\u679c\u8fdb\u884c\u4e86\u8c03\u6574\u3002 \u6570\u636e\u6574\u7406 \u5c06\u5e74\u4efd\u3001\u6570\u503c\u5206\u522b\u6574\u7406\u6210\u4e00\u5217\uff0c\u7528\u5230\u7684\u662f melt() \u65b9\u6cd5\u3002 data_1 = data . melt ( id_vars = [ 'Series Name' , 'Country Name' ], value_vars = [ 1990 , 2000 , 2011 , 2012 , 2013 , 2014 , 2015 , 2016 , 2017 , 2018 , 2019 ], var_name = 'year' , value_name = 'constant 2010 US$' ) data_1 . head () Series Name Country Name year constant 2010 US$ 0 GDP \u5df4\u897f 1990 1.189604e+12 1 \u4eba\u5747 GDP \u5df4\u897f 1990 7.983747e+03 2 GDP \u4fc4\u7f57\u65af\u8054\u90a6 1990 1.416187e+12 3 \u4eba\u5747 GDP \u4fc4\u7f57\u65af\u8054\u90a6 1990 9.570808e+03 4 GDP \u5370\u5ea6 1990 5.075650e+11 \u63d0\u53d6\u6570\u636e \u6bd4\u5982\u8981\u5bf92019\u5e74\u91d1\u7816\u56fd\u5bb6\u7684GDP\u548c\u4eba\u5747GDP\u8fdb\u884c\u53ef\u89c6\u5316\uff0c\u53ef\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a data_2 = data_1 [ data_1 [ 'year' ] == 2019 ] gdp = data_2 [ data_2 [ 'Series Name' ] == 'GDP' ] def trans ( x ): return round ( x / 100000000 , 2 ) gdp [ 'constant 2010 US$' ] = gdp [ 'constant 2010 US$' ] . apply ( trans ) # \u8f6c\u5316\u6210\u4ebf\u7f8e\u5143\uff0c\u4fbf\u4e8e\u663e\u793a pergdp = data_2 [ data_2 [ 'Series Name' ] == '\u4eba\u5747 GDP' ] matplotlib\u65b9\u6cd5 \u00b6 \u67f1\u72b6\u56fe \u00b6 \u91d1\u7816\u56fd\u5bb6GDP\u67f1\u72b6\u56fe matplotlib . pyplot . bar \uff08 x \uff0c height \uff0c width = 0.8 \uff0c bottom = None \uff0c * \uff0c align = 'center' \uff0c data = None \uff0c ** kwargs \uff09 mpl . rcParams [ 'font.sans-serif' ] = [ 'Microsoft YaHei' ] # \u8981\u663e\u793a\u4e2d\u6587\uff0c\u9700\u8981\u5bf9\u5b57\u4f53\u8fdb\u884c\u8bbe\u7f6e\uff0c\u8fd9\u91cc\u9009\u62e9\u4f7f\u7528\u5fae\u8f6f\u96c5\u9ed1\u5b57\u4f53 mpl . rcParams [ 'figure.autolayout' ] = True # automatically adjust subplot plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) bar = ax . bar ( gdp [ 'Country Name' ], # x gdp [ 'constant 2010 US$' ], # height width = 0.8 , # \u5bbd\u5ea6 align = 'center' # \u5bf9\u9f50 ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6GDP' , fontsize = 12 , weight = 'bold' ) ax . set_yticks ([]) # \u4e0d\u663e\u793a\u7eb5\u5750\u6807\u523b\u5ea6 ax . bar_label ( bar , padding = 2 , fmt = ' %.2f \u4ebf\u7f8e\u5143' ) plt . show () # \u4fdd\u5b58\u56fe\u7247 fig . savefig ( 'bar-GDP.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\u67f1\u72b6\u56fe plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) bar = ax . bar ( pergdp [ 'Country Name' ], # x pergdp [ 'constant 2010 US$' ], # height width = 0.8 , # \u5bbd\u5ea6 align = 'center' # \u5bf9\u9f50 ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP' , fontsize = 12 , weight = 'bold' ) ax . set_yticks ([]) # \u4e0d\u663e\u793a\u7eb5\u5750\u6807\u523b\u5ea6 ax . bar_label ( bar , padding = 2 , fmt = ' %.2f \u7f8e\u5143' ) plt . show () # \u4fdd\u5b58\u56fe\u7247 fig . savefig ( 'bar-perGdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u5206\u7ec4\u67f1\u72b6\u56fe \u00b6 \u7531\u4e8e\u4e4b\u524d\u4f7f\u7528\u7684\u6570\u636e\u5dee\u5f02\u8f83\u5927\uff0c\u8003\u8651\u5230\u6570\u636e\u663e\u793a\u95ee\u9898\uff0c\u6240\u4ee5\u672c\u6848\u4f8b\u4f7f\u7528 matplotlib \u5b98\u65b9\u6587\u6863 \u7684\u6570\u636e\u3002 plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 labels = [ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ] men_means = [ 20 , 34 , 30 , 35 , 27 ] women_means = [ 25 , 32 , 34 , 20 , 25 ] x = np . arange ( len ( labels )) # the label locations width = 0.35 # the width of the bars fig , ax = plt . subplots ( figsize = ( 8 , 4 )) rects1 = ax . bar ( x - width / 2 , men_means , width , label = 'Men' ) rects2 = ax . bar ( x + width / 2 , women_means , width , label = 'Women' ) # Add some text for labels, title and custom x-axis tick labels, etc. ax . set_ylabel ( 'Scores' ) ax . set_title ( 'Scores by group and gender' ) ax . set_xticks ( x ) ax . set_xticklabels ( labels ) ax . legend () ax . bar_label ( rects1 , padding = 3 ) ax . bar_label ( rects2 , padding = 3 ) fig . tight_layout () plt . show () fig . savefig ( 'bar-grouped.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u5806\u79ef\u67f1\u72b6\u56fe \u00b6 \u6848\u4f8b\u6765\u6e90\u4e8ematplotlib \u5b98\u65b9\u6587\u6863 \uff0c\u7565\u6709\u4fee\u6539\uff1b\u7ed8\u5236\u5806\u79ef\u67f1\u72b6\u56fe\uff0c\u4e3b\u8981\u662f bottom \u53c2\u6570\u7684\u914d\u7f6e\u3002 labels = [ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ] men_means = [ 20 , 35 , 30 , 35 , 27 ] women_means = [ 25 , 32 , 34 , 20 , 25 ] width = 0.35 # the width of the bars: can also be len(x) sequence fig , ax = plt . subplots ( figsize = ( 8 , 4 )) bar1 = ax . bar ( labels , men_means , width , label = 'Men' ) bar2 = ax . bar ( labels , women_means , width , bottom = men_means , label = 'Women' ) ax . set_ylabel ( 'Scores' ) ax . set_title ( 'Scores by group and gender' ) ax . legend () ax . bar_label ( bar1 , label_type = 'center' ) ax . bar_label ( bar2 , label_type = 'center' ) plt . show () fig . savefig ( 'bar-stack.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b seaborn\u65b9\u6cd5 \u00b6 seaborn . barplot ( * , x = None , y = None , hue = None , data = None , order = None , hue_order = None , estimator =< function mean at 0x7fecadf1cee0 > , ci = 95 , n_boot = 1000 , units = None , seed = None , orient = None , color = None , palette = None , saturation = 0.75 , errcolor = '.26' , errwidth = None , capsize = None , dodge = True , ax = None , ** kwargs ) \u67f1\u72b6\u56fe \u00b6 \u5229\u7528 seaborn \u7ed8\u56fe\uff0c\u4f1a\u51fa\u73b0\u4e2d\u6587\u4e71\u7801\uff1b mpl.rcParams['font.sans-serif'] = ['Microsoft YaHei'] \u547d\u4ee4\u4e5f\u6ca1\u6709\u6548\u679c\uff0c\u5efa\u8bae\u5728\u6807\u9898\u3001\u523b\u5ea6\u6807\u7b7e\u91cc\u901a\u8fc7\u5b57\u5178\u6216\u5173\u952e\u5b57\u7684\u65b9\u5f0f\u8bbe\u7f6e\uff1b\u53e6\u5916\uff0c\u6dfb\u52a0\u6570\u636e\u6807\u7b7e\u7684\u65b9\u5f0f\u6709\u5f85\u63a2\u8ba8\u3002 \u91d1\u7816\u56fd\u5bb6GDP\u67f1\u72b6\u56fe sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( x = gdp [ 'Country Name' ], y = gdp [ 'constant 2010 US$' ], data = gdp ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6GDP\uff08\u4ebf\u7f8e\u5143\uff09' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) ax . set_xticklabels ( gdp [ 'Country Name' ], fontdict = { 'family' : 'Microsoft YaHei' }) fig . savefig ( 'seaborn-gdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\u67f1\u72b6\u56fe sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( x = pergdp [ 'Country Name' ], y = pergdp [ 'constant 2010 US$' ], data = pergdp ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\uff08\u7f8e\u5143\uff09' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) ax . set_xticklabels ( pergdp [ 'Country Name' ], fontdict = { 'family' : 'Microsoft YaHei' }) fig . savefig ( 'seaborn-pergdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u5206\u7ec4\u67f1\u72b6\u56fe \u00b6 \u7531\u4e8e\u52a0\u8f7d seaborn \u5b98\u7f51\u7684\u6570\u636e\u51fa\u73b0\u95ee\u9898\uff0c\u672c\u6848\u4f8b\u5c06 motplotlib \u5bf9\u5e94\u6848\u4f8b\u7684\u6570\u636e\u8fdb\u884c\u4e86\u7b80\u5355\u52a0\u5de5\uff1b\u4e3b\u8981\u53c2\u6570\u8bbe\u7f6e hue \u3002 df = pd . DataFrame ({ 'labels' :[ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ], 'men_means' :[ 20 , 34 , 30 , 35 , 27 ], 'women_means' : [ 25 , 32 , 34 , 20 , 25 ]}) df1 = df . melt ( id_vars = [ 'labels' ], value_vars = [ 'men_means' , 'women_means' ], var_name = 'sex' , value_name = 'value' ) sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( x = 'labels' , y = 'value' , hue = 'sex' , data = df1 ) ax . set_title ( 'Scores by group and gender' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) fig . savefig ( 'seaborn-grouped.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u5806\u79ef\u67f1\u72b6\u56fe \u00b6 \u5b98\u65b9\u6587\u6863\u5e76\u6ca1\u6d89\u53ca\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u53c2\u9605 \u6b64\u5904 \u3002","title":"\u67f1\u72b6\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/#_1","text":"\u7ed8\u56fe\u4e3b\u8981\u7528\u5230\u7684\u662f matplotlib \u5e93\uff08\u7248\u672c\u4e3a 3.4.1 \uff09\u3001 seaborn \u5e93\uff08\u7248\u672c\u4e3a 0.11.1 \uff09\uff1b matplotlib \u5e93\uff08\u7248\u672c\u4e3a 3.4.1 \uff09\u589e\u52a0\u4e9b\u65b0\u529f\u80fd\uff0c\u4f8b\u5982\uff1a bar_label() \u53ef\u4ee5\u5b9e\u73b0\u5bf9\u67f1\u72b6\u56fe\u3001\u6761\u5f62\u56fe\u81ea\u52a8\u6dfb\u52a0\u6807\u7b7e\u7b49\uff1b\u8981\u5347\u7ea7\u5230\u6b64\u7248\u672c\uff0c\u8bf7\u4f7f\u7528 pip install - -upgrade matplotlib \u8fdb\u884c\u5347\u7ea7\uff0c\u66f4\u591a\u529f\u80fd\u8bf7\u67e5\u9605 \u5b98\u65b9\u6587\u6863 \uff1b seaborn \u529f\u80fd\u53ca\u64cd\u4f5c\uff0c\u8be6\u89c1 \u5b98\u65b9\u6587\u6863 \u3002 import pandas as pd import matplotlib.pyplot as plt import matplotlib as mpl import seaborn as sns import numpy as np import warnings warnings . filterwarnings ( 'ignore' ) # \u5ffd\u7565\u9519\u8bef\u8f93\u51fa % matplotlib inline # jupyter note\u663e\u793a\u56fe\u7247","title":"\u67f1\u72b6\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/#_2","text":"\u8bfb\u53d6\u6570\u636e \u6570\u636e\u662f\u5173\u4e8e\u91d1\u7816\u56fd\u5bb6\u7684GDP\u548c\u4eba\u5747GDP\uff0c\u6570\u636e\u6e90\u4e8e \u4e16\u754c\u94f6\u884c \u3002 data = pd . read_excel ( 'BRICS.xlsx' ) data . head () Series Name Country Name Country Code 1990 2000 2011 2012 2013 2014 2015 2016 2017 2018 2019 0 GDP \u5df4\u897f BRA 1.189604e+12 1.538706e+12 2.296662e+12 2.340784e+12 2.411121e+12 2.423272e+12 2.337348e+12 2.260779e+12 2.290686e+12 2.320859e+12 2.347238e+12 1 \u4eba\u5747 GDP \u5df4\u897f BRA 7.983747e+03 8.803153e+03 1.162781e+04 1.174578e+04 1.199348e+04 1.195121e+04 1.143115e+04 1.096597e+04 1.102172e+04 1.107971e+04 1.112174e+04 2 GDP \u4fc4\u7f57\u65af\u8054\u90a6 RUS 1.416187e+12 9.515709e+11 1.590489e+12 1.654492e+12 1.683535e+12 1.695931e+12 1.662475e+12 1.665695e+12 1.696107e+12 1.739126e+12 1.762463e+12 3 \u4eba\u5747 GDP \u4fc4\u7f57\u65af\u8054\u90a6 RUS 9.570808e+03 6.491072e+03 1.112534e+04 1.155358e+04 1.173138e+04 1.160876e+04 1.135524e+04 1.135640e+04 1.155053e+04 1.184444e+04 1.201153e+04 4 GDP \u5370\u5ea6 IND 5.075650e+11 8.733574e+11 1.763440e+12 1.859660e+12 1.978420e+12 2.125025e+12 2.294947e+12 2.484425e+12 2.659424e+12 2.822169e+12 2.940157e+12 \u4e3a\u65b9\u4fbf\u663e\u793a\uff0c\u5bf9\u8f93\u51fa\u7ed3\u679c\u8fdb\u884c\u4e86\u8c03\u6574\u3002 \u6570\u636e\u6574\u7406 \u5c06\u5e74\u4efd\u3001\u6570\u503c\u5206\u522b\u6574\u7406\u6210\u4e00\u5217\uff0c\u7528\u5230\u7684\u662f melt() \u65b9\u6cd5\u3002 data_1 = data . melt ( id_vars = [ 'Series Name' , 'Country Name' ], value_vars = [ 1990 , 2000 , 2011 , 2012 , 2013 , 2014 , 2015 , 2016 , 2017 , 2018 , 2019 ], var_name = 'year' , value_name = 'constant 2010 US$' ) data_1 . head () Series Name Country Name year constant 2010 US$ 0 GDP \u5df4\u897f 1990 1.189604e+12 1 \u4eba\u5747 GDP \u5df4\u897f 1990 7.983747e+03 2 GDP \u4fc4\u7f57\u65af\u8054\u90a6 1990 1.416187e+12 3 \u4eba\u5747 GDP \u4fc4\u7f57\u65af\u8054\u90a6 1990 9.570808e+03 4 GDP \u5370\u5ea6 1990 5.075650e+11 \u63d0\u53d6\u6570\u636e \u6bd4\u5982\u8981\u5bf92019\u5e74\u91d1\u7816\u56fd\u5bb6\u7684GDP\u548c\u4eba\u5747GDP\u8fdb\u884c\u53ef\u89c6\u5316\uff0c\u53ef\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a data_2 = data_1 [ data_1 [ 'year' ] == 2019 ] gdp = data_2 [ data_2 [ 'Series Name' ] == 'GDP' ] def trans ( x ): return round ( x / 100000000 , 2 ) gdp [ 'constant 2010 US$' ] = gdp [ 'constant 2010 US$' ] . apply ( trans ) # \u8f6c\u5316\u6210\u4ebf\u7f8e\u5143\uff0c\u4fbf\u4e8e\u663e\u793a pergdp = data_2 [ data_2 [ 'Series Name' ] == '\u4eba\u5747 GDP' ]","title":"\u6570\u636e\u7b80\u4ecb"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/#matplotlib","text":"","title":"matplotlib\u65b9\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/#_3","text":"\u91d1\u7816\u56fd\u5bb6GDP\u67f1\u72b6\u56fe matplotlib . pyplot . bar \uff08 x \uff0c height \uff0c width = 0.8 \uff0c bottom = None \uff0c * \uff0c align = 'center' \uff0c data = None \uff0c ** kwargs \uff09 mpl . rcParams [ 'font.sans-serif' ] = [ 'Microsoft YaHei' ] # \u8981\u663e\u793a\u4e2d\u6587\uff0c\u9700\u8981\u5bf9\u5b57\u4f53\u8fdb\u884c\u8bbe\u7f6e\uff0c\u8fd9\u91cc\u9009\u62e9\u4f7f\u7528\u5fae\u8f6f\u96c5\u9ed1\u5b57\u4f53 mpl . rcParams [ 'figure.autolayout' ] = True # automatically adjust subplot plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) bar = ax . bar ( gdp [ 'Country Name' ], # x gdp [ 'constant 2010 US$' ], # height width = 0.8 , # \u5bbd\u5ea6 align = 'center' # \u5bf9\u9f50 ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6GDP' , fontsize = 12 , weight = 'bold' ) ax . set_yticks ([]) # \u4e0d\u663e\u793a\u7eb5\u5750\u6807\u523b\u5ea6 ax . bar_label ( bar , padding = 2 , fmt = ' %.2f \u4ebf\u7f8e\u5143' ) plt . show () # \u4fdd\u5b58\u56fe\u7247 fig . savefig ( 'bar-GDP.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\u67f1\u72b6\u56fe plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) bar = ax . bar ( pergdp [ 'Country Name' ], # x pergdp [ 'constant 2010 US$' ], # height width = 0.8 , # \u5bbd\u5ea6 align = 'center' # \u5bf9\u9f50 ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP' , fontsize = 12 , weight = 'bold' ) ax . set_yticks ([]) # \u4e0d\u663e\u793a\u7eb5\u5750\u6807\u523b\u5ea6 ax . bar_label ( bar , padding = 2 , fmt = ' %.2f \u7f8e\u5143' ) plt . show () # \u4fdd\u5b58\u56fe\u7247 fig . savefig ( 'bar-perGdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u67f1\u72b6\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/#_4","text":"\u7531\u4e8e\u4e4b\u524d\u4f7f\u7528\u7684\u6570\u636e\u5dee\u5f02\u8f83\u5927\uff0c\u8003\u8651\u5230\u6570\u636e\u663e\u793a\u95ee\u9898\uff0c\u6240\u4ee5\u672c\u6848\u4f8b\u4f7f\u7528 matplotlib \u5b98\u65b9\u6587\u6863 \u7684\u6570\u636e\u3002 plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 labels = [ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ] men_means = [ 20 , 34 , 30 , 35 , 27 ] women_means = [ 25 , 32 , 34 , 20 , 25 ] x = np . arange ( len ( labels )) # the label locations width = 0.35 # the width of the bars fig , ax = plt . subplots ( figsize = ( 8 , 4 )) rects1 = ax . bar ( x - width / 2 , men_means , width , label = 'Men' ) rects2 = ax . bar ( x + width / 2 , women_means , width , label = 'Women' ) # Add some text for labels, title and custom x-axis tick labels, etc. ax . set_ylabel ( 'Scores' ) ax . set_title ( 'Scores by group and gender' ) ax . set_xticks ( x ) ax . set_xticklabels ( labels ) ax . legend () ax . bar_label ( rects1 , padding = 3 ) ax . bar_label ( rects2 , padding = 3 ) fig . tight_layout () plt . show () fig . savefig ( 'bar-grouped.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u5206\u7ec4\u67f1\u72b6\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/#_5","text":"\u6848\u4f8b\u6765\u6e90\u4e8ematplotlib \u5b98\u65b9\u6587\u6863 \uff0c\u7565\u6709\u4fee\u6539\uff1b\u7ed8\u5236\u5806\u79ef\u67f1\u72b6\u56fe\uff0c\u4e3b\u8981\u662f bottom \u53c2\u6570\u7684\u914d\u7f6e\u3002 labels = [ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ] men_means = [ 20 , 35 , 30 , 35 , 27 ] women_means = [ 25 , 32 , 34 , 20 , 25 ] width = 0.35 # the width of the bars: can also be len(x) sequence fig , ax = plt . subplots ( figsize = ( 8 , 4 )) bar1 = ax . bar ( labels , men_means , width , label = 'Men' ) bar2 = ax . bar ( labels , women_means , width , bottom = men_means , label = 'Women' ) ax . set_ylabel ( 'Scores' ) ax . set_title ( 'Scores by group and gender' ) ax . legend () ax . bar_label ( bar1 , label_type = 'center' ) ax . bar_label ( bar2 , label_type = 'center' ) plt . show () fig . savefig ( 'bar-stack.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u5806\u79ef\u67f1\u72b6\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/#seaborn","text":"seaborn . barplot ( * , x = None , y = None , hue = None , data = None , order = None , hue_order = None , estimator =< function mean at 0x7fecadf1cee0 > , ci = 95 , n_boot = 1000 , units = None , seed = None , orient = None , color = None , palette = None , saturation = 0.75 , errcolor = '.26' , errwidth = None , capsize = None , dodge = True , ax = None , ** kwargs )","title":"seaborn\u65b9\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/#_6","text":"\u5229\u7528 seaborn \u7ed8\u56fe\uff0c\u4f1a\u51fa\u73b0\u4e2d\u6587\u4e71\u7801\uff1b mpl.rcParams['font.sans-serif'] = ['Microsoft YaHei'] \u547d\u4ee4\u4e5f\u6ca1\u6709\u6548\u679c\uff0c\u5efa\u8bae\u5728\u6807\u9898\u3001\u523b\u5ea6\u6807\u7b7e\u91cc\u901a\u8fc7\u5b57\u5178\u6216\u5173\u952e\u5b57\u7684\u65b9\u5f0f\u8bbe\u7f6e\uff1b\u53e6\u5916\uff0c\u6dfb\u52a0\u6570\u636e\u6807\u7b7e\u7684\u65b9\u5f0f\u6709\u5f85\u63a2\u8ba8\u3002 \u91d1\u7816\u56fd\u5bb6GDP\u67f1\u72b6\u56fe sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( x = gdp [ 'Country Name' ], y = gdp [ 'constant 2010 US$' ], data = gdp ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6GDP\uff08\u4ebf\u7f8e\u5143\uff09' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) ax . set_xticklabels ( gdp [ 'Country Name' ], fontdict = { 'family' : 'Microsoft YaHei' }) fig . savefig ( 'seaborn-gdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\u67f1\u72b6\u56fe sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( x = pergdp [ 'Country Name' ], y = pergdp [ 'constant 2010 US$' ], data = pergdp ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\uff08\u7f8e\u5143\uff09' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) ax . set_xticklabels ( pergdp [ 'Country Name' ], fontdict = { 'family' : 'Microsoft YaHei' }) fig . savefig ( 'seaborn-pergdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u67f1\u72b6\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/#_7","text":"\u7531\u4e8e\u52a0\u8f7d seaborn \u5b98\u7f51\u7684\u6570\u636e\u51fa\u73b0\u95ee\u9898\uff0c\u672c\u6848\u4f8b\u5c06 motplotlib \u5bf9\u5e94\u6848\u4f8b\u7684\u6570\u636e\u8fdb\u884c\u4e86\u7b80\u5355\u52a0\u5de5\uff1b\u4e3b\u8981\u53c2\u6570\u8bbe\u7f6e hue \u3002 df = pd . DataFrame ({ 'labels' :[ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ], 'men_means' :[ 20 , 34 , 30 , 35 , 27 ], 'women_means' : [ 25 , 32 , 34 , 20 , 25 ]}) df1 = df . melt ( id_vars = [ 'labels' ], value_vars = [ 'men_means' , 'women_means' ], var_name = 'sex' , value_name = 'value' ) sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( x = 'labels' , y = 'value' , hue = 'sex' , data = df1 ) ax . set_title ( 'Scores by group and gender' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) fig . savefig ( 'seaborn-grouped.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u5206\u7ec4\u67f1\u72b6\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/#_8","text":"\u5b98\u65b9\u6587\u6863\u5e76\u6ca1\u6d89\u53ca\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u53c2\u9605 \u6b64\u5904 \u3002","title":"\u5806\u79ef\u67f1\u72b6\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar_chart_race/","text":"\u52a8\u6001\u6761\u5f62\u56fe\u6216\u67f1\u5f62\u56fe \u00b6 \u5728 python \u4e2d\u52a8\u6001\u6761\u5f62\u56fe\u6216\u67f1\u5f62\u56fe\u4e3b\u8981\u4f7f\u7528 matplotli b\u6216 plotly \u6765\u7ed8\u5236\uff1b\u4e0d\u8fc7\uff0c\u6709\u5927\u795e\u5c06\u7ed8\u5236\u8fc7\u7a0b\u8fdb\u884c\u4e86\u5c01\u88c5\uff1a\u501f\u52a9 bar_chart_race \u5c31\u53ef\u4ee5\u7b80\u5355\u3001\u8f7b\u677e\u7684\u7ed8\u5236\u3002\u8981\u4f7f\u7528\u6b64\u51fd\u6570\uff0c\u9700\u8981\u5b89\u88c5\uff1b\u4e0d\u8fc7\u4f7f\u7528 pip install bar_chart_race \u547d\u4ee4\u8fdb\u884c\u5b89\u88c5\u7684\u53ea\u662f 0.1 \u7248\u672c\uff0c\u8981\u4f7f\u7528\u66f4\u591a\u529f\u80fd\uff0c\u9700\u8981\u5728 \u4f5c\u8005\u7684GIthub \u4e0a\u4e0b\u8f7d\u6e90\u4ee3\u7801\uff0c\u8fdb\u884c\u5b89\u88c5 0.2 \u7248\u672c\u3002 \u5b89\u88c5\u65b9\u5f0f\uff1a\u89e3\u538bGithub\u4e0b\u8f7d\u7684\u6e90\u4ee3\u7801\uff0c\u627e\u5230 setup.py \u6240\u5728\u4f4d\u7f6e\uff0c\u5728 cmd \u91cc\u5b9a\u4f4d\u5230\u8be5\u6587\u4ef6\u5939\uff0c\u4f7f\u7528 python setup.py install \u8fdb\u884c\u5b89\u88c5\u3002 \u4e3a\u4e86\u5c06\u52a8\u753b\u4fdd\u5b58\u5230\u78c1\u76d8\uff0c\u8bf7\u4f7f\u7528\u60a8\u8981\u4fdd\u5b58\u7684\u6587\u4ef6\u540d\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002\u60a8\u9700\u8981\u5148\u5b89\u88c5 ffmpeg \u624d\u80fd\u4fdd\u5b58\u52a8\u753b\u3002\u5b89\u88c5\u540e\uff0c\u60a8\u5c06\u80fd\u591f\u5c06\u52a8\u753b\u4fdd\u5b58\u4e3a\u591a\u79cd\u683c\u5f0f\uff08mp4\uff0cm4v\uff0cmov\u7b49\uff09\u3002\u8981\u5c06\u52a8\u753b\u53e6\u5b58\u4e3agif\uff0c\u8bf7\u5b89\u88c5 ImageMagick \u3002 \u5982\u679c\u60a8\u5728Jupyter Notebook\u4e2d\u5de5\u4f5c\uff0c\u8bf7\u4fdd\u7559 filename as None \uff0c\u5b83\u5c06\u81ea\u52a8\u5d4c\u5165\u5230Jupyter Notebook\u4e2d\u3002 \u51fd\u6570\u7b80\u4ecb \u00b6 def bar_chart_race ( df , # pandas DataFrame filename = None , # None\u6216str\uff0c\u9ed8\u8ba4None orientation = 'h' , # 'h'\u6216'v'\uff0c\u9ed8\u8ba4'h' sort = 'desc' , # desc'\u6216'asc'\uff0c\u9ed8\u8ba4'desc' n_bars = None , # int\uff0c\u9ed8\u8ba4None\uff0c\u6700\u5927\u6761\u6570 fixed_order = False , # ool\u6216list\uff0c\u9ed8\u8ba4False\uff0c\u987a\u5e8f fixed_max = False , # bool\uff0c\u9ed8\u8ba4False\uff0c\u662f\u5426\u56fa\u5b9a\u5305\u542b\u8fd9\u4e9b\u503c\u7684\u8f74\u7684\u6700\u5927\u503c\u3002 steps_per_period = 10 , # int\uff0c\u9ed8\u8ba410\uff0cThe number of steps to go from one time period to the next. period_length = 500 , # int, default 500\uff0cNumber of milliseconds to animate each period (row) interpolate_period = False , # bool, default False label_bars = True , # bool, default True\uff0c\u662f\u5426\u5728\u53f3\u4fa7\u6807\u8bb0\u503c bar_size = 0.95 , # float, default .95 period_label = True , # bool or dict, default True period_fmt = None , # str, default None period_summary_func = None , # function, default None perpendicular_bar_func = None , # function or str, default None figsize = ( 6 , 3.5 ), # two-item tuple of numbers, default (6, 3.5) cmap = 'dark24' , # str, matplotlib colormap instance, or list of colors, default 'dark24' title = None , # str, default None\uff0c\u6807\u9898 title_size = None , # number or str, default plt.rcParams['axes.titlesize'] \uff0c\u6807\u9898\u5b57\u4f53\u5927\u5c0f bar_label_size = 7 , # number or str, default 7\uff0c\u6807\u7b7e\u5927\u5c0f tick_label_size = 7 , # number or str, default 7\uff0c\u523b\u5ea6\u5927\u5c0f shared_fontdict = None , # dict, default None\uff0c\u5b57\u4f53\u5171\u4eab\u8bbe\u7f6e scale = 'linear' , # 'linear' or 'log', default 'linear' writer = None , # str or matplotlib Writer instance fig = None , # matplotlib Figure, default None dpi = 144 , # int, default 144 bar_kwargs = None , # dict, default filter_column_colors = False ) # bool, default False # \u5bfc\u5165\u5e93 import bar_chart_race as bcr import pandas as pd import warnings warnings . filterwarnings ( 'ignore' ) # \u5ffd\u7565\u9519\u8bef\u8f93\u51fa \u6570\u636e\u8bf4\u660e \u00b6 bar_chart_race \u4f7f\u7528\u7684\u6570\u636e\u5fc5\u987b\u662f\u5904\u7406\u540e\u7684\u5bbd\u6570\u636e\uff1b\u5176\u4e2d\u6bcf\u4e00\u884c\u4ee3\u8868\u4e00\u4e2a\u65f6\u95f4\u6bb5\uff0c\u6bcf\u5217\u5305\u542b\u8be5\u7c7b\u522b\u7684\u6761\u5f62\u503c\uff0c\uff08\u53ef\u9009\uff09\u4f7f\u7528\u7d22\u5f15\u6807\u8bb0\u6bcf\u4e2a\u65f6\u95f4\u6bb5\uff0c\u7d22\u5f15\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\u3002 \u53ef\u4f7f\u7528 prepare_wide_data() \u6216 prepare_long_data() \u4e24\u4e2a\u51fd\u6570 \u5c06\u6570\u636e\u8f6c\u6362\u6210\u6b63\u786e\u7684\u683c\u5f0f\uff1b\u4e5f\u53ef\u4ee5\u8fd0\u7528 melt() \u6216 pivot() \u51fd\u6570\u5c06\u6570\u636e\u5904\u7406\u6210\u6b63\u786e\u7684\u683c\u5f0f\u3002 \u672c\u6587\u6570\u636e\u4f7f\u7528\u4f5c\u8005GIThub\u4e0a\u7684\u5171\u4eab\u6570\u636e\uff0c\u4e0b\u8f7d\u6e90\u4ee3\u7801\u65f6\uff0c\u91cc\u9762\u9644\u5e26\u3002\u7531\u4e8e\u901a\u8fc7 bcr.load_dataset() \u65f6\u9047\u5230\u95ee\u9898\uff0c\u6240\u4ee5\u4ece\u672c\u5730\u8bfb\u53d6\u6570\u636e\u3002 data = pd . read_csv ( 'covid19_tutorial.csv' , parse_dates = [ 'date' ], # \u5c06'date'\u89e3\u6790\u4e3a\u65e5\u671f index_col = 'date' # \u5c06'date'\u4f5c\u4e3a\u7d22\u5f15 ) data \u7ed8\u56fe \u00b6 # \u8981\u4f20\u9012\u7ed9period_summary_func\u7684\u51fd\u6570 def summary ( values , ranks ): total_deaths = int ( round ( values . sum (), - 2 )) s = f 'Total Deaths - { total_deaths : ,.0f } ' return { 'x' : . 99 , 'y' : . 05 , 's' : s , 'ha' : 'right' , 'size' : 8 } # \u7ed8\u56fe bcr . bar_chart_race ( data , # \u6570\u636e filename = 'covid.gif' , # \u4fdd\u5b58\u4e3a.gif steps_per_period = 30 , # \u589e\u5927\u5e73\u6ed1\u5ea6 period_length = 1000 , # \u589e\u5927\u65f6\u95f4\u91cf period_label = { 'x' : . 99 , 'y' : . 1 , 'ha' : 'right' , 'color' : 'black' }, # \u65e5\u671f\u6807\u7b7e title = '\u5404\u56fdCOVID-19\u6b7b\u4ea1\u4eba\u6570' , shared_fontdict = { 'family' : 'LiSu' , 'weight' : 'bold' }, # \u5171\u4eab\u5b57\u4f53 period_summary_func = summary , # \u6dfb\u52a0\u6b7b\u4ea1\u603b\u4eba\u6570 ) \u66f4\u591a\u529f\u80fd\u4ecb\u7ecd\u53ef\u67e5\u9605 \u5b98\u65b9\u6587\u6863 \u3002","title":"\u52a8\u6001\u6761\u5f62\u56fe/\u67f1\u5f62\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar_chart_race/#_1","text":"\u5728 python \u4e2d\u52a8\u6001\u6761\u5f62\u56fe\u6216\u67f1\u5f62\u56fe\u4e3b\u8981\u4f7f\u7528 matplotli b\u6216 plotly \u6765\u7ed8\u5236\uff1b\u4e0d\u8fc7\uff0c\u6709\u5927\u795e\u5c06\u7ed8\u5236\u8fc7\u7a0b\u8fdb\u884c\u4e86\u5c01\u88c5\uff1a\u501f\u52a9 bar_chart_race \u5c31\u53ef\u4ee5\u7b80\u5355\u3001\u8f7b\u677e\u7684\u7ed8\u5236\u3002\u8981\u4f7f\u7528\u6b64\u51fd\u6570\uff0c\u9700\u8981\u5b89\u88c5\uff1b\u4e0d\u8fc7\u4f7f\u7528 pip install bar_chart_race \u547d\u4ee4\u8fdb\u884c\u5b89\u88c5\u7684\u53ea\u662f 0.1 \u7248\u672c\uff0c\u8981\u4f7f\u7528\u66f4\u591a\u529f\u80fd\uff0c\u9700\u8981\u5728 \u4f5c\u8005\u7684GIthub \u4e0a\u4e0b\u8f7d\u6e90\u4ee3\u7801\uff0c\u8fdb\u884c\u5b89\u88c5 0.2 \u7248\u672c\u3002 \u5b89\u88c5\u65b9\u5f0f\uff1a\u89e3\u538bGithub\u4e0b\u8f7d\u7684\u6e90\u4ee3\u7801\uff0c\u627e\u5230 setup.py \u6240\u5728\u4f4d\u7f6e\uff0c\u5728 cmd \u91cc\u5b9a\u4f4d\u5230\u8be5\u6587\u4ef6\u5939\uff0c\u4f7f\u7528 python setup.py install \u8fdb\u884c\u5b89\u88c5\u3002 \u4e3a\u4e86\u5c06\u52a8\u753b\u4fdd\u5b58\u5230\u78c1\u76d8\uff0c\u8bf7\u4f7f\u7528\u60a8\u8981\u4fdd\u5b58\u7684\u6587\u4ef6\u540d\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002\u60a8\u9700\u8981\u5148\u5b89\u88c5 ffmpeg \u624d\u80fd\u4fdd\u5b58\u52a8\u753b\u3002\u5b89\u88c5\u540e\uff0c\u60a8\u5c06\u80fd\u591f\u5c06\u52a8\u753b\u4fdd\u5b58\u4e3a\u591a\u79cd\u683c\u5f0f\uff08mp4\uff0cm4v\uff0cmov\u7b49\uff09\u3002\u8981\u5c06\u52a8\u753b\u53e6\u5b58\u4e3agif\uff0c\u8bf7\u5b89\u88c5 ImageMagick \u3002 \u5982\u679c\u60a8\u5728Jupyter Notebook\u4e2d\u5de5\u4f5c\uff0c\u8bf7\u4fdd\u7559 filename as None \uff0c\u5b83\u5c06\u81ea\u52a8\u5d4c\u5165\u5230Jupyter Notebook\u4e2d\u3002","title":"\u52a8\u6001\u6761\u5f62\u56fe\u6216\u67f1\u5f62\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar_chart_race/#_2","text":"def bar_chart_race ( df , # pandas DataFrame filename = None , # None\u6216str\uff0c\u9ed8\u8ba4None orientation = 'h' , # 'h'\u6216'v'\uff0c\u9ed8\u8ba4'h' sort = 'desc' , # desc'\u6216'asc'\uff0c\u9ed8\u8ba4'desc' n_bars = None , # int\uff0c\u9ed8\u8ba4None\uff0c\u6700\u5927\u6761\u6570 fixed_order = False , # ool\u6216list\uff0c\u9ed8\u8ba4False\uff0c\u987a\u5e8f fixed_max = False , # bool\uff0c\u9ed8\u8ba4False\uff0c\u662f\u5426\u56fa\u5b9a\u5305\u542b\u8fd9\u4e9b\u503c\u7684\u8f74\u7684\u6700\u5927\u503c\u3002 steps_per_period = 10 , # int\uff0c\u9ed8\u8ba410\uff0cThe number of steps to go from one time period to the next. period_length = 500 , # int, default 500\uff0cNumber of milliseconds to animate each period (row) interpolate_period = False , # bool, default False label_bars = True , # bool, default True\uff0c\u662f\u5426\u5728\u53f3\u4fa7\u6807\u8bb0\u503c bar_size = 0.95 , # float, default .95 period_label = True , # bool or dict, default True period_fmt = None , # str, default None period_summary_func = None , # function, default None perpendicular_bar_func = None , # function or str, default None figsize = ( 6 , 3.5 ), # two-item tuple of numbers, default (6, 3.5) cmap = 'dark24' , # str, matplotlib colormap instance, or list of colors, default 'dark24' title = None , # str, default None\uff0c\u6807\u9898 title_size = None , # number or str, default plt.rcParams['axes.titlesize'] \uff0c\u6807\u9898\u5b57\u4f53\u5927\u5c0f bar_label_size = 7 , # number or str, default 7\uff0c\u6807\u7b7e\u5927\u5c0f tick_label_size = 7 , # number or str, default 7\uff0c\u523b\u5ea6\u5927\u5c0f shared_fontdict = None , # dict, default None\uff0c\u5b57\u4f53\u5171\u4eab\u8bbe\u7f6e scale = 'linear' , # 'linear' or 'log', default 'linear' writer = None , # str or matplotlib Writer instance fig = None , # matplotlib Figure, default None dpi = 144 , # int, default 144 bar_kwargs = None , # dict, default filter_column_colors = False ) # bool, default False # \u5bfc\u5165\u5e93 import bar_chart_race as bcr import pandas as pd import warnings warnings . filterwarnings ( 'ignore' ) # \u5ffd\u7565\u9519\u8bef\u8f93\u51fa","title":"\u51fd\u6570\u7b80\u4ecb"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar_chart_race/#_3","text":"bar_chart_race \u4f7f\u7528\u7684\u6570\u636e\u5fc5\u987b\u662f\u5904\u7406\u540e\u7684\u5bbd\u6570\u636e\uff1b\u5176\u4e2d\u6bcf\u4e00\u884c\u4ee3\u8868\u4e00\u4e2a\u65f6\u95f4\u6bb5\uff0c\u6bcf\u5217\u5305\u542b\u8be5\u7c7b\u522b\u7684\u6761\u5f62\u503c\uff0c\uff08\u53ef\u9009\uff09\u4f7f\u7528\u7d22\u5f15\u6807\u8bb0\u6bcf\u4e2a\u65f6\u95f4\u6bb5\uff0c\u7d22\u5f15\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\u3002 \u53ef\u4f7f\u7528 prepare_wide_data() \u6216 prepare_long_data() \u4e24\u4e2a\u51fd\u6570 \u5c06\u6570\u636e\u8f6c\u6362\u6210\u6b63\u786e\u7684\u683c\u5f0f\uff1b\u4e5f\u53ef\u4ee5\u8fd0\u7528 melt() \u6216 pivot() \u51fd\u6570\u5c06\u6570\u636e\u5904\u7406\u6210\u6b63\u786e\u7684\u683c\u5f0f\u3002 \u672c\u6587\u6570\u636e\u4f7f\u7528\u4f5c\u8005GIThub\u4e0a\u7684\u5171\u4eab\u6570\u636e\uff0c\u4e0b\u8f7d\u6e90\u4ee3\u7801\u65f6\uff0c\u91cc\u9762\u9644\u5e26\u3002\u7531\u4e8e\u901a\u8fc7 bcr.load_dataset() \u65f6\u9047\u5230\u95ee\u9898\uff0c\u6240\u4ee5\u4ece\u672c\u5730\u8bfb\u53d6\u6570\u636e\u3002 data = pd . read_csv ( 'covid19_tutorial.csv' , parse_dates = [ 'date' ], # \u5c06'date'\u89e3\u6790\u4e3a\u65e5\u671f index_col = 'date' # \u5c06'date'\u4f5c\u4e3a\u7d22\u5f15 ) data","title":"\u6570\u636e\u8bf4\u660e"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar_chart_race/#_4","text":"# \u8981\u4f20\u9012\u7ed9period_summary_func\u7684\u51fd\u6570 def summary ( values , ranks ): total_deaths = int ( round ( values . sum (), - 2 )) s = f 'Total Deaths - { total_deaths : ,.0f } ' return { 'x' : . 99 , 'y' : . 05 , 's' : s , 'ha' : 'right' , 'size' : 8 } # \u7ed8\u56fe bcr . bar_chart_race ( data , # \u6570\u636e filename = 'covid.gif' , # \u4fdd\u5b58\u4e3a.gif steps_per_period = 30 , # \u589e\u5927\u5e73\u6ed1\u5ea6 period_length = 1000 , # \u589e\u5927\u65f6\u95f4\u91cf period_label = { 'x' : . 99 , 'y' : . 1 , 'ha' : 'right' , 'color' : 'black' }, # \u65e5\u671f\u6807\u7b7e title = '\u5404\u56fdCOVID-19\u6b7b\u4ea1\u4eba\u6570' , shared_fontdict = { 'family' : 'LiSu' , 'weight' : 'bold' }, # \u5171\u4eab\u5b57\u4f53 period_summary_func = summary , # \u6dfb\u52a0\u6b7b\u4ea1\u603b\u4eba\u6570 ) \u66f4\u591a\u529f\u80fd\u4ecb\u7ecd\u53ef\u67e5\u9605 \u5b98\u65b9\u6587\u6863 \u3002","title":"\u7ed8\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/barh/","text":"\u6761\u5f62\u56fe \u00b6 import pandas as pd import matplotlib.pyplot as plt import matplotlib as mpl import seaborn as sns import numpy as np import warnings warnings . filterwarnings ( 'ignore' ) # \u5ffd\u7565\u9519\u8bef\u8f93\u51fa % matplotlib inline matplotlib\u65b9\u6cd5 \u00b6 \u6570\u636e\u4ecd\u4f7f\u7528\u7ed8\u5236\u67f1\u72b6\u56fe\u6240\u7528\u6570\u636e\u3002 Axes . barh ( self , y , width , height = 0.8 , left = None , * , align = 'center' , ** kwargs ) data = pd . read_excel ( 'BRICS.xlsx' ) data_1 = data . melt ( id_vars = [ 'Series Name' , 'Country Name' ], value_vars = [ 1990 , 2000 , 2011 , 2012 , 2013 , 2014 , 2015 , 2016 , 2017 , 2018 , 2019 ], var_name = 'year' , value_name = 'constant 2010 US$' ) data_2 = data_1 [ data_1 [ 'year' ] == 2019 ] gdp = data_2 [ data_2 [ 'Series Name' ] == 'GDP' ] def trans ( x ): return round ( x / 100000000 , 2 ) gdp [ 'constant 2010 US$' ] = gdp [ 'constant 2010 US$' ] . apply ( trans ) # \u8f6c\u5316\u6210\u4ebf\u7f8e\u5143\uff0c\u4fbf\u4e8e\u663e\u793a pergdp = data_2 [ data_2 [ 'Series Name' ] == '\u4eba\u5747 GDP' ] \u6761\u5f62\u56fe \u00b6 \u91d1\u7816\u56fd\u5bb6GDP\u6761\u5f62\u56fe mpl . rcParams [ 'font.sans-serif' ] = [ 'Microsoft YaHei' ] # \u8981\u663e\u793a\u4e2d\u6587\uff0c\u9700\u8981\u5bf9\u5b57\u4f53\u8fdb\u884c\u8bbe\u7f6e\uff0c\u8fd9\u91cc\u9009\u62e9\u4f7f\u7528\u5fae\u8f6f\u96c5\u9ed1\u5b57\u4f53 mpl . rcParams [ 'figure.autolayout' ] = True # automatically adjust subplot plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) barh = ax . barh ( gdp [ 'Country Name' ], # x gdp [ 'constant 2010 US$' ], # height height = 0.8 , # \u9ad8\u5ea6 align = 'center' # \u5bf9\u9f50 ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6GDP' , fontsize = 12 , weight = 'bold' ) ax . set_xticks ([]) # \u4e0d\u663e\u793a\u6a2a\u5750\u6807\u523b\u5ea6 ax . bar_label ( barh , padding = 2 , fmt = ' %.2f \u4ebf\u7f8e\u5143' ) plt . show () # \u4fdd\u5b58\u56fe\u7247 fig . savefig ( 'barh-GDP.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\u6761\u5f62\u56fe plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) barh = ax . barh ( pergdp [ 'Country Name' ], # x pergdp [ 'constant 2010 US$' ], # height height = 0.8 , # \u9ad8\u5ea6 align = 'center' , # \u5bf9\u9f50 color = 'b' , # \u989c\u8272 alpha = 0.6 # \u900f\u660e\u5ea6 ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP' , fontsize = 12 , weight = 'bold' ) ax . set_xticks ([]) # \u4e0d\u663e\u793a\u6a2a\u5750\u6807\u523b\u5ea6 ax . bar_label ( barh , padding = 2 , fmt = ' %.2f \u7f8e\u5143' ) plt . show () # \u4fdd\u5b58\u56fe\u7247 fig . savefig ( 'barh-perGdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u5206\u7ec4\u6761\u5f62\u56fe \u00b6 \u6ce8\u610f\uff1a\u6761\u5f62\u56fe\u91cc\u7684 width \u53c2\u6570\u542b\u4e49\u4e0d\u540c\u4e8e\u67f1\u72b6\u56fe\u91cc\u7684 width ,\u6761\u5f62\u56fe\u91cc\u7684 height \u8868\u793a\u9ad8\u5ea6\uff0c\u4e0e\u67f1\u72b6\u56fe\u91cc\u7684 width \uff08\u5bbd\u5ea6\uff09\u542b\u4e49\u5dee\u4e0d\u591a\u3002 plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 labels = [ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ] men_means = [ 20 , 34 , 30 , 35 , 27 ] women_means = [ 25 , 32 , 34 , 20 , 25 ] x = np . arange ( len ( labels )) # the label locations height = 0.35 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) rects1 = ax . barh ( x - height / 2 , men_means , height , label = 'Men' , align = 'center' ) rects2 = ax . barh ( x + height / 2 , women_means , height , label = 'Women' , align = 'center' ) ax . set_xlabel ( 'Scores' ) ax . set_title ( 'Scores by group and gender' ) ax . set_yticks ( x ) ax . set_yticklabels ( labels ) ax . set_xticks ([]) ax . legend () ax . bar_label ( rects1 , padding = 3 ) ax . bar_label ( rects2 , padding = 3 ) fig . tight_layout () plt . show () fig . savefig ( 'barh-grouped.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u5806\u79ef\u6761\u5f62\u56fe \u00b6 \u4e3b\u8981\u662f left \u53c2\u6570\u7684\u914d\u7f6e\u3002 labels = [ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ] men_means = [ 20 , 35 , 30 , 35 , 27 ] women_means = [ 25 , 32 , 34 , 20 , 25 ] fig , ax = plt . subplots ( figsize = ( 8 , 4 )) bar1 = ax . barh ( labels , men_means , height = 0.8 , label = 'Men' ) bar2 = ax . barh ( labels , women_means , height = 0.8 , left = men_means , label = 'Women' ) ax . set_xlabel ( 'Scores' ) ax . set_title ( 'Scores by group and gender' , fontsize = 12 , weight = 'bold' ) ax . set_xticks ([]) ax . legend () ax . bar_label ( bar1 , label_type = 'center' ) ax . bar_label ( bar2 , label_type = 'center' ) plt . show () fig . savefig ( 'barh-stack.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b seaborn\u65b9\u6cd5 \u00b6 seaborn . barplot ( * , x = None , y = None , hue = None , data = None , order = None , hue_order = None , estimator =< function mean at 0x7fecadf1cee0 > , ci = 95 , n_boot = 1000 , units = None , seed = None , orient = None , color = None , palette = None , saturation = 0.75 , errcolor = '.26' , errwidth = None , capsize = None , dodge = True , ax = None , ** kwargs ) \u6761\u5f62\u56fe \u00b6 \u91d1\u7816\u56fd\u5bb6GDP\u6761\u5f62\u56fe sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( y = gdp [ 'Country Name' ], x = gdp [ 'constant 2010 US$' ], data = gdp ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6GDP\uff08\u4ebf\u7f8e\u5143\uff09' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) ax . set_yticklabels ( gdp [ 'Country Name' ], fontdict = { 'family' : 'Microsoft YaHei' }) fig . savefig ( 'seaborn-gdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\u6761\u5f62\u56fe sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( y = pergdp [ 'Country Name' ], x = pergdp [ 'constant 2010 US$' ], data = pergdp ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\uff08\u7f8e\u5143\uff09' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) ax . set_yticklabels ( pergdp [ 'Country Name' ], fontdict = { 'family' : 'Microsoft YaHei' }) fig . savefig ( 'seaborn-pergdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u5206\u7ec4\u6761\u5f62\u56fe \u00b6 df = pd . DataFrame ({ 'labels' :[ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ], 'men_means' :[ 20 , 34 , 30 , 35 , 27 ], 'women_means' : [ 25 , 32 , 34 , 20 , 25 ]}) df1 = df . melt ( id_vars = [ 'labels' ], value_vars = [ 'men_means' , 'women_means' ], var_name = 'sex' , value_name = 'value' ) sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( y = 'labels' , x = 'value' , hue = 'sex' , data = df1 ) ax . set_title ( 'Scores by group and gender' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) fig . savefig ( 'seaborn-grouped.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u6761\u5f62\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/barh/#_1","text":"import pandas as pd import matplotlib.pyplot as plt import matplotlib as mpl import seaborn as sns import numpy as np import warnings warnings . filterwarnings ( 'ignore' ) # \u5ffd\u7565\u9519\u8bef\u8f93\u51fa % matplotlib inline","title":"\u6761\u5f62\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/barh/#matplotlib","text":"\u6570\u636e\u4ecd\u4f7f\u7528\u7ed8\u5236\u67f1\u72b6\u56fe\u6240\u7528\u6570\u636e\u3002 Axes . barh ( self , y , width , height = 0.8 , left = None , * , align = 'center' , ** kwargs ) data = pd . read_excel ( 'BRICS.xlsx' ) data_1 = data . melt ( id_vars = [ 'Series Name' , 'Country Name' ], value_vars = [ 1990 , 2000 , 2011 , 2012 , 2013 , 2014 , 2015 , 2016 , 2017 , 2018 , 2019 ], var_name = 'year' , value_name = 'constant 2010 US$' ) data_2 = data_1 [ data_1 [ 'year' ] == 2019 ] gdp = data_2 [ data_2 [ 'Series Name' ] == 'GDP' ] def trans ( x ): return round ( x / 100000000 , 2 ) gdp [ 'constant 2010 US$' ] = gdp [ 'constant 2010 US$' ] . apply ( trans ) # \u8f6c\u5316\u6210\u4ebf\u7f8e\u5143\uff0c\u4fbf\u4e8e\u663e\u793a pergdp = data_2 [ data_2 [ 'Series Name' ] == '\u4eba\u5747 GDP' ]","title":"matplotlib\u65b9\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/barh/#_2","text":"\u91d1\u7816\u56fd\u5bb6GDP\u6761\u5f62\u56fe mpl . rcParams [ 'font.sans-serif' ] = [ 'Microsoft YaHei' ] # \u8981\u663e\u793a\u4e2d\u6587\uff0c\u9700\u8981\u5bf9\u5b57\u4f53\u8fdb\u884c\u8bbe\u7f6e\uff0c\u8fd9\u91cc\u9009\u62e9\u4f7f\u7528\u5fae\u8f6f\u96c5\u9ed1\u5b57\u4f53 mpl . rcParams [ 'figure.autolayout' ] = True # automatically adjust subplot plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) barh = ax . barh ( gdp [ 'Country Name' ], # x gdp [ 'constant 2010 US$' ], # height height = 0.8 , # \u9ad8\u5ea6 align = 'center' # \u5bf9\u9f50 ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6GDP' , fontsize = 12 , weight = 'bold' ) ax . set_xticks ([]) # \u4e0d\u663e\u793a\u6a2a\u5750\u6807\u523b\u5ea6 ax . bar_label ( barh , padding = 2 , fmt = ' %.2f \u4ebf\u7f8e\u5143' ) plt . show () # \u4fdd\u5b58\u56fe\u7247 fig . savefig ( 'barh-GDP.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\u6761\u5f62\u56fe plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) barh = ax . barh ( pergdp [ 'Country Name' ], # x pergdp [ 'constant 2010 US$' ], # height height = 0.8 , # \u9ad8\u5ea6 align = 'center' , # \u5bf9\u9f50 color = 'b' , # \u989c\u8272 alpha = 0.6 # \u900f\u660e\u5ea6 ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP' , fontsize = 12 , weight = 'bold' ) ax . set_xticks ([]) # \u4e0d\u663e\u793a\u6a2a\u5750\u6807\u523b\u5ea6 ax . bar_label ( barh , padding = 2 , fmt = ' %.2f \u7f8e\u5143' ) plt . show () # \u4fdd\u5b58\u56fe\u7247 fig . savefig ( 'barh-perGdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u6761\u5f62\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/barh/#_3","text":"\u6ce8\u610f\uff1a\u6761\u5f62\u56fe\u91cc\u7684 width \u53c2\u6570\u542b\u4e49\u4e0d\u540c\u4e8e\u67f1\u72b6\u56fe\u91cc\u7684 width ,\u6761\u5f62\u56fe\u91cc\u7684 height \u8868\u793a\u9ad8\u5ea6\uff0c\u4e0e\u67f1\u72b6\u56fe\u91cc\u7684 width \uff08\u5bbd\u5ea6\uff09\u542b\u4e49\u5dee\u4e0d\u591a\u3002 plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 labels = [ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ] men_means = [ 20 , 34 , 30 , 35 , 27 ] women_means = [ 25 , 32 , 34 , 20 , 25 ] x = np . arange ( len ( labels )) # the label locations height = 0.35 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) rects1 = ax . barh ( x - height / 2 , men_means , height , label = 'Men' , align = 'center' ) rects2 = ax . barh ( x + height / 2 , women_means , height , label = 'Women' , align = 'center' ) ax . set_xlabel ( 'Scores' ) ax . set_title ( 'Scores by group and gender' ) ax . set_yticks ( x ) ax . set_yticklabels ( labels ) ax . set_xticks ([]) ax . legend () ax . bar_label ( rects1 , padding = 3 ) ax . bar_label ( rects2 , padding = 3 ) fig . tight_layout () plt . show () fig . savefig ( 'barh-grouped.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u5206\u7ec4\u6761\u5f62\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/barh/#_4","text":"\u4e3b\u8981\u662f left \u53c2\u6570\u7684\u914d\u7f6e\u3002 labels = [ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ] men_means = [ 20 , 35 , 30 , 35 , 27 ] women_means = [ 25 , 32 , 34 , 20 , 25 ] fig , ax = plt . subplots ( figsize = ( 8 , 4 )) bar1 = ax . barh ( labels , men_means , height = 0.8 , label = 'Men' ) bar2 = ax . barh ( labels , women_means , height = 0.8 , left = men_means , label = 'Women' ) ax . set_xlabel ( 'Scores' ) ax . set_title ( 'Scores by group and gender' , fontsize = 12 , weight = 'bold' ) ax . set_xticks ([]) ax . legend () ax . bar_label ( bar1 , label_type = 'center' ) ax . bar_label ( bar2 , label_type = 'center' ) plt . show () fig . savefig ( 'barh-stack.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u5806\u79ef\u6761\u5f62\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/barh/#seaborn","text":"seaborn . barplot ( * , x = None , y = None , hue = None , data = None , order = None , hue_order = None , estimator =< function mean at 0x7fecadf1cee0 > , ci = 95 , n_boot = 1000 , units = None , seed = None , orient = None , color = None , palette = None , saturation = 0.75 , errcolor = '.26' , errwidth = None , capsize = None , dodge = True , ax = None , ** kwargs )","title":"seaborn\u65b9\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/barh/#_5","text":"\u91d1\u7816\u56fd\u5bb6GDP\u6761\u5f62\u56fe sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( y = gdp [ 'Country Name' ], x = gdp [ 'constant 2010 US$' ], data = gdp ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6GDP\uff08\u4ebf\u7f8e\u5143\uff09' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) ax . set_yticklabels ( gdp [ 'Country Name' ], fontdict = { 'family' : 'Microsoft YaHei' }) fig . savefig ( 'seaborn-gdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\u6761\u5f62\u56fe sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( y = pergdp [ 'Country Name' ], x = pergdp [ 'constant 2010 US$' ], data = pergdp ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\uff08\u7f8e\u5143\uff09' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) ax . set_yticklabels ( pergdp [ 'Country Name' ], fontdict = { 'family' : 'Microsoft YaHei' }) fig . savefig ( 'seaborn-pergdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u6761\u5f62\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/barh/#_6","text":"df = pd . DataFrame ({ 'labels' :[ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ], 'men_means' :[ 20 , 34 , 30 , 35 , 27 ], 'women_means' : [ 25 , 32 , 34 , 20 , 25 ]}) df1 = df . melt ( id_vars = [ 'labels' ], value_vars = [ 'men_means' , 'women_means' ], var_name = 'sex' , value_name = 'value' ) sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( y = 'labels' , x = 'value' , hue = 'sex' , data = df1 ) ax . set_title ( 'Scores by group and gender' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) fig . savefig ( 'seaborn-grouped.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u5206\u7ec4\u6761\u5f62\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/pie/","text":"\u997c\u56fe \u00b6 import pandas as pd import matplotlib.pyplot as plt import matplotlib as mpl import numpy as np import warnings warnings . filterwarnings ( 'ignore' ) # \u5ffd\u7565\u9519\u8bef\u8f93\u51fa % matplotlib inline Axes . pie ( self , x , explode = None , labels = None , colors = None , autopct = None , pctdistance = 0.6 , shadow = False , labeldistance = 1.1 , startangle = 0 , radius = 1 , counterclock = True , wedgeprops = None , textprops = None , center = 0 , 0 , frame = False , rotatelabels = False , * , normalize = None , data = None ) # \u6570\u636e labels = [ \"\u76f4\u63a5\u8bbf\u95ee\" , \"\u90ae\u4ef6\u8425\u9500\" , \"\u8054\u76df\u5e7f\u544a\" , \"\u89c6\u9891\u5e7f\u544a\" , \"\u641c\u7d22\u5f15\u64ce\" ] x = [ 335 , 310 , 234 , 135 , 1548 ] # \u57fa\u672c\u7ed8\u56fe mpl . rcParams [ 'font.sans-serif' ] = 'Microsoft Yahei' #\u5b57\u4f53 plt . style . use ( 'ggplot' ) # \u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) ax . pie ( x , labels = labels , autopct = ' %1.1f%% ' ) ax . set_title ( '\u997c\u56fe\u6848\u4f8b' , fontdict = { 'weight' : 'bold' }) plt . show () # \u6dfb\u52a0\u56fe\u4f8b mpl . rcParams [ 'font.sans-serif' ] = 'Microsoft Yahei' #\u5b57\u4f53 plt . style . use ( 'ggplot' ) # \u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) ax . pie ( x , labels = labels , autopct = ' %1.1f%% ' ) ax . legend ( title = '\u56fe\u4f8b' , loc = 'center right' , bbox_to_anchor = ( 1 , 0 , 0.5 , 1 )) ax . set_title ( '\u997c\u56fe\u6848\u4f8b' , fontdict = { 'weight' : 'bold' }) plt . show () # \u6dfb\u52a0explode mpl . rcParams [ 'font.sans-serif' ] = 'Microsoft Yahei' #\u5b57\u4f53 plt . style . use ( 'ggplot' ) # \u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) explode = ( 0.1 , 0 , 0 , 0 , 0 ) ax . pie ( x , labels = labels , explode = explode , autopct = ' %1.1f%% ' ) ax . legend ( title = '\u56fe\u4f8b' , loc = 'center right' , bbox_to_anchor = ( 1 , 0 , 0.5 , 1 )) ax . set_title ( '\u997c\u56fe\u6848\u4f8b' , fontdict = { 'weight' : 'bold' }) plt . show () # \u6807\u7b7e\u663e\u793a\u539f\u59cb\u503c mpl . rcParams [ 'font.sans-serif' ] = 'Microsoft Yahei' #\u5b57\u4f53 mpl . rcParams [ 'figure.autolayout' ] = True plt . style . use ( 'ggplot' ) # \u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) def func ( x , allvals ): absolute = int ( round ( x / 100. * np . sum ( allvals ))) return \" {:.1f} % \\n ( {:d} )\" . format ( x , absolute ) explode = ( 0.1 , 0 , 0 , 0 , 0 ) ax . pie ( x , labels = labels , explode = explode , autopct = lambda y : func ( y , x )) ax . legend ( title = '\u56fe\u4f8b' , loc = 'center right' , bbox_to_anchor = ( 1 , 0 , 0.5 , 1 )) ax . set_title ( '\u997c\u56fe\u6848\u4f8b' , fontdict = { 'weight' : 'bold' }) plt . show ()","title":"\u997c\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/pie/#_1","text":"import pandas as pd import matplotlib.pyplot as plt import matplotlib as mpl import numpy as np import warnings warnings . filterwarnings ( 'ignore' ) # \u5ffd\u7565\u9519\u8bef\u8f93\u51fa % matplotlib inline Axes . pie ( self , x , explode = None , labels = None , colors = None , autopct = None , pctdistance = 0.6 , shadow = False , labeldistance = 1.1 , startangle = 0 , radius = 1 , counterclock = True , wedgeprops = None , textprops = None , center = 0 , 0 , frame = False , rotatelabels = False , * , normalize = None , data = None ) # \u6570\u636e labels = [ \"\u76f4\u63a5\u8bbf\u95ee\" , \"\u90ae\u4ef6\u8425\u9500\" , \"\u8054\u76df\u5e7f\u544a\" , \"\u89c6\u9891\u5e7f\u544a\" , \"\u641c\u7d22\u5f15\u64ce\" ] x = [ 335 , 310 , 234 , 135 , 1548 ] # \u57fa\u672c\u7ed8\u56fe mpl . rcParams [ 'font.sans-serif' ] = 'Microsoft Yahei' #\u5b57\u4f53 plt . style . use ( 'ggplot' ) # \u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) ax . pie ( x , labels = labels , autopct = ' %1.1f%% ' ) ax . set_title ( '\u997c\u56fe\u6848\u4f8b' , fontdict = { 'weight' : 'bold' }) plt . show () # \u6dfb\u52a0\u56fe\u4f8b mpl . rcParams [ 'font.sans-serif' ] = 'Microsoft Yahei' #\u5b57\u4f53 plt . style . use ( 'ggplot' ) # \u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) ax . pie ( x , labels = labels , autopct = ' %1.1f%% ' ) ax . legend ( title = '\u56fe\u4f8b' , loc = 'center right' , bbox_to_anchor = ( 1 , 0 , 0.5 , 1 )) ax . set_title ( '\u997c\u56fe\u6848\u4f8b' , fontdict = { 'weight' : 'bold' }) plt . show () # \u6dfb\u52a0explode mpl . rcParams [ 'font.sans-serif' ] = 'Microsoft Yahei' #\u5b57\u4f53 plt . style . use ( 'ggplot' ) # \u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) explode = ( 0.1 , 0 , 0 , 0 , 0 ) ax . pie ( x , labels = labels , explode = explode , autopct = ' %1.1f%% ' ) ax . legend ( title = '\u56fe\u4f8b' , loc = 'center right' , bbox_to_anchor = ( 1 , 0 , 0.5 , 1 )) ax . set_title ( '\u997c\u56fe\u6848\u4f8b' , fontdict = { 'weight' : 'bold' }) plt . show () # \u6807\u7b7e\u663e\u793a\u539f\u59cb\u503c mpl . rcParams [ 'font.sans-serif' ] = 'Microsoft Yahei' #\u5b57\u4f53 mpl . rcParams [ 'figure.autolayout' ] = True plt . style . use ( 'ggplot' ) # \u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) def func ( x , allvals ): absolute = int ( round ( x / 100. * np . sum ( allvals ))) return \" {:.1f} % \\n ( {:d} )\" . format ( x , absolute ) explode = ( 0.1 , 0 , 0 , 0 , 0 ) ax . pie ( x , labels = labels , explode = explode , autopct = lambda y : func ( y , x )) ax . legend ( title = '\u56fe\u4f8b' , loc = 'center right' , bbox_to_anchor = ( 1 , 0 , 0.5 , 1 )) ax . set_title ( '\u997c\u56fe\u6848\u4f8b' , fontdict = { 'weight' : 'bold' }) plt . show ()","title":"\u997c\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/scatter/","text":"\u6563\u70b9\u56fe \u00b6 import pandas as pd import matplotlib.pyplot as plt import matplotlib as mpl import seaborn as sns import numpy as np import warnings warnings . filterwarnings ( 'ignore' ) # \u5ffd\u7565\u9519\u8bef\u8f93\u51fa % matplotlib inline \u6570\u636e\u7b80\u4ecb \u00b6 \u6848\u4f8b\u4f7f\u7528\u7684\u6570\u636e\u6765\u81ea seaborn \u5b98\u7f51\u6848\u4f8b\u7684tips\u6570\u636e\uff0c\u6570\u636e\u6d89\u53ca\u591a\u4e2a\u53d8\u91cf\uff1a\u603b\u6d88\u8d39\u3001\u5c0f\u8d39\u3001\u6027\u522b\u3001\u661f\u671f\u51e0\u7b49\uff1b\u7531\u4e8e\u4f7f\u7528 sns.load_dataset(\"tips\") \u547d\u4ee4\u51fa\u73b0\u9519\u8bef\uff0c\u6240\u4ee5\u4ece Github \u4e0a\u67e5\u8be2\u5230\u6570\u636e\uff0c\u5e76\u4fdd\u5b58\u5230\u672c\u5730\u4f7f\u7528\u3002 data = pd . read_csv ( 'tips.csv' ) data . head () matplotlib\u65b9\u6cd5 \u00b6 Axes . scatter ( self , x , y , s = None , # The marker size in points**2. Default is rcParams['lines.markersize'] ** 2 c = None , # The marker colors marker = None , # The marker style cmap = None , # A Colormap instance or registered colormap name. cmap is only used if c is an array of floats norm = None , vmin = None , vmax = None , alpha = None , linewidths = None , * , edgecolors = None , plotnonfinite = False , data = None , ** kwargs ) \u53c2\u6570\u8be6\u7ec6\u4ecb\u7ecd\u53ca\u4f7f\u7528\u6848\u4f8b\uff0c\u8bf7\u67e5\u9605 \u5b98\u7f51 \u3002 # \u57fa\u672c\u7ed8\u56fe mpl . rcParams [ 'font.sans-serif' ] = 'Microsoft YaHei' plt . style . use ( 'ggplot' ) fig , ax = plt . subplots ( figsize = ( 8 , 4 )) ax . scatter ( data [ 'total_bill' ], data [ 'tip' ]) ax . set_xlabel ( '\u603b\u8d26\u5355' ) ax . set_ylabel ( '\u5c0f\u8d39' ) ax . set_title ( '\u603b\u8d26\u5355\u4e0e\u5c0f\u8d39\u7684\u6563\u70b9\u56fe' ) plt . show () # \u6807\u8bb0\u70b9\u5927\u5c0f mpl . rcParams [ 'font.sans-serif' ] = 'Microsoft YaHei' plt . style . use ( 'ggplot' ) fig , ax = plt . subplots ( figsize = ( 8 , 4 )) ax . scatter ( data [ 'total_bill' ], data [ 'tip' ], s = data [ 'tip' ] * 20 , alpha = 0.5 ) ax . set_xlabel ( '\u603b\u8d26\u5355' ) ax . set_ylabel ( '\u5c0f\u8d39' ) ax . set_title ( '\u603b\u8d26\u5355\u4e0e\u5c0f\u8d39\u7684\u6563\u70b9\u56fe' ) plt . show () # \u6807\u8bb0\u989c\u8272 mpl . rcParams [ 'font.sans-serif' ] = 'Microsoft YaHei' plt . style . use ( 'ggplot' ) fig , ax = plt . subplots ( figsize = ( 8 , 4 )) colors = np . random . randint ( 1 , 5 , size = len ( data )) ax . scatter ( data [ 'total_bill' ], data [ 'tip' ], s = data [ 'tip' ] * 20 , alpha = 0.5 , c = colors ) ax . set_xlabel ( '\u603b\u8d26\u5355' ) ax . set_ylabel ( '\u5c0f\u8d39' ) ax . set_title ( '\u603b\u8d26\u5355\u4e0e\u5c0f\u8d39\u7684\u6563\u70b9\u56fe' ) plt . show () seaborn\u65b9\u6cd5 \u00b6 seaborn . scatterplot ( * , x = None , y = None , hue = None , # Grouping variable that will produce points with different colors. style = None , # Grouping variable that will produce points with different markers. size = None , # Grouping variable that will produce points with different sizes. data = None , palette = None , hue_order = None , hue_norm = None , sizes = None , size_order = None , size_norm = None , markers = True , style_order = None , x_bins = None , y_bins = None , units = None , estimator = None , ci = 95 , n_boot = 1000 , alpha = None , x_jitter = None , y_jitter = None , legend = 'auto' , ax = None , ** kwargs ) \u53c2\u6570\u8be6\u7ec6\u4ecb\u7ecd\u53ca\u4f7f\u7528\u6848\u4f8b\uff0c\u8bf7\u67e5\u9605 \u5b98\u7f51 \u3002 # \u57fa\u7840\u7528\u6cd5 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . scatterplot ( x = 'total_bill' , y = 'tip' , data = data ) # \u4f7f\u7528\u989c\u8272\u6807\u8bb0\u4e0d\u540ctime fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . scatterplot ( x = 'total_bill' , y = 'tip' , hue = 'time' , data = data ) # \u4f7f\u7528\u4e0d\u540c\u989c\u8272\u3001\u4e0d\u540c\u7b26\u53f7\u6807\u8bb0time fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . scatterplot ( x = 'total_bill' , y = 'tip' , hue = 'time' , style = 'time' , data = data ) # \u4f7f\u7528\u4e0d\u540c\u989c\u8272\u6807\u8bb0day\uff0c\u4e0d\u540c\u7b26\u53f7\u6807\u8bb0time fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . scatterplot ( x = 'total_bill' , y = 'tip' , hue = 'day' , style = 'time' , data = data ) # \u4f7f\u7528\u989c\u8272\u6807\u8bb0\u4e0d\u540ctime\uff0c\u5e76\u7528tip\u7684\u5927\u5c0f\u6765\u8bbe\u7f6e\u6807\u8bb0\u70b9\u7684\u5927\u5c0f fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . scatterplot ( x = 'total_bill' , y = 'tip' , hue = 'time' , size = 'tip' , sizes = ( 15 , 200 ), data = data ) # \u6307\u5b9a\u6807\u8bb0\u7b26\u53f7 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) markers = { \"Lunch\" : \"s\" , \"Dinner\" : \"X\" } sns . scatterplot ( data = data , x = \"total_bill\" , y = \"tip\" , style = \"time\" , markers = markers ) # \u591a\u56fe\u7ed8\u5236\uff1acol\u5fc5\u987b\u5728relplot\u91cc\u9762\u8bbe\u7f6e sns . relplot ( data = data , x = \"total_bill\" , y = \"tip\" , col = \"time\" , hue = \"day\" , size = 'tip' , sizes = ( 15 , 200 ), kind = \"scatter\" ) # \u591a\u56fe\u7ed8\u5236\uff1acol\u548crow sns . relplot ( data = data , x = \"total_bill\" , y = \"tip\" , row = 'sex' , col = \"time\" , style = \"day\" , size = 'tip' , sizes = ( 15 , 200 ), kind = \"scatter\" )","title":"\u6563\u70b9\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/scatter/#_1","text":"import pandas as pd import matplotlib.pyplot as plt import matplotlib as mpl import seaborn as sns import numpy as np import warnings warnings . filterwarnings ( 'ignore' ) # \u5ffd\u7565\u9519\u8bef\u8f93\u51fa % matplotlib inline","title":"\u6563\u70b9\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/scatter/#_2","text":"\u6848\u4f8b\u4f7f\u7528\u7684\u6570\u636e\u6765\u81ea seaborn \u5b98\u7f51\u6848\u4f8b\u7684tips\u6570\u636e\uff0c\u6570\u636e\u6d89\u53ca\u591a\u4e2a\u53d8\u91cf\uff1a\u603b\u6d88\u8d39\u3001\u5c0f\u8d39\u3001\u6027\u522b\u3001\u661f\u671f\u51e0\u7b49\uff1b\u7531\u4e8e\u4f7f\u7528 sns.load_dataset(\"tips\") \u547d\u4ee4\u51fa\u73b0\u9519\u8bef\uff0c\u6240\u4ee5\u4ece Github \u4e0a\u67e5\u8be2\u5230\u6570\u636e\uff0c\u5e76\u4fdd\u5b58\u5230\u672c\u5730\u4f7f\u7528\u3002 data = pd . read_csv ( 'tips.csv' ) data . head ()","title":"\u6570\u636e\u7b80\u4ecb"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/scatter/#matplotlib","text":"Axes . scatter ( self , x , y , s = None , # The marker size in points**2. Default is rcParams['lines.markersize'] ** 2 c = None , # The marker colors marker = None , # The marker style cmap = None , # A Colormap instance or registered colormap name. cmap is only used if c is an array of floats norm = None , vmin = None , vmax = None , alpha = None , linewidths = None , * , edgecolors = None , plotnonfinite = False , data = None , ** kwargs ) \u53c2\u6570\u8be6\u7ec6\u4ecb\u7ecd\u53ca\u4f7f\u7528\u6848\u4f8b\uff0c\u8bf7\u67e5\u9605 \u5b98\u7f51 \u3002 # \u57fa\u672c\u7ed8\u56fe mpl . rcParams [ 'font.sans-serif' ] = 'Microsoft YaHei' plt . style . use ( 'ggplot' ) fig , ax = plt . subplots ( figsize = ( 8 , 4 )) ax . scatter ( data [ 'total_bill' ], data [ 'tip' ]) ax . set_xlabel ( '\u603b\u8d26\u5355' ) ax . set_ylabel ( '\u5c0f\u8d39' ) ax . set_title ( '\u603b\u8d26\u5355\u4e0e\u5c0f\u8d39\u7684\u6563\u70b9\u56fe' ) plt . show () # \u6807\u8bb0\u70b9\u5927\u5c0f mpl . rcParams [ 'font.sans-serif' ] = 'Microsoft YaHei' plt . style . use ( 'ggplot' ) fig , ax = plt . subplots ( figsize = ( 8 , 4 )) ax . scatter ( data [ 'total_bill' ], data [ 'tip' ], s = data [ 'tip' ] * 20 , alpha = 0.5 ) ax . set_xlabel ( '\u603b\u8d26\u5355' ) ax . set_ylabel ( '\u5c0f\u8d39' ) ax . set_title ( '\u603b\u8d26\u5355\u4e0e\u5c0f\u8d39\u7684\u6563\u70b9\u56fe' ) plt . show () # \u6807\u8bb0\u989c\u8272 mpl . rcParams [ 'font.sans-serif' ] = 'Microsoft YaHei' plt . style . use ( 'ggplot' ) fig , ax = plt . subplots ( figsize = ( 8 , 4 )) colors = np . random . randint ( 1 , 5 , size = len ( data )) ax . scatter ( data [ 'total_bill' ], data [ 'tip' ], s = data [ 'tip' ] * 20 , alpha = 0.5 , c = colors ) ax . set_xlabel ( '\u603b\u8d26\u5355' ) ax . set_ylabel ( '\u5c0f\u8d39' ) ax . set_title ( '\u603b\u8d26\u5355\u4e0e\u5c0f\u8d39\u7684\u6563\u70b9\u56fe' ) plt . show ()","title":"matplotlib\u65b9\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/scatter/#seaborn","text":"seaborn . scatterplot ( * , x = None , y = None , hue = None , # Grouping variable that will produce points with different colors. style = None , # Grouping variable that will produce points with different markers. size = None , # Grouping variable that will produce points with different sizes. data = None , palette = None , hue_order = None , hue_norm = None , sizes = None , size_order = None , size_norm = None , markers = True , style_order = None , x_bins = None , y_bins = None , units = None , estimator = None , ci = 95 , n_boot = 1000 , alpha = None , x_jitter = None , y_jitter = None , legend = 'auto' , ax = None , ** kwargs ) \u53c2\u6570\u8be6\u7ec6\u4ecb\u7ecd\u53ca\u4f7f\u7528\u6848\u4f8b\uff0c\u8bf7\u67e5\u9605 \u5b98\u7f51 \u3002 # \u57fa\u7840\u7528\u6cd5 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . scatterplot ( x = 'total_bill' , y = 'tip' , data = data ) # \u4f7f\u7528\u989c\u8272\u6807\u8bb0\u4e0d\u540ctime fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . scatterplot ( x = 'total_bill' , y = 'tip' , hue = 'time' , data = data ) # \u4f7f\u7528\u4e0d\u540c\u989c\u8272\u3001\u4e0d\u540c\u7b26\u53f7\u6807\u8bb0time fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . scatterplot ( x = 'total_bill' , y = 'tip' , hue = 'time' , style = 'time' , data = data ) # \u4f7f\u7528\u4e0d\u540c\u989c\u8272\u6807\u8bb0day\uff0c\u4e0d\u540c\u7b26\u53f7\u6807\u8bb0time fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . scatterplot ( x = 'total_bill' , y = 'tip' , hue = 'day' , style = 'time' , data = data ) # \u4f7f\u7528\u989c\u8272\u6807\u8bb0\u4e0d\u540ctime\uff0c\u5e76\u7528tip\u7684\u5927\u5c0f\u6765\u8bbe\u7f6e\u6807\u8bb0\u70b9\u7684\u5927\u5c0f fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . scatterplot ( x = 'total_bill' , y = 'tip' , hue = 'time' , size = 'tip' , sizes = ( 15 , 200 ), data = data ) # \u6307\u5b9a\u6807\u8bb0\u7b26\u53f7 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) markers = { \"Lunch\" : \"s\" , \"Dinner\" : \"X\" } sns . scatterplot ( data = data , x = \"total_bill\" , y = \"tip\" , style = \"time\" , markers = markers ) # \u591a\u56fe\u7ed8\u5236\uff1acol\u5fc5\u987b\u5728relplot\u91cc\u9762\u8bbe\u7f6e sns . relplot ( data = data , x = \"total_bill\" , y = \"tip\" , col = \"time\" , hue = \"day\" , size = 'tip' , sizes = ( 15 , 200 ), kind = \"scatter\" ) # \u591a\u56fe\u7ed8\u5236\uff1acol\u548crow sns . relplot ( data = data , x = \"total_bill\" , y = \"tip\" , row = 'sex' , col = \"time\" , style = \"day\" , size = 'tip' , sizes = ( 15 , 200 ), kind = \"scatter\" )","title":"seaborn\u65b9\u6cd5"},{"location":"%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E7%88%AC%E8%99%AB/%E7%88%AC%E5%8F%96%E5%A4%A9%E6%B0%94%E6%95%B0%E6%8D%AE/","text":"\u5929\u6c14\u6570\u636e\u722c\u53d6 \u00b6 \u8981\u722c\u53d6\u7684\u7f51\u7ad9\u662f \u4e2d\u56fd\u5929\u6c14\u7f51 \uff1b\u722c\u53d6\u7684\u5185\u5bb9\u662f\u9655\u897f\u7701\u5404\u5730\u5e02\u4e03\u5929\u5185\u7684\u6570\u636e\uff1b\u722c\u53d6\u65f6\u95f4\u4e3a2021/4/30/8-30\uff1b\u6ce8\u610f\uff1a\u6700\u9ad8\u6c14\u6e29\u665a\u4e0a\u4f1a\u722c\u4e0d\u5230\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u53ea\u6709\u516d\u5929\uff0c\u4e0d\u5305\u62ec\u5f53\u65e5\u3002\u83b7\u53d6\u6570\u636e\u4f7f\u7528 requests.get() \u76f8\u5173\u65b9\u6cd5\uff0c\u89e3\u6790\u6570\u636e\u5229\u7528 xpath \u65b9\u6cd5\uff08\u9664\u6b64\u5916\u8fd8\u6709 re \u65b9\u6cd5\u3001 Beautifulsoup \u65b9\u6cd5\uff09\u3002 1.1 robots.txt \u534f\u8bae \u00b6 Robots \u534f\u8bae\u662f\u4e92\u8054\u7f51\u722c\u866b\u7684\u4e00\u9879\u516c\u8ba4\u7684\u9053\u5fb7\u89c4\u8303\uff0c\u5b83\u7684\u5168\u79f0\u662f\u201c\u7f51\u7edc\u722c\u866b\u6392\u9664\u6807\u51c6\u201d\uff08Robots exclusion protocol\uff09\uff0c\u8fd9\u4e2a\u534f\u8bae\u7528\u6765\u544a\u8bc9\u722c\u866b\uff0c\u54ea\u4e9b\u9875\u9762\u662f\u53ef\u4ee5\u6293\u53d6\u7684\uff0c\u54ea\u4e9b\u4e0d\u53ef\u4ee5\u3002 \u67e5\u770b\u65b9\u5f0f\u4e3a\uff1a \u7f51\u5740+robots.txt \uff0c\u6bd4\u5982\u8981\u67e5\u770b\u201c\u4e2d\u56fd\u5929\u6c14\u7f51\uff08 http://www.weather.com.cn/ \uff09\u201d\u7684\u534f\u8bae\uff1a http://www.weather.com.cn/robots.txt \uff1b\u7ed3\u679c\u4e3a\uff1a User-agent: * Allow: / \u534f\u8bae\u91cc\u6700\u5e38\u51fa\u73b0\u7684\u82f1\u6587\u662fAllow\u548cDisallow\uff0cAllow\u4ee3\u8868\u53ef\u4ee5\u88ab\u8bbf\u95ee\uff0cDisallow\u4ee3\u8868\u7981\u6b62\u88ab\u8bbf\u95ee\uff1b\u4e0a\u9762\u7684\u7ed3\u679c\u8868\u793a\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u4ee3\u7406\uff0c\u6ca1\u6709\u6293\u53d6\u5ef6\u8fdf\u7b49\u9650\u5236\u3002 1.2 \u7b80\u5355\u722c\u866b \u00b6 # \u5bfc\u5165\u6a21\u5757 from lxml import etree import requests , time # \u9655\u897f\u7701\u5404\u57ce\u5e02\u5bf9\u5e94\u5929\u6c14\u7f16\u7801 citys = { '\u897f\u5b89' : 101110101 , '\u5ef6\u5b89' : 101110300 , '\u6986\u6797' : 101110401 , '\u94dc\u5ddd' : 101111001 , '\u5546\u6d1b' : 101110601 , '\u5b89\u5eb7' : 101110701 , '\u6c49\u4e2d' : 101110801 , '\u5b9d\u9e21' : 101110901 , '\u54b8\u9633' : 101110200 , '\u6e2d\u5357' : 101110501 } def geturl (): ''' \u83b7\u53d6\u6709\u6548URL\uff0c\u5e76\u6267\u884c\u722c\u866b ''' for key , value in citys . items (): url = f 'http://www.weather.com.cn/weather/ { value } .shtml' spider ( url ) time . sleep ( 3 ) return spider def spider ( url ): ''' \u722c\u53d6\u65e5\u671f\u3001\u5929\u6c14\u3001\u6700\u9ad8\u548c\u6700\u4f4e\u6c14\u6e29 ''' headers = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; WOW64) ' 'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36' } code = requests . get ( url , headers = headers ) code . encoding = 'utf-8' s = etree . HTML ( code . text ) city = s . xpath ( '/html/body/div[5]/div[1]/div[1]/div[1]/div[1]/a[3]/text()' )[ 0 ] print ( f ' { city } \u4e03\u65e5\u5185\u5929\u6c14\uff1a' . center ( 20 , '-' )) trs = s . xpath ( '//*[@id=\"7d\"]/ul/li' ) for tr in trs : date = tr . xpath ( './h1/text()' ) wea = tr . xpath ( './p[1]/text()' ) tem_max = tr . xpath ( './p[2]/span/text()' ) tem_min = tr . xpath ( './p[2]/i/text()' ) for i , j , m , n in zip ( date , wea , tem_max , tem_min ): print ( i , j , m + '/' + n ) if __name__ == '__main__' : geturl () \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a ------ \u897f\u5b89\u4e03\u65e5\u5185\u5929\u6c14 \uff1a ------ 30 \u65e5 \uff08 \u4eca\u5929 \uff09 \u6674 31 / 11 \u2103 1 \u65e5 \uff08 \u660e\u5929 \uff09 \u6674\u8f6c\u591a\u4e91 26 / 13 \u2103 2 \u65e5 \uff08 \u540e\u5929 \uff09 \u9634\u8f6c\u591a\u4e91 27 / 13 \u2103 3 \u65e5 \uff08 \u5468\u4e00 \uff09 \u591a\u4e91 23 / 12 \u2103 4 \u65e5 \uff08 \u5468\u4e8c \uff09 \u9634\u8f6c\u591a\u4e91 21 / 13 \u2103 5 \u65e5 \uff08 \u5468\u4e09 \uff09 \u591a\u4e91 22 / 12 \u2103 6 \u65e5 \uff08 \u5468\u56db \uff09 \u9634 25 / 17 \u2103 ------ \u5ef6\u5b89\u4e03\u65e5\u5185\u5929\u6c14 \uff1a ------ 30 \u65e5 \uff08 \u4eca\u5929 \uff09 \u6674 22 / 6 \u2103 1 \u65e5 \uff08 \u660e\u5929 \uff09 \u6674\u8f6c\u9634 25 / 10 \u2103 2 \u65e5 \uff08 \u540e\u5929 \uff09 \u5c0f\u96e8 21 / 6 \u2103 3 \u65e5 \uff08 \u5468\u4e00 \uff09 \u6674 24 / 8 \u2103 4 \u65e5 \uff08 \u5468\u4e8c \uff09 \u6674 17 / 7 \u2103 5 \u65e5 \uff08 \u5468\u4e09 \uff09 \u6674\u8f6c\u9634 17 / 8 \u2103 6 \u65e5 \uff08 \u5468\u56db \uff09 \u591a\u4e91 20 / 10 \u2103 ------ \u6986\u6797\u4e03\u65e5\u5185\u5929\u6c14 \uff1a ------ 30 \u65e5 \uff08 \u4eca\u5929 \uff09 \u6674 18 / 6 \u2103 1 \u65e5 \uff08 \u660e\u5929 \uff09 \u6674\u8f6c\u591a\u4e91 22 / 9 \u2103 2 \u65e5 \uff08 \u540e\u5929 \uff09 \u9634\u8f6c\u6674 20 / 7 \u2103 3 \u65e5 \uff08 \u5468\u4e00 \uff09 \u591a\u4e91\u8f6c\u6674 26 / 6 \u2103 4 \u65e5 \uff08 \u5468\u4e8c \uff09 \u6674 19 / 6 \u2103 5 \u65e5 \uff08 \u5468\u4e09 \uff09 \u591a\u4e91 17 / 9 \u2103 6 \u65e5 \uff08 \u5468\u56db \uff09 \u6674 22 / 12 \u2103 ------ \u94dc\u5ddd\u4e03\u65e5\u5185\u5929\u6c14 \uff1a ------ 30 \u65e5 \uff08 \u4eca\u5929 \uff09 \u6674 27 / 8 \u2103 1 \u65e5 \uff08 \u660e\u5929 \uff09 \u6674\u8f6c\u9634 25 / 12 \u2103 2 \u65e5 \uff08 \u540e\u5929 \uff09 \u5c0f\u96e8\u8f6c\u591a\u4e91 20 / 10 \u2103 3 \u65e5 \uff08 \u5468\u4e00 \uff09 \u591a\u4e91\u8f6c\u9634 22 / 10 \u2103 4 \u65e5 \uff08 \u5468\u4e8c \uff09 \u9634\u8f6c\u6674 21 / 12 \u2103 5 \u65e5 \uff08 \u5468\u4e09 \uff09 \u6674\u8f6c\u591a\u4e91 20 / 10 \u2103 6 \u65e5 \uff08 \u5468\u56db \uff09 \u591a\u4e91\u8f6c\u9634 22 / 13 \u2103 ------ \u5546\u6d1b\u4e03\u65e5\u5185\u5929\u6c14 \uff1a ------ 30 \u65e5 \uff08 \u4eca\u5929 \uff09 \u6674 29 / 8 \u2103 1 \u65e5 \uff08 \u660e\u5929 \uff09 \u6674\u8f6c\u591a\u4e91 30 / 11 \u2103 2 \u65e5 \uff08 \u540e\u5929 \uff09 \u9634 20 / 9 \u2103 3 \u65e5 \uff08 \u5468\u4e00 \uff09 \u9634\u8f6c\u591a\u4e91 25 / 14 \u2103 4 \u65e5 \uff08 \u5468\u4e8c \uff09 \u9634 23 / 12 \u2103 5 \u65e5 \uff08 \u5468\u4e09 \uff09 \u9634\u8f6c\u591a\u4e91 19 / 12 \u2103 6 \u65e5 \uff08 \u5468\u56db \uff09 \u9634 21 / 12 \u2103 ------ \u5b89\u5eb7\u4e03\u65e5\u5185\u5929\u6c14 \uff1a ------ 30 \u65e5 \uff08 \u4eca\u5929 \uff09 \u6674 29 / 14 \u2103 1 \u65e5 \uff08 \u660e\u5929 \uff09 \u6674\u8f6c\u591a\u4e91 29 / 16 \u2103 2 \u65e5 \uff08 \u540e\u5929 \uff09 \u9634 23 / 13 \u2103 3 \u65e5 \uff08 \u5468\u4e00 \uff09 \u9634\u8f6c\u591a\u4e91 29 / 16 \u2103 4 \u65e5 \uff08 \u5468\u4e8c \uff09 \u9634 28 / 13 \u2103 5 \u65e5 \uff08 \u5468\u4e09 \uff09 \u591a\u4e91 24 / 12 \u2103 6 \u65e5 \uff08 \u5468\u56db \uff09 \u9634\u8f6c\u591a\u4e91 23 / 15 \u2103 ------ \u6c49\u4e2d\u4e03\u65e5\u5185\u5929\u6c14 \uff1a ------ 30 \u65e5 \uff08 \u4eca\u5929 \uff09 \u6674 30 / 15 \u2103 1 \u65e5 \uff08 \u660e\u5929 \uff09 \u6674\u8f6c\u591a\u4e91 28 / 17 \u2103 2 \u65e5 \uff08 \u540e\u5929 \uff09 \u5c0f\u96e8 24 / 14 \u2103 3 \u65e5 \uff08 \u5468\u4e00 \uff09 \u9634\u8f6c\u591a\u4e91 29 / 14 \u2103 4 \u65e5 \uff08 \u5468\u4e8c \uff09 \u9634 26 / 15 \u2103 5 \u65e5 \uff08 \u5468\u4e09 \uff09 \u9634\u8f6c\u591a\u4e91 24 / 13 \u2103 6 \u65e5 \uff08 \u5468\u56db \uff09 \u9634 24 / 17 \u2103 ------ \u5b9d\u9e21\u4e03\u65e5\u5185\u5929\u6c14 \uff1a ------ 30 \u65e5 \uff08 \u4eca\u5929 \uff09 \u591a\u4e91\u8f6c\u6674 30 / 12 \u2103 1 \u65e5 \uff08 \u660e\u5929 \uff09 \u591a\u4e91 30 / 14 \u2103 2 \u65e5 \uff08 \u540e\u5929 \uff09 \u5c0f\u96e8\u8f6c\u591a\u4e91 20 / 12 \u2103 3 \u65e5 \uff08 \u5468\u4e00 \uff09 \u591a\u4e91\u8f6c\u9634 22 / 10 \u2103 4 \u65e5 \uff08 \u5468\u4e8c \uff09 \u9634\u8f6c\u591a\u4e91 21 / 12 \u2103 5 \u65e5 \uff08 \u5468\u4e09 \uff09 \u591a\u4e91 23 / 12 \u2103 6 \u65e5 \uff08 \u5468\u56db \uff09 \u9634 24 / 14 \u2103 ------ \u54b8\u9633\u4e03\u65e5\u5185\u5929\u6c14 \uff1a ------ 30 \u65e5 \uff08 \u4eca\u5929 \uff09 \u6674 30 / 11 \u2103 1 \u65e5 \uff08 \u660e\u5929 \uff09 \u6674\u8f6c\u591a\u4e91 25 / 14 \u2103 2 \u65e5 \uff08 \u540e\u5929 \uff09 \u9634\u8f6c\u591a\u4e91 23 / 13 \u2103 3 \u65e5 \uff08 \u5468\u4e00 \uff09 \u591a\u4e91 22 / 13 \u2103 4 \u65e5 \uff08 \u5468\u4e8c \uff09 \u9634\u8f6c\u591a\u4e91 21 / 12 \u2103 5 \u65e5 \uff08 \u5468\u4e09 \uff09 \u591a\u4e91 21 / 11 \u2103 6 \u65e5 \uff08 \u5468\u56db \uff09 \u9634 26 / 15 \u2103 ------ \u6e2d\u5357\u4e03\u65e5\u5185\u5929\u6c14 \uff1a ------ 30 \u65e5 \uff08 \u4eca\u5929 \uff09 \u6674 32 / 16 \u2103 1 \u65e5 \uff08 \u660e\u5929 \uff09 \u6674 31 / 13 \u2103 2 \u65e5 \uff08 \u540e\u5929 \uff09 \u591a\u4e91\u8f6c\u9634 26 / 14 \u2103 3 \u65e5 \uff08 \u5468\u4e00 \uff09 \u591a\u4e91 25 / 13 \u2103 4 \u65e5 \uff08 \u5468\u4e8c \uff09 \u9634\u8f6c\u591a\u4e91 19 / 12 \u2103 5 \u65e5 \uff08 \u5468\u4e09 \uff09 \u591a\u4e91 26 / 11 \u2103 6 \u65e5 \uff08 \u5468\u56db \uff09 \u9634 24 / 13 \u2103 1.3 \u4fdd\u5b58\u6570\u636e \u00b6 1.3.1 csv \u65b9\u6cd5 \u00b6 # \u5bfc\u5165\u6a21\u5757 from lxml import etree import requests , time , csv # \u9655\u897f\u7701\u5404\u57ce\u5e02\u5bf9\u5e94\u5929\u6c14\u7f16\u7801 citys = { '\u897f\u5b89' : 101110101 , '\u5ef6\u5b89' : 101110300 , '\u6986\u6797' : 101110401 , '\u94dc\u5ddd' : 101111001 , '\u5546\u6d1b' : 101110601 , '\u5b89\u5eb7' : 101110701 , '\u6c49\u4e2d' : 101110801 , '\u5b9d\u9e21' : 101110901 , '\u54b8\u9633' : 101110200 , '\u6e2d\u5357' : 101110501 } def geturl (): ''' \u83b7\u53d6\u6709\u6548URL\uff0c\u5e76\u6267\u884c\u722c\u866b ''' for key , value in citys . items (): url = f 'http://www.weather.com.cn/weather/ { value } .shtml' spider ( url ) time . sleep ( 3 ) return spider def spider ( url ): ''' \u722c\u53d6\u65e5\u671f\u3001\u5929\u6c14\u3001\u6700\u9ad8\u548c\u6700\u4f4e\u6c14\u6e29\uff0c\u5e76\u4fdd\u5b58\u6570\u636e\u5230 weather.csv ''' headers = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; WOW64) ' 'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36' } code = requests . get ( url , headers = headers ) code . encoding = 'utf-8' s = etree . HTML ( code . text ) city = s . xpath ( '/html/body/div[5]/div[1]/div[1]/div[1]/div[1]/a[3]/text()' )[ 0 ] trs = s . xpath ( '//*[@id=\"7d\"]/ul/li' ) with open ( 'weather.csv' , 'a' , encoding = 'gbk' , newline = '' ) as f : writer = csv . writer ( f ) for tr in trs : date = tr . xpath ( './h1/text()' )[ 0 ] wea = tr . xpath ( './p[1]/text()' )[ 0 ] tem_max = tr . xpath ( './p[2]/span/text()' )[ 0 ] tem_min = tr . xpath ( './p[2]/i/text()' )[ 0 ] writer . writerow ([ city , date , wea , tem_max + '/' + tem_min ]) if __name__ == '__main__' : geturl () 1.3.1 excel \u6587\u4ef6 \u00b6 # \u5bfc\u5165\u6a21\u5757 from lxml import etree import requests , time , openpyxl # \u521b\u5efa\u5de5\u4f5c\u7c3f\uff0c\u7528\u6765\u4fdd\u5b58\u6570\u636e wb = openpyxl . Workbook () sheet = wb . active sheet . title = 'weather' sheet [ 'A1' ] = '\u57ce\u5e02' sheet [ 'B1' ] = '\u65e5\u671f' sheet [ 'C1' ] = '\u5929\u6c14' sheet [ 'D1' ] = '\u6c14\u6e29' # \u9655\u897f\u7701\u5404\u57ce\u5e02\u5bf9\u5e94\u5929\u6c14\u7f16\u7801 citys = { '\u897f\u5b89' : 101110101 , '\u5ef6\u5b89' : 101110300 , '\u6986\u6797' : 101110401 , '\u94dc\u5ddd' : 101111001 , '\u5546\u6d1b' : 101110601 , '\u5b89\u5eb7' : 101110701 , '\u6c49\u4e2d' : 101110801 , '\u5b9d\u9e21' : 101110901 , '\u54b8\u9633' : 101110200 , '\u6e2d\u5357' : 101110501 } def geturl (): ''' \u83b7\u53d6\u6709\u6548URL\uff0c\u5e76\u6267\u884c\u722c\u866b ''' for key , value in citys . items (): url = f 'http://www.weather.com.cn/weather/ { value } .shtml' spider ( url ) wb . save ( 'weather.xlsx' ) time . sleep ( 3 ) return spider def spider ( url ): ''' \u722c\u53d6\u65e5\u671f\u3001\u5929\u6c14\u3001\u6700\u9ad8\u548c\u6700\u4f4e\u6c14\u6e29\uff0c\u5e76\u4fdd\u5b58\u6570\u636e\u5230 weather.xlsx ''' headers = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; WOW64) ' 'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36' } code = requests . get ( url , headers = headers ) code . encoding = 'utf-8' s = etree . HTML ( code . text ) city = s . xpath ( '/html/body/div[5]/div[1]/div[1]/div[1]/div[1]/a[3]/text()' )[ 0 ] trs = s . xpath ( '//*[@id=\"7d\"]/ul/li' ) for tr in trs : date = tr . xpath ( './h1/text()' )[ 0 ] wea = tr . xpath ( './p[1]/text()' )[ 0 ] tem_max = tr . xpath ( './p[2]/span/text()' )[ 0 ] tem_min = tr . xpath ( './p[2]/i/text()' )[ 0 ] sheet . append ([ city , date , wea , tem_max + '/' + tem_min ]) if __name__ == '__main__' : geturl ()","title":"1.\u722c\u53d6\u5929\u6c14\u6570\u636e"},{"location":"%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E7%88%AC%E8%99%AB/%E7%88%AC%E5%8F%96%E5%A4%A9%E6%B0%94%E6%95%B0%E6%8D%AE/#_1","text":"\u8981\u722c\u53d6\u7684\u7f51\u7ad9\u662f \u4e2d\u56fd\u5929\u6c14\u7f51 \uff1b\u722c\u53d6\u7684\u5185\u5bb9\u662f\u9655\u897f\u7701\u5404\u5730\u5e02\u4e03\u5929\u5185\u7684\u6570\u636e\uff1b\u722c\u53d6\u65f6\u95f4\u4e3a2021/4/30/8-30\uff1b\u6ce8\u610f\uff1a\u6700\u9ad8\u6c14\u6e29\u665a\u4e0a\u4f1a\u722c\u4e0d\u5230\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u53ea\u6709\u516d\u5929\uff0c\u4e0d\u5305\u62ec\u5f53\u65e5\u3002\u83b7\u53d6\u6570\u636e\u4f7f\u7528 requests.get() \u76f8\u5173\u65b9\u6cd5\uff0c\u89e3\u6790\u6570\u636e\u5229\u7528 xpath \u65b9\u6cd5\uff08\u9664\u6b64\u5916\u8fd8\u6709 re \u65b9\u6cd5\u3001 Beautifulsoup \u65b9\u6cd5\uff09\u3002","title":"\u5929\u6c14\u6570\u636e\u722c\u53d6"},{"location":"%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E7%88%AC%E8%99%AB/%E7%88%AC%E5%8F%96%E5%A4%A9%E6%B0%94%E6%95%B0%E6%8D%AE/#11-robotstxt","text":"Robots \u534f\u8bae\u662f\u4e92\u8054\u7f51\u722c\u866b\u7684\u4e00\u9879\u516c\u8ba4\u7684\u9053\u5fb7\u89c4\u8303\uff0c\u5b83\u7684\u5168\u79f0\u662f\u201c\u7f51\u7edc\u722c\u866b\u6392\u9664\u6807\u51c6\u201d\uff08Robots exclusion protocol\uff09\uff0c\u8fd9\u4e2a\u534f\u8bae\u7528\u6765\u544a\u8bc9\u722c\u866b\uff0c\u54ea\u4e9b\u9875\u9762\u662f\u53ef\u4ee5\u6293\u53d6\u7684\uff0c\u54ea\u4e9b\u4e0d\u53ef\u4ee5\u3002 \u67e5\u770b\u65b9\u5f0f\u4e3a\uff1a \u7f51\u5740+robots.txt \uff0c\u6bd4\u5982\u8981\u67e5\u770b\u201c\u4e2d\u56fd\u5929\u6c14\u7f51\uff08 http://www.weather.com.cn/ \uff09\u201d\u7684\u534f\u8bae\uff1a http://www.weather.com.cn/robots.txt \uff1b\u7ed3\u679c\u4e3a\uff1a User-agent: * Allow: / \u534f\u8bae\u91cc\u6700\u5e38\u51fa\u73b0\u7684\u82f1\u6587\u662fAllow\u548cDisallow\uff0cAllow\u4ee3\u8868\u53ef\u4ee5\u88ab\u8bbf\u95ee\uff0cDisallow\u4ee3\u8868\u7981\u6b62\u88ab\u8bbf\u95ee\uff1b\u4e0a\u9762\u7684\u7ed3\u679c\u8868\u793a\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u4ee3\u7406\uff0c\u6ca1\u6709\u6293\u53d6\u5ef6\u8fdf\u7b49\u9650\u5236\u3002","title":"1.1 robots.txt\u534f\u8bae"},{"location":"%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E7%88%AC%E8%99%AB/%E7%88%AC%E5%8F%96%E5%A4%A9%E6%B0%94%E6%95%B0%E6%8D%AE/#12","text":"# \u5bfc\u5165\u6a21\u5757 from lxml import etree import requests , time # \u9655\u897f\u7701\u5404\u57ce\u5e02\u5bf9\u5e94\u5929\u6c14\u7f16\u7801 citys = { '\u897f\u5b89' : 101110101 , '\u5ef6\u5b89' : 101110300 , '\u6986\u6797' : 101110401 , '\u94dc\u5ddd' : 101111001 , '\u5546\u6d1b' : 101110601 , '\u5b89\u5eb7' : 101110701 , '\u6c49\u4e2d' : 101110801 , '\u5b9d\u9e21' : 101110901 , '\u54b8\u9633' : 101110200 , '\u6e2d\u5357' : 101110501 } def geturl (): ''' \u83b7\u53d6\u6709\u6548URL\uff0c\u5e76\u6267\u884c\u722c\u866b ''' for key , value in citys . items (): url = f 'http://www.weather.com.cn/weather/ { value } .shtml' spider ( url ) time . sleep ( 3 ) return spider def spider ( url ): ''' \u722c\u53d6\u65e5\u671f\u3001\u5929\u6c14\u3001\u6700\u9ad8\u548c\u6700\u4f4e\u6c14\u6e29 ''' headers = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; WOW64) ' 'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36' } code = requests . get ( url , headers = headers ) code . encoding = 'utf-8' s = etree . HTML ( code . text ) city = s . xpath ( '/html/body/div[5]/div[1]/div[1]/div[1]/div[1]/a[3]/text()' )[ 0 ] print ( f ' { city } \u4e03\u65e5\u5185\u5929\u6c14\uff1a' . center ( 20 , '-' )) trs = s . xpath ( '//*[@id=\"7d\"]/ul/li' ) for tr in trs : date = tr . xpath ( './h1/text()' ) wea = tr . xpath ( './p[1]/text()' ) tem_max = tr . xpath ( './p[2]/span/text()' ) tem_min = tr . xpath ( './p[2]/i/text()' ) for i , j , m , n in zip ( date , wea , tem_max , tem_min ): print ( i , j , m + '/' + n ) if __name__ == '__main__' : geturl () \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a ------ \u897f\u5b89\u4e03\u65e5\u5185\u5929\u6c14 \uff1a ------ 30 \u65e5 \uff08 \u4eca\u5929 \uff09 \u6674 31 / 11 \u2103 1 \u65e5 \uff08 \u660e\u5929 \uff09 \u6674\u8f6c\u591a\u4e91 26 / 13 \u2103 2 \u65e5 \uff08 \u540e\u5929 \uff09 \u9634\u8f6c\u591a\u4e91 27 / 13 \u2103 3 \u65e5 \uff08 \u5468\u4e00 \uff09 \u591a\u4e91 23 / 12 \u2103 4 \u65e5 \uff08 \u5468\u4e8c \uff09 \u9634\u8f6c\u591a\u4e91 21 / 13 \u2103 5 \u65e5 \uff08 \u5468\u4e09 \uff09 \u591a\u4e91 22 / 12 \u2103 6 \u65e5 \uff08 \u5468\u56db \uff09 \u9634 25 / 17 \u2103 ------ \u5ef6\u5b89\u4e03\u65e5\u5185\u5929\u6c14 \uff1a ------ 30 \u65e5 \uff08 \u4eca\u5929 \uff09 \u6674 22 / 6 \u2103 1 \u65e5 \uff08 \u660e\u5929 \uff09 \u6674\u8f6c\u9634 25 / 10 \u2103 2 \u65e5 \uff08 \u540e\u5929 \uff09 \u5c0f\u96e8 21 / 6 \u2103 3 \u65e5 \uff08 \u5468\u4e00 \uff09 \u6674 24 / 8 \u2103 4 \u65e5 \uff08 \u5468\u4e8c \uff09 \u6674 17 / 7 \u2103 5 \u65e5 \uff08 \u5468\u4e09 \uff09 \u6674\u8f6c\u9634 17 / 8 \u2103 6 \u65e5 \uff08 \u5468\u56db \uff09 \u591a\u4e91 20 / 10 \u2103 ------ \u6986\u6797\u4e03\u65e5\u5185\u5929\u6c14 \uff1a ------ 30 \u65e5 \uff08 \u4eca\u5929 \uff09 \u6674 18 / 6 \u2103 1 \u65e5 \uff08 \u660e\u5929 \uff09 \u6674\u8f6c\u591a\u4e91 22 / 9 \u2103 2 \u65e5 \uff08 \u540e\u5929 \uff09 \u9634\u8f6c\u6674 20 / 7 \u2103 3 \u65e5 \uff08 \u5468\u4e00 \uff09 \u591a\u4e91\u8f6c\u6674 26 / 6 \u2103 4 \u65e5 \uff08 \u5468\u4e8c \uff09 \u6674 19 / 6 \u2103 5 \u65e5 \uff08 \u5468\u4e09 \uff09 \u591a\u4e91 17 / 9 \u2103 6 \u65e5 \uff08 \u5468\u56db \uff09 \u6674 22 / 12 \u2103 ------ \u94dc\u5ddd\u4e03\u65e5\u5185\u5929\u6c14 \uff1a ------ 30 \u65e5 \uff08 \u4eca\u5929 \uff09 \u6674 27 / 8 \u2103 1 \u65e5 \uff08 \u660e\u5929 \uff09 \u6674\u8f6c\u9634 25 / 12 \u2103 2 \u65e5 \uff08 \u540e\u5929 \uff09 \u5c0f\u96e8\u8f6c\u591a\u4e91 20 / 10 \u2103 3 \u65e5 \uff08 \u5468\u4e00 \uff09 \u591a\u4e91\u8f6c\u9634 22 / 10 \u2103 4 \u65e5 \uff08 \u5468\u4e8c \uff09 \u9634\u8f6c\u6674 21 / 12 \u2103 5 \u65e5 \uff08 \u5468\u4e09 \uff09 \u6674\u8f6c\u591a\u4e91 20 / 10 \u2103 6 \u65e5 \uff08 \u5468\u56db \uff09 \u591a\u4e91\u8f6c\u9634 22 / 13 \u2103 ------ \u5546\u6d1b\u4e03\u65e5\u5185\u5929\u6c14 \uff1a ------ 30 \u65e5 \uff08 \u4eca\u5929 \uff09 \u6674 29 / 8 \u2103 1 \u65e5 \uff08 \u660e\u5929 \uff09 \u6674\u8f6c\u591a\u4e91 30 / 11 \u2103 2 \u65e5 \uff08 \u540e\u5929 \uff09 \u9634 20 / 9 \u2103 3 \u65e5 \uff08 \u5468\u4e00 \uff09 \u9634\u8f6c\u591a\u4e91 25 / 14 \u2103 4 \u65e5 \uff08 \u5468\u4e8c \uff09 \u9634 23 / 12 \u2103 5 \u65e5 \uff08 \u5468\u4e09 \uff09 \u9634\u8f6c\u591a\u4e91 19 / 12 \u2103 6 \u65e5 \uff08 \u5468\u56db \uff09 \u9634 21 / 12 \u2103 ------ \u5b89\u5eb7\u4e03\u65e5\u5185\u5929\u6c14 \uff1a ------ 30 \u65e5 \uff08 \u4eca\u5929 \uff09 \u6674 29 / 14 \u2103 1 \u65e5 \uff08 \u660e\u5929 \uff09 \u6674\u8f6c\u591a\u4e91 29 / 16 \u2103 2 \u65e5 \uff08 \u540e\u5929 \uff09 \u9634 23 / 13 \u2103 3 \u65e5 \uff08 \u5468\u4e00 \uff09 \u9634\u8f6c\u591a\u4e91 29 / 16 \u2103 4 \u65e5 \uff08 \u5468\u4e8c \uff09 \u9634 28 / 13 \u2103 5 \u65e5 \uff08 \u5468\u4e09 \uff09 \u591a\u4e91 24 / 12 \u2103 6 \u65e5 \uff08 \u5468\u56db \uff09 \u9634\u8f6c\u591a\u4e91 23 / 15 \u2103 ------ \u6c49\u4e2d\u4e03\u65e5\u5185\u5929\u6c14 \uff1a ------ 30 \u65e5 \uff08 \u4eca\u5929 \uff09 \u6674 30 / 15 \u2103 1 \u65e5 \uff08 \u660e\u5929 \uff09 \u6674\u8f6c\u591a\u4e91 28 / 17 \u2103 2 \u65e5 \uff08 \u540e\u5929 \uff09 \u5c0f\u96e8 24 / 14 \u2103 3 \u65e5 \uff08 \u5468\u4e00 \uff09 \u9634\u8f6c\u591a\u4e91 29 / 14 \u2103 4 \u65e5 \uff08 \u5468\u4e8c \uff09 \u9634 26 / 15 \u2103 5 \u65e5 \uff08 \u5468\u4e09 \uff09 \u9634\u8f6c\u591a\u4e91 24 / 13 \u2103 6 \u65e5 \uff08 \u5468\u56db \uff09 \u9634 24 / 17 \u2103 ------ \u5b9d\u9e21\u4e03\u65e5\u5185\u5929\u6c14 \uff1a ------ 30 \u65e5 \uff08 \u4eca\u5929 \uff09 \u591a\u4e91\u8f6c\u6674 30 / 12 \u2103 1 \u65e5 \uff08 \u660e\u5929 \uff09 \u591a\u4e91 30 / 14 \u2103 2 \u65e5 \uff08 \u540e\u5929 \uff09 \u5c0f\u96e8\u8f6c\u591a\u4e91 20 / 12 \u2103 3 \u65e5 \uff08 \u5468\u4e00 \uff09 \u591a\u4e91\u8f6c\u9634 22 / 10 \u2103 4 \u65e5 \uff08 \u5468\u4e8c \uff09 \u9634\u8f6c\u591a\u4e91 21 / 12 \u2103 5 \u65e5 \uff08 \u5468\u4e09 \uff09 \u591a\u4e91 23 / 12 \u2103 6 \u65e5 \uff08 \u5468\u56db \uff09 \u9634 24 / 14 \u2103 ------ \u54b8\u9633\u4e03\u65e5\u5185\u5929\u6c14 \uff1a ------ 30 \u65e5 \uff08 \u4eca\u5929 \uff09 \u6674 30 / 11 \u2103 1 \u65e5 \uff08 \u660e\u5929 \uff09 \u6674\u8f6c\u591a\u4e91 25 / 14 \u2103 2 \u65e5 \uff08 \u540e\u5929 \uff09 \u9634\u8f6c\u591a\u4e91 23 / 13 \u2103 3 \u65e5 \uff08 \u5468\u4e00 \uff09 \u591a\u4e91 22 / 13 \u2103 4 \u65e5 \uff08 \u5468\u4e8c \uff09 \u9634\u8f6c\u591a\u4e91 21 / 12 \u2103 5 \u65e5 \uff08 \u5468\u4e09 \uff09 \u591a\u4e91 21 / 11 \u2103 6 \u65e5 \uff08 \u5468\u56db \uff09 \u9634 26 / 15 \u2103 ------ \u6e2d\u5357\u4e03\u65e5\u5185\u5929\u6c14 \uff1a ------ 30 \u65e5 \uff08 \u4eca\u5929 \uff09 \u6674 32 / 16 \u2103 1 \u65e5 \uff08 \u660e\u5929 \uff09 \u6674 31 / 13 \u2103 2 \u65e5 \uff08 \u540e\u5929 \uff09 \u591a\u4e91\u8f6c\u9634 26 / 14 \u2103 3 \u65e5 \uff08 \u5468\u4e00 \uff09 \u591a\u4e91 25 / 13 \u2103 4 \u65e5 \uff08 \u5468\u4e8c \uff09 \u9634\u8f6c\u591a\u4e91 19 / 12 \u2103 5 \u65e5 \uff08 \u5468\u4e09 \uff09 \u591a\u4e91 26 / 11 \u2103 6 \u65e5 \uff08 \u5468\u56db \uff09 \u9634 24 / 13 \u2103","title":"1.2 \u7b80\u5355\u722c\u866b"},{"location":"%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E7%88%AC%E8%99%AB/%E7%88%AC%E5%8F%96%E5%A4%A9%E6%B0%94%E6%95%B0%E6%8D%AE/#13","text":"","title":"1.3 \u4fdd\u5b58\u6570\u636e"},{"location":"%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E7%88%AC%E8%99%AB/%E7%88%AC%E5%8F%96%E5%A4%A9%E6%B0%94%E6%95%B0%E6%8D%AE/#131-csv","text":"# \u5bfc\u5165\u6a21\u5757 from lxml import etree import requests , time , csv # \u9655\u897f\u7701\u5404\u57ce\u5e02\u5bf9\u5e94\u5929\u6c14\u7f16\u7801 citys = { '\u897f\u5b89' : 101110101 , '\u5ef6\u5b89' : 101110300 , '\u6986\u6797' : 101110401 , '\u94dc\u5ddd' : 101111001 , '\u5546\u6d1b' : 101110601 , '\u5b89\u5eb7' : 101110701 , '\u6c49\u4e2d' : 101110801 , '\u5b9d\u9e21' : 101110901 , '\u54b8\u9633' : 101110200 , '\u6e2d\u5357' : 101110501 } def geturl (): ''' \u83b7\u53d6\u6709\u6548URL\uff0c\u5e76\u6267\u884c\u722c\u866b ''' for key , value in citys . items (): url = f 'http://www.weather.com.cn/weather/ { value } .shtml' spider ( url ) time . sleep ( 3 ) return spider def spider ( url ): ''' \u722c\u53d6\u65e5\u671f\u3001\u5929\u6c14\u3001\u6700\u9ad8\u548c\u6700\u4f4e\u6c14\u6e29\uff0c\u5e76\u4fdd\u5b58\u6570\u636e\u5230 weather.csv ''' headers = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; WOW64) ' 'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36' } code = requests . get ( url , headers = headers ) code . encoding = 'utf-8' s = etree . HTML ( code . text ) city = s . xpath ( '/html/body/div[5]/div[1]/div[1]/div[1]/div[1]/a[3]/text()' )[ 0 ] trs = s . xpath ( '//*[@id=\"7d\"]/ul/li' ) with open ( 'weather.csv' , 'a' , encoding = 'gbk' , newline = '' ) as f : writer = csv . writer ( f ) for tr in trs : date = tr . xpath ( './h1/text()' )[ 0 ] wea = tr . xpath ( './p[1]/text()' )[ 0 ] tem_max = tr . xpath ( './p[2]/span/text()' )[ 0 ] tem_min = tr . xpath ( './p[2]/i/text()' )[ 0 ] writer . writerow ([ city , date , wea , tem_max + '/' + tem_min ]) if __name__ == '__main__' : geturl ()","title":"1.3.1 csv\u65b9\u6cd5"},{"location":"%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E7%88%AC%E8%99%AB/%E7%88%AC%E5%8F%96%E5%A4%A9%E6%B0%94%E6%95%B0%E6%8D%AE/#131-excel","text":"# \u5bfc\u5165\u6a21\u5757 from lxml import etree import requests , time , openpyxl # \u521b\u5efa\u5de5\u4f5c\u7c3f\uff0c\u7528\u6765\u4fdd\u5b58\u6570\u636e wb = openpyxl . Workbook () sheet = wb . active sheet . title = 'weather' sheet [ 'A1' ] = '\u57ce\u5e02' sheet [ 'B1' ] = '\u65e5\u671f' sheet [ 'C1' ] = '\u5929\u6c14' sheet [ 'D1' ] = '\u6c14\u6e29' # \u9655\u897f\u7701\u5404\u57ce\u5e02\u5bf9\u5e94\u5929\u6c14\u7f16\u7801 citys = { '\u897f\u5b89' : 101110101 , '\u5ef6\u5b89' : 101110300 , '\u6986\u6797' : 101110401 , '\u94dc\u5ddd' : 101111001 , '\u5546\u6d1b' : 101110601 , '\u5b89\u5eb7' : 101110701 , '\u6c49\u4e2d' : 101110801 , '\u5b9d\u9e21' : 101110901 , '\u54b8\u9633' : 101110200 , '\u6e2d\u5357' : 101110501 } def geturl (): ''' \u83b7\u53d6\u6709\u6548URL\uff0c\u5e76\u6267\u884c\u722c\u866b ''' for key , value in citys . items (): url = f 'http://www.weather.com.cn/weather/ { value } .shtml' spider ( url ) wb . save ( 'weather.xlsx' ) time . sleep ( 3 ) return spider def spider ( url ): ''' \u722c\u53d6\u65e5\u671f\u3001\u5929\u6c14\u3001\u6700\u9ad8\u548c\u6700\u4f4e\u6c14\u6e29\uff0c\u5e76\u4fdd\u5b58\u6570\u636e\u5230 weather.xlsx ''' headers = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; WOW64) ' 'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36' } code = requests . get ( url , headers = headers ) code . encoding = 'utf-8' s = etree . HTML ( code . text ) city = s . xpath ( '/html/body/div[5]/div[1]/div[1]/div[1]/div[1]/a[3]/text()' )[ 0 ] trs = s . xpath ( '//*[@id=\"7d\"]/ul/li' ) for tr in trs : date = tr . xpath ( './h1/text()' )[ 0 ] wea = tr . xpath ( './p[1]/text()' )[ 0 ] tem_max = tr . xpath ( './p[2]/span/text()' )[ 0 ] tem_min = tr . xpath ( './p[2]/i/text()' )[ 0 ] sheet . append ([ city , date , wea , tem_max + '/' + tem_min ]) if __name__ == '__main__' : geturl ()","title":"1.3.1 excel \u6587\u4ef6"},{"location":"%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E7%88%AC%E8%99%AB/%E7%88%AC%E5%8F%96%E6%AD%8C%E6%9B%B2%E6%95%B0%E6%8D%AE-json/","text":"\u722c\u53d6\u6b4c\u66f2 \u00b6 \u722c\u53d6qq\u97f3\u4e50\u6881\u9759\u833950\u9996\u6b4c\u3001\u4e13\u8f91\u540d\u548c\u64ad\u653e\u94fe\u63a5\u3002 1.1 robots\u534f\u8bae \u00b6 https://y.qq.com/robots.txt \uff0c\u8981\u722c\u53d6\u7684\u6570\u636e\u5728 data['song']['list'] \u91cc\uff0c\u534f\u8bae\u6ca1\u6709\u7981\u6b62\uff0c\u53ef\u4ee5\u722c\u53d6\u3002 User - agent : * Disallow : / playlist / Disallow : / yqq / playlist / Disallow : / n / yqq / playlist / 1.2 \u6570\u636e\u722c\u53d6 \u00b6 \u6bcf\u987510\u9996\uff0c\u53ea\u9700\u722c\u53d6\u524d\u4e94\u9875\u5373\u53ef\u3002 # \u5bfc\u5165\u6a21\u5757 import requests , openpyxl # \u521b\u5efa\u5de5\u4f5c\u7c3f\uff0c\u7528\u6765\u4fdd\u5b58\u722c\u53d6\u7684\u6570\u636e wb = openpyxl . Workbook () sheet = wb . active sheet . title = 'song' sheet [ 'A1' ] = '\u6b4c\u540d' sheet [ 'B1' ] = '\u4e13\u8f91\u540d' sheet [ 'C1' ] = '\u64ad\u653e\u94fe\u63a5' # \u722c\u53d6\u6570\u636e url = 'https://c.y.qq.com/soso/fcgi-bin/client_search_cp' headers = { 'User-Agent' : 'Mozilla /5.0(WindowsNT10.0;WOW64) AppleWebKit / 537.36(KHTML, likeGecko) ' 'Chrome / 86.0.4240.198Safari / 537.36' } for i in range ( 5 ): params = { 'ct' : '24' , 'qqmusic_ver' : '1298' , 'new_json' : '1' , 'remoteplace' : 'txt.yqq.song' , 'searchid' : '64015456821005639' , 't' : '0' , 'aggr' : '1' , 'cr' : '1' , 'catZhida' : '1' , 'lossless' : '0' , 'flag_qc' : '0' , 'p' : str ( i + 1 ), 'n' : '10' , 'w' : '\u6881\u9759\u8339' , 'g_tk_new_20200303' : '5381' , 'g_tk' : '5381' , 'loginUin' : '0' , 'hostUin' : '0' , 'format' : 'json' , 'inCharset' : 'utf8' , 'outCharset' : 'utf-8' , 'notice' : '0' , 'platform' : 'yqq.json' , 'needNewCode' : '0' } res = requests . get ( url , params = params , headers = headers ) . json () for i in res [ 'data' ][ 'song' ][ 'list' ]: name = i [ 'name' ] album = i [ 'album' ][ 'name' ] link = 'https://y.qq.com/n/yqq/song/' + str ( i [ 'mid' ] + '.html' ) sheet . append ([ name , album , link ]) wb . save ( 'Fish Leong.xlsx' ) # \u4fdd\u5b58\u6570\u636e","title":"2.\u722c\u53d6\u6b4c\u66f2\u6570\u636e-json"},{"location":"%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E7%88%AC%E8%99%AB/%E7%88%AC%E5%8F%96%E6%AD%8C%E6%9B%B2%E6%95%B0%E6%8D%AE-json/#_1","text":"\u722c\u53d6qq\u97f3\u4e50\u6881\u9759\u833950\u9996\u6b4c\u3001\u4e13\u8f91\u540d\u548c\u64ad\u653e\u94fe\u63a5\u3002","title":"\u722c\u53d6\u6b4c\u66f2"},{"location":"%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E7%88%AC%E8%99%AB/%E7%88%AC%E5%8F%96%E6%AD%8C%E6%9B%B2%E6%95%B0%E6%8D%AE-json/#11-robots","text":"https://y.qq.com/robots.txt \uff0c\u8981\u722c\u53d6\u7684\u6570\u636e\u5728 data['song']['list'] \u91cc\uff0c\u534f\u8bae\u6ca1\u6709\u7981\u6b62\uff0c\u53ef\u4ee5\u722c\u53d6\u3002 User - agent : * Disallow : / playlist / Disallow : / yqq / playlist / Disallow : / n / yqq / playlist /","title":"1.1 robots\u534f\u8bae"},{"location":"%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E7%88%AC%E8%99%AB/%E7%88%AC%E5%8F%96%E6%AD%8C%E6%9B%B2%E6%95%B0%E6%8D%AE-json/#12","text":"\u6bcf\u987510\u9996\uff0c\u53ea\u9700\u722c\u53d6\u524d\u4e94\u9875\u5373\u53ef\u3002 # \u5bfc\u5165\u6a21\u5757 import requests , openpyxl # \u521b\u5efa\u5de5\u4f5c\u7c3f\uff0c\u7528\u6765\u4fdd\u5b58\u722c\u53d6\u7684\u6570\u636e wb = openpyxl . Workbook () sheet = wb . active sheet . title = 'song' sheet [ 'A1' ] = '\u6b4c\u540d' sheet [ 'B1' ] = '\u4e13\u8f91\u540d' sheet [ 'C1' ] = '\u64ad\u653e\u94fe\u63a5' # \u722c\u53d6\u6570\u636e url = 'https://c.y.qq.com/soso/fcgi-bin/client_search_cp' headers = { 'User-Agent' : 'Mozilla /5.0(WindowsNT10.0;WOW64) AppleWebKit / 537.36(KHTML, likeGecko) ' 'Chrome / 86.0.4240.198Safari / 537.36' } for i in range ( 5 ): params = { 'ct' : '24' , 'qqmusic_ver' : '1298' , 'new_json' : '1' , 'remoteplace' : 'txt.yqq.song' , 'searchid' : '64015456821005639' , 't' : '0' , 'aggr' : '1' , 'cr' : '1' , 'catZhida' : '1' , 'lossless' : '0' , 'flag_qc' : '0' , 'p' : str ( i + 1 ), 'n' : '10' , 'w' : '\u6881\u9759\u8339' , 'g_tk_new_20200303' : '5381' , 'g_tk' : '5381' , 'loginUin' : '0' , 'hostUin' : '0' , 'format' : 'json' , 'inCharset' : 'utf8' , 'outCharset' : 'utf-8' , 'notice' : '0' , 'platform' : 'yqq.json' , 'needNewCode' : '0' } res = requests . get ( url , params = params , headers = headers ) . json () for i in res [ 'data' ][ 'song' ][ 'list' ]: name = i [ 'name' ] album = i [ 'album' ][ 'name' ] link = 'https://y.qq.com/n/yqq/song/' + str ( i [ 'mid' ] + '.html' ) sheet . append ([ name , album , link ]) wb . save ( 'Fish Leong.xlsx' ) # \u4fdd\u5b58\u6570\u636e","title":"1.2 \u6570\u636e\u722c\u53d6"}]}