{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230\u6211\u7684Python\u5b66\u4e60\u7a7a\u95f4 \u00b6 \u672c\u7f51\u7ad9\u4e3b\u8981\u7528\u6765\u8bb0\u5f55\u4e2a\u4eba\u5bf9python\u7684\u5b66\u4e60\uff0c\u65b9\u4fbf\u5728\u4ee5\u540e\u7684\u5de5\u4f5c\u3001\u5b66\u4e60\u4e2d\u67e5\u8be2\u3002","title":"\u7b80\u4ecb"},{"location":"#python","text":"\u672c\u7f51\u7ad9\u4e3b\u8981\u7528\u6765\u8bb0\u5f55\u4e2a\u4eba\u5bf9python\u7684\u5b66\u4e60\uff0c\u65b9\u4fbf\u5728\u4ee5\u540e\u7684\u5de5\u4f5c\u3001\u5b66\u4e60\u4e2d\u67e5\u8be2\u3002","title":"\u6b22\u8fce\u6765\u5230\u6211\u7684Python\u5b66\u4e60\u7a7a\u95f4"},{"location":"python/","text":"\u6574\u7406\u4e2d \u00b6","title":"Python \u57fa\u7840"},{"location":"python/#_1","text":"","title":"\u6574\u7406\u4e2d"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/","text":"\u66f4\u65b0\u4e2d \u00b6","title":"\u6570\u636e\u53ef\u89c6\u5316"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/#_1","text":"","title":"\u66f4\u65b0\u4e2d"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/","text":"\u66f4\u65b0\u4e2d \u00b6","title":"\u6570\u636e\u6574\u7406"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/#_1","text":"","title":"\u66f4\u65b0\u4e2d"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/","text":"\u6570\u636e\u6e05\u6d17 \u00b6 \u6570\u636e\u5904\u7406\u662f\u6307\u5c06\u6536\u96c6\u5230\u7684\u6570\u636e\u8fdb\u884c\u52a0\u5de5\u3001\u6574\u7406\uff0c\u5f62\u6210\u9002\u5408\u6570\u636e\u5206\u6790\u7684\u6837\u5f0f\uff1b\u53ef\u4ee5\u5c06\u6570\u636e\u5904\u7406\u7b80\u5355\u7684\u5206\u4e3a\u6570\u636e\u7684\u6e05\u6d17\u3001\u6570\u636e\u7684\u6574\u7406\uff1b\u6570\u636e\u6e05\u6d17\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u4e09\u4e2a\u8fc7\u7a0b\uff1a \u5904\u7406\u7f3a\u5931\u503c \u5904\u7406\u91cd\u590d\u503c \u5904\u7406\u5f02\u5e38\u503c \u4e3b\u8981\u7528\u5230\u7684\u662f pandas \u5e93\u3002 \u5904\u7406\u7f3a\u5931\u503c \u00b6 \u67e5\u770b\u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f import pandas as pd data = pd . read_excel ( 'path_to_file.xls\u6216.xlsx' , sheet_name = 'Sheet1' ) # \u4ee5\u8bfb\u53d6\u7684excel\u6587\u4ef6\u4e3a\u4f8b data . info () # \u5176\u4e2d\u4e3b\u8981\u5305\u62ec\uff1a\u6574\u4f53\u6570\u636e\u7684\u603b\u884c\u6570\u3001\u5404\u5217\u6570\u636e\u7c7b\u578b\u7edf\u8ba1\u3001\u5404\u5217\u7684\u5217\u540d\u3001\u5404\u5217\u603b\u5171\u6709\u591a\u5c11\u975e\u7a7a\u6570\u636e\u3001\u8868\u683c\u5360\u7528\u7684\u7cfb\u7edf\u7a7a\u95f4\u7b49 \u67e5\u770b\u524d\u51e0\u884c\u53ef\u4ee5\u4f7f\u7528 df.head(\u6570\u5b57) ,\u67e5\u770b\u540e\u51e0\u884c\u4f7f\u7528 df.tail(\u6570\u5b57) \u67e5\u627e\u7f3a\u5931\u503c \u5728 pandas \u91cc\uff0c\u53ef\u4ee5\u4f7f\u7528 isna() \u548c notna() \u65b9\u6cd5\u6765\u67e5\u627e DataFrame\u5bf9\u8c61 \u4ee5\u53ca Series\u5bf9\u8c61 \u4e2d\u7684\u7f3a\u5931\u503c\u3002 df.isna() \u8fd4\u56de\u7684\u662fDATa Frame\u5bf9\u8c61\uff0c Series.isna() \u8fd4\u56de\u7684\u662fSeries\u5bf9\u8c61\u3002\u8fd4\u56de\u5bf9\u8c61\u7684\u5185\u5bb9\u662f\u5e03\u5c14\u503c\uff0c\u7f3a\u5931\u6570\u636e\u4f1a\u7528 True \u6765\u8868\u793a\uff0c False \u4ee3\u8868\u6570\u636e\u4e0d\u7f3a\u5931\u3002 \u5220\u9664\u7f3a\u5931\u503c \u53ef\u4ee5\u4f7f\u7528 dropna() \u65b9\u6cd5\u76f4\u63a5\u5220\u9664 DataFrame \u5bf9\u8c61\u548c Series \u5bf9\u8c61\u4e2d\u542b\u6709\u7f3a\u5931\u503c\u7684\u6570\u636e\uff1b\u53ea\u8981\u6267\u884c df.dropna() \u8fd9\u4e00\u4ee3\u7801\u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5c06 DataFrame \u5bf9\u8c61\u4e2d\u5305\u542b\u7f3a\u5931\u503c\u7684\u6bcf\u4e00\u884c\u5168\u90e8\u5220\u6389\u3002 DataFrame . dropna ( axis = 0 , how = 'any' , thresh = None , subset = None , inplace = False ) # axis: 0/'index'\uff1a\u5220\u9664\u5305\u542b\u7f3a\u5931\u503c\u7684\u884c, 1/'columns'\uff1a\u5220\u9664\u5305\u542b\u7f3a\u5931\u503c\u7684\u5217 ;\u9ed8\u8ba4\u503c\u4e3a 0 # how: 'any': \u5982\u679c\u5b58\u5728\u4efb\u4f55NA\u503c\uff0c\u5219\u5220\u9664\u8be5\u884c\u6216\u5217; 'all': \u5982\u679c\u6240\u6709\u503c\u5747\u4e3aNA\uff0c\u5219\u5220\u9664\u8be5\u884c\u6216\u5217;\u9ed8\u8ba4\u503c\u662f'any' # thresh: int, optional Require that many non-NA values\u3002\u8981\u4fdd\u7559\u7684\u975eNA\u4e2a\u6570 # subset: \u5220\u9664\u6307\u5b9a\u5217\u7684\u7f3a\u5931\u6570\u636e['\u5217\u540d'] # inplace: \u662f\u5426\u5c31\u5730\u4fee\u6539 Series . dropna ( axis = 0 , inplace = False , how = None ) # axis: \u53ea\u6709\u4e00\u4e2a\u503c0\u6216\u8005'index' # inplace: \u662f\u5426\u5c31\u5730\u4fee\u6539 # how: str, optional,Not in use. Kept for compatibility. \u586b\u5145\u7f3a\u5931\u6570\u636e DataFrame . fillna ( value = None , method = None , axis = None , inplace = False , limit = None , downcast = None ) Series . fillna ( value = None , method = None , axis = None , inplace = False , limit = None , downcast = None ) # value: scalar, dict, Series, or DataFrame # method: {\u2018backfill\u2019, \u2018bfill\u2019, \u2018pad\u2019, \u2018ffill\u2019, None}, default None # axis: DataFrame-{0 or \u2018index\u2019, 1 or \u2018columns\u2019};Series-0 or \u2018index\u2019 # inplace: bool, default False # limit: int, default None\u586b\u5145\u6570\u91cf # downcast: dict, default is None \u5904\u7406\u91cd\u590d\u503c \u00b6 \u67e5\u627e\u91cd\u590d\u503c \u53ef\u4ee5\u4f7f\u7528 df.duplicated() \u67e5\u770bDataFrame\u5bf9\u8c61\u7684\u91cd\u590d\u6570\u636e\uff0c\u8fd4\u56de\u4e00\u4e2aSeries\u5bf9\u8c61\uff0c\u91cd\u590d\u4e3aTrue\uff0c\u4e0d\u91cd\u590d\u4e3aFalse\uff1b\u4f7f\u7528 Series.duplicated() \u67e5\u770bSeries\u7684\u91cd\u590d\u6570\u636e\uff0c\u8fd4\u56de\u4e00\u4e2aSeries\u5bf9\u8c61\uff0c\u91cd\u590d\u4e3aTrue\uff0c\u4e0d\u91cd\u590d\u4e3aFalse\u3002 \u4e5f\u53ef\u4ee5\u901a\u8fc7 df[df.duplicated()] \u67e5\u770b\u91cd\u590d\u884c\u7684\u6570\u636e\u3002 DataFrame . duplicated ( subset = None , keep = 'first' ) # subset: \u6307\u5b9a\u5217\uff0c\u9ed8\u8ba4\u6240\u6709\u5217 # keep: {\u2018first\u2019, \u2018last\u2019, False}, default \u2018first\u2019,\u4fdd\u7559\u7b2c\u4e00\u4e2a\u8fd8\u662f\u6700\u540e\u4e00\u4e2a Series . duplicated ( keep = 'first' ) \u5220\u9664\u91cd\u590d\u503c \u53ef\u4ee5\u4f7f\u7528 df.drop_duplicates() \u5220\u9664DataFrame \u5bf9\u8c61\u4e2d\u91cd\u590d\u51fa\u73b0\u7684\u6574\u884c\u6570\u636e\uff1b\u4f7f\u7528 Series.drop_duplicates() \u5220\u9664Series \u5bf9\u8c61\u4e2d\u91cd\u590d\u51fa\u73b0\u7684\u6574\u884c\u6570\u636e\u3002 DataFrame . drop_duplicates ( subset = None , keep = 'first' , inplace = False , ignore_index = False ) # ignore_index: bool, default False,If True, the resulting axis will be labeled 0, 1, \u2026, n - 1 Series . drop_duplicates ( keep = 'first' , inplace = False ) \u5904\u7406\u5f02\u5e38\u503c \u00b6 \u68c0\u67e5\u3001\u7b5b\u9664\u5f02\u5e38\u503c \u4f7f\u7528 df.describe() \u53ef\u4ee5\u67e5\u770bDataFrame\u5bf9\u8c61\u7684\u63cf\u8ff0\u6027\u7edf\u8ba1\u4fe1\u606f\uff0c\u7136\u540e\u6839\u636e\u6700\u5927\u3001\u6700\u5c0f\u503c\u3001\u5e73\u5747\u6570\u3001\u4e2d\u4f4d\u6570\u7b49\u4fe1\u606f\uff0c\u5229\u7528\u5e03\u5c14\u7d22\u5f15\u7684\u65b9\u5f0f\u7b5b\u9664\u5f02\u5e38\u503c\u3002\u6bd4\u5982\u6709\u4e2a\u8bb0\u5f55\u852c\u83dc\u4ef7\u683c\u548c\u9500\u91cf\u7684\u6570\u636edata\uff0c\u8981\u7b5b\u9664\u6570\u636e\u4e2d\u4ef7\u683c\u5c0f\u4e8e0\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\uff1a data = data [ data [ '\u5355\u4ef7' ] > 0 ] \u6848\u4f8b \u00b6 \u8fd8\u662f\u4ee52016\u5e74\u4e16\u754c\u5404\u56fd\u4e8c\u6c27\u5316\u78b3\u6392\u653e\u91cf\uff082016world-co2.xls\uff09\u7684\u6570\u636e\u4e3a\u4f8b\u3002 \u6570\u636e\u7684\u8bfb\u53d6 import pandas as pd # \u8bfb\u53d62016\u5e74\u7684\u6570\u636e data = pd . read_excel ( r 'C:\\Users\\Administrator\\Desktop\\2016world-co2.xls' , sheet_name = 'Data' , header = 3 ) \u7f3a\u5931\u503c\u5904\u7406 \u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f data.info() \u53ef\u4ee5\u770b\u51fa\u5171\u6709264\u884c\u6570\u636e\uff0c\u9664\u5217'2016'\u5916\uff0c\u5176\u4ed6\u6570\u636e\u4e0d\u5b58\u5728\u7f3a\u5931\u3002 \u5220\u9664\u7f3a\u5931\u503c\uff08\u73b0\u5b9e\u4e2d\uff0c\u8981\u6839\u636e\u4e1a\u52a1\u6216\u5176\u4ed6\u8981\u6c42\u6765\u51b3\u5b9a\u662f\u5220\u9664\uff0c\u8fd8\u662f\u586b\u5145\u6570\u636e\uff09 data.dropna(inplace=True) \u5e76\u67e5\u770b\u3002 \u91cd\u590d\u6570\u636e\u5904\u7406 data.duplicated() \u53d1\u73b0\u5e76\u65e0\u91cd\u590d\u6570\u636e\u3002 \u5f02\u5e38\u6570\u636e\u5904\u7406 data.describe() \u73b0\u5b9e\u4e2d\uff0c\u8981\u6839\u636e\u4e1a\u52a1\u6216\u5176\u4ed6\u8981\u6c42\u6765\u51b3\u5b9a\u662f\u5426\u662f\u5f02\u5e38\u503c\u3002","title":"\u6570\u636e\u6e05\u6d17"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/#_1","text":"\u6570\u636e\u5904\u7406\u662f\u6307\u5c06\u6536\u96c6\u5230\u7684\u6570\u636e\u8fdb\u884c\u52a0\u5de5\u3001\u6574\u7406\uff0c\u5f62\u6210\u9002\u5408\u6570\u636e\u5206\u6790\u7684\u6837\u5f0f\uff1b\u53ef\u4ee5\u5c06\u6570\u636e\u5904\u7406\u7b80\u5355\u7684\u5206\u4e3a\u6570\u636e\u7684\u6e05\u6d17\u3001\u6570\u636e\u7684\u6574\u7406\uff1b\u6570\u636e\u6e05\u6d17\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u4e09\u4e2a\u8fc7\u7a0b\uff1a \u5904\u7406\u7f3a\u5931\u503c \u5904\u7406\u91cd\u590d\u503c \u5904\u7406\u5f02\u5e38\u503c \u4e3b\u8981\u7528\u5230\u7684\u662f pandas \u5e93\u3002","title":"\u6570\u636e\u6e05\u6d17"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/#_2","text":"\u67e5\u770b\u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f import pandas as pd data = pd . read_excel ( 'path_to_file.xls\u6216.xlsx' , sheet_name = 'Sheet1' ) # \u4ee5\u8bfb\u53d6\u7684excel\u6587\u4ef6\u4e3a\u4f8b data . info () # \u5176\u4e2d\u4e3b\u8981\u5305\u62ec\uff1a\u6574\u4f53\u6570\u636e\u7684\u603b\u884c\u6570\u3001\u5404\u5217\u6570\u636e\u7c7b\u578b\u7edf\u8ba1\u3001\u5404\u5217\u7684\u5217\u540d\u3001\u5404\u5217\u603b\u5171\u6709\u591a\u5c11\u975e\u7a7a\u6570\u636e\u3001\u8868\u683c\u5360\u7528\u7684\u7cfb\u7edf\u7a7a\u95f4\u7b49 \u67e5\u770b\u524d\u51e0\u884c\u53ef\u4ee5\u4f7f\u7528 df.head(\u6570\u5b57) ,\u67e5\u770b\u540e\u51e0\u884c\u4f7f\u7528 df.tail(\u6570\u5b57) \u67e5\u627e\u7f3a\u5931\u503c \u5728 pandas \u91cc\uff0c\u53ef\u4ee5\u4f7f\u7528 isna() \u548c notna() \u65b9\u6cd5\u6765\u67e5\u627e DataFrame\u5bf9\u8c61 \u4ee5\u53ca Series\u5bf9\u8c61 \u4e2d\u7684\u7f3a\u5931\u503c\u3002 df.isna() \u8fd4\u56de\u7684\u662fDATa Frame\u5bf9\u8c61\uff0c Series.isna() \u8fd4\u56de\u7684\u662fSeries\u5bf9\u8c61\u3002\u8fd4\u56de\u5bf9\u8c61\u7684\u5185\u5bb9\u662f\u5e03\u5c14\u503c\uff0c\u7f3a\u5931\u6570\u636e\u4f1a\u7528 True \u6765\u8868\u793a\uff0c False \u4ee3\u8868\u6570\u636e\u4e0d\u7f3a\u5931\u3002 \u5220\u9664\u7f3a\u5931\u503c \u53ef\u4ee5\u4f7f\u7528 dropna() \u65b9\u6cd5\u76f4\u63a5\u5220\u9664 DataFrame \u5bf9\u8c61\u548c Series \u5bf9\u8c61\u4e2d\u542b\u6709\u7f3a\u5931\u503c\u7684\u6570\u636e\uff1b\u53ea\u8981\u6267\u884c df.dropna() \u8fd9\u4e00\u4ee3\u7801\u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5c06 DataFrame \u5bf9\u8c61\u4e2d\u5305\u542b\u7f3a\u5931\u503c\u7684\u6bcf\u4e00\u884c\u5168\u90e8\u5220\u6389\u3002 DataFrame . dropna ( axis = 0 , how = 'any' , thresh = None , subset = None , inplace = False ) # axis: 0/'index'\uff1a\u5220\u9664\u5305\u542b\u7f3a\u5931\u503c\u7684\u884c, 1/'columns'\uff1a\u5220\u9664\u5305\u542b\u7f3a\u5931\u503c\u7684\u5217 ;\u9ed8\u8ba4\u503c\u4e3a 0 # how: 'any': \u5982\u679c\u5b58\u5728\u4efb\u4f55NA\u503c\uff0c\u5219\u5220\u9664\u8be5\u884c\u6216\u5217; 'all': \u5982\u679c\u6240\u6709\u503c\u5747\u4e3aNA\uff0c\u5219\u5220\u9664\u8be5\u884c\u6216\u5217;\u9ed8\u8ba4\u503c\u662f'any' # thresh: int, optional Require that many non-NA values\u3002\u8981\u4fdd\u7559\u7684\u975eNA\u4e2a\u6570 # subset: \u5220\u9664\u6307\u5b9a\u5217\u7684\u7f3a\u5931\u6570\u636e['\u5217\u540d'] # inplace: \u662f\u5426\u5c31\u5730\u4fee\u6539 Series . dropna ( axis = 0 , inplace = False , how = None ) # axis: \u53ea\u6709\u4e00\u4e2a\u503c0\u6216\u8005'index' # inplace: \u662f\u5426\u5c31\u5730\u4fee\u6539 # how: str, optional,Not in use. Kept for compatibility. \u586b\u5145\u7f3a\u5931\u6570\u636e DataFrame . fillna ( value = None , method = None , axis = None , inplace = False , limit = None , downcast = None ) Series . fillna ( value = None , method = None , axis = None , inplace = False , limit = None , downcast = None ) # value: scalar, dict, Series, or DataFrame # method: {\u2018backfill\u2019, \u2018bfill\u2019, \u2018pad\u2019, \u2018ffill\u2019, None}, default None # axis: DataFrame-{0 or \u2018index\u2019, 1 or \u2018columns\u2019};Series-0 or \u2018index\u2019 # inplace: bool, default False # limit: int, default None\u586b\u5145\u6570\u91cf # downcast: dict, default is None","title":"\u5904\u7406\u7f3a\u5931\u503c"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/#_3","text":"\u67e5\u627e\u91cd\u590d\u503c \u53ef\u4ee5\u4f7f\u7528 df.duplicated() \u67e5\u770bDataFrame\u5bf9\u8c61\u7684\u91cd\u590d\u6570\u636e\uff0c\u8fd4\u56de\u4e00\u4e2aSeries\u5bf9\u8c61\uff0c\u91cd\u590d\u4e3aTrue\uff0c\u4e0d\u91cd\u590d\u4e3aFalse\uff1b\u4f7f\u7528 Series.duplicated() \u67e5\u770bSeries\u7684\u91cd\u590d\u6570\u636e\uff0c\u8fd4\u56de\u4e00\u4e2aSeries\u5bf9\u8c61\uff0c\u91cd\u590d\u4e3aTrue\uff0c\u4e0d\u91cd\u590d\u4e3aFalse\u3002 \u4e5f\u53ef\u4ee5\u901a\u8fc7 df[df.duplicated()] \u67e5\u770b\u91cd\u590d\u884c\u7684\u6570\u636e\u3002 DataFrame . duplicated ( subset = None , keep = 'first' ) # subset: \u6307\u5b9a\u5217\uff0c\u9ed8\u8ba4\u6240\u6709\u5217 # keep: {\u2018first\u2019, \u2018last\u2019, False}, default \u2018first\u2019,\u4fdd\u7559\u7b2c\u4e00\u4e2a\u8fd8\u662f\u6700\u540e\u4e00\u4e2a Series . duplicated ( keep = 'first' ) \u5220\u9664\u91cd\u590d\u503c \u53ef\u4ee5\u4f7f\u7528 df.drop_duplicates() \u5220\u9664DataFrame \u5bf9\u8c61\u4e2d\u91cd\u590d\u51fa\u73b0\u7684\u6574\u884c\u6570\u636e\uff1b\u4f7f\u7528 Series.drop_duplicates() \u5220\u9664Series \u5bf9\u8c61\u4e2d\u91cd\u590d\u51fa\u73b0\u7684\u6574\u884c\u6570\u636e\u3002 DataFrame . drop_duplicates ( subset = None , keep = 'first' , inplace = False , ignore_index = False ) # ignore_index: bool, default False,If True, the resulting axis will be labeled 0, 1, \u2026, n - 1 Series . drop_duplicates ( keep = 'first' , inplace = False )","title":"\u5904\u7406\u91cd\u590d\u503c"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/#_4","text":"\u68c0\u67e5\u3001\u7b5b\u9664\u5f02\u5e38\u503c \u4f7f\u7528 df.describe() \u53ef\u4ee5\u67e5\u770bDataFrame\u5bf9\u8c61\u7684\u63cf\u8ff0\u6027\u7edf\u8ba1\u4fe1\u606f\uff0c\u7136\u540e\u6839\u636e\u6700\u5927\u3001\u6700\u5c0f\u503c\u3001\u5e73\u5747\u6570\u3001\u4e2d\u4f4d\u6570\u7b49\u4fe1\u606f\uff0c\u5229\u7528\u5e03\u5c14\u7d22\u5f15\u7684\u65b9\u5f0f\u7b5b\u9664\u5f02\u5e38\u503c\u3002\u6bd4\u5982\u6709\u4e2a\u8bb0\u5f55\u852c\u83dc\u4ef7\u683c\u548c\u9500\u91cf\u7684\u6570\u636edata\uff0c\u8981\u7b5b\u9664\u6570\u636e\u4e2d\u4ef7\u683c\u5c0f\u4e8e0\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\uff1a data = data [ data [ '\u5355\u4ef7' ] > 0 ]","title":"\u5904\u7406\u5f02\u5e38\u503c"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/#_5","text":"\u8fd8\u662f\u4ee52016\u5e74\u4e16\u754c\u5404\u56fd\u4e8c\u6c27\u5316\u78b3\u6392\u653e\u91cf\uff082016world-co2.xls\uff09\u7684\u6570\u636e\u4e3a\u4f8b\u3002 \u6570\u636e\u7684\u8bfb\u53d6 import pandas as pd # \u8bfb\u53d62016\u5e74\u7684\u6570\u636e data = pd . read_excel ( r 'C:\\Users\\Administrator\\Desktop\\2016world-co2.xls' , sheet_name = 'Data' , header = 3 ) \u7f3a\u5931\u503c\u5904\u7406 \u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f data.info() \u53ef\u4ee5\u770b\u51fa\u5171\u6709264\u884c\u6570\u636e\uff0c\u9664\u5217'2016'\u5916\uff0c\u5176\u4ed6\u6570\u636e\u4e0d\u5b58\u5728\u7f3a\u5931\u3002 \u5220\u9664\u7f3a\u5931\u503c\uff08\u73b0\u5b9e\u4e2d\uff0c\u8981\u6839\u636e\u4e1a\u52a1\u6216\u5176\u4ed6\u8981\u6c42\u6765\u51b3\u5b9a\u662f\u5220\u9664\uff0c\u8fd8\u662f\u586b\u5145\u6570\u636e\uff09 data.dropna(inplace=True) \u5e76\u67e5\u770b\u3002 \u91cd\u590d\u6570\u636e\u5904\u7406 data.duplicated() \u53d1\u73b0\u5e76\u65e0\u91cd\u590d\u6570\u636e\u3002 \u5f02\u5e38\u6570\u636e\u5904\u7406 data.describe() \u73b0\u5b9e\u4e2d\uff0c\u8981\u6839\u636e\u4e1a\u52a1\u6216\u5176\u4ed6\u8981\u6c42\u6765\u51b3\u5b9a\u662f\u5426\u662f\u5f02\u5e38\u503c\u3002","title":"\u6848\u4f8b"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/","text":"\u6570\u636e\u8bfb\u53d6\u4e0e\u4fdd\u5b58 \u00b6 \u4e3b\u8981\u7528\u5230\u7684\u662f pandas\u5e93 \uff0c\u53ef\u4ee5\u901a\u8fc7 pip install pandas \u8fdb\u884c\u5b89\u88c5\uff1b\u4f7f\u7528\u65f6\u901a\u8fc7 import pandas as pd \u5bfc\u5165\uff08\u4ee5pd\u4f5c\u4e3a\u522b\u540d\uff09\uff1b pandas \u80fd\u8bfb\u53d6\u7684\u6587\u4ef6\u7c7b\u578b\u5f88\u591a\uff0c\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u5bf9 csv\u3001excel \u6587\u4ef6\u7684\u8bfb\u53d6\u548c\u4fdd\u5b58\uff1b\u66f4\u591a\u529f\u80fd\u53ef\u67e5\u9605 \u5b98\u65b9\u6587\u6863 \u3002 \u8bfb\u53d6\u4e0e\u4fdd\u5b58-excel\u6587\u4ef6 \u00b6 \u9700\u8981\u901a\u8fc7pip\u547d\u4ee4\u5b89\u88c5 openpyxl \u4e0e xlrd \uff1a pip install openpyxl pip install xlrd \u8bfb\u53d6excel\u6587\u4ef6 read_excel() \u00b6 pandas . read_excel ( io , sheet_name = 0 , header = 0 , names = None , index_col = None , usecols = None , squeeze = False , dtype = None , engine = None , converters = None , true_values = None , false_values = None , skiprows = None , nrows = None , na_values = None , keep_default_na = True , na_filter = True , verbose = False , parse_dates = False , date_parser = None , thousands = None , comment = None , skipfooter = 0 , convert_float = True , mangle_dupe_cols = True , storage_options = None ) \u5e38\u7528\u53c2\u6570\u4ecb\u7ecd\uff1a \u53c2\u6570 \u63cf\u8ff0 io str, bytes, ExcelFile, xlrd.Book, path object, or file-like object \u4e00\u822c\u4e3a\u6587\u4ef6\u8def\u5f84\u6216ExcelFile\u7c7b sheet_name str\uff08\u8868\u540d\uff09, int\uff08\u4ece0\u5f00\u59cb\u7b2c\u51e0\u4e2a\u8868\uff09, list\uff08\u591a\u4e2a\u5de5\u4f5c\u8868\uff09, or None\uff08\u6240\u6709\u5de5\u4f5c\u8868\uff09, default 0 header int, list of int, default 0 \u662f\u5426\u5c06\u7b2c\u4e00\u884c\u5f53\u4f5c\u5217\u540d index_col int, list of int, default None \u7d22\u5f15 na_values scalar, str, list-like, or dict, default None parse_dates bool, list-like, or dict, default False \u89e3\u6790\u4e3a\u65f6\u95f4\uff1aparse_dates=['\u5217\u540d'] \u57fa\u7840\u7528\u6cd5\uff1a import pandas as pd data = pd . read_excel ( 'path_to_file.xls\u6216.xlsx' , sheet_name = 'Sheet1' ) # \u6587\u4ef6\u8def\u5f84\u548csheet_name\u6839\u636e\u81ea\u5df1\u6587\u4ef6\u5185\u5bb9\u4fee\u6539\uff08\u4e0b\u540c\uff09 Excelfile\u7c7b\uff1a \u8bfb\u53d6\u4e00\u4e2aexcel\u6587\u4ef6\u7684\u591a\u5f20\u5de5\u4f5c\u8868\u65f6\uff0c\u5229\u7528\u8be5\u7c7b\u80fd\u591f\u4e00\u6b21\u8bfb\u53d6\u5230\u5185\u5b58\u3002 xlsx = pd . ExcelFile ( \"path_to_file.xls\u6216.xlsx\" ) df = pd . read_excel ( xlsx , \"Sheet1\" ) \u6216\u8005 with pd . ExcelFile ( \"path_to_file.xls\" ) as xls : df1 = pd . read_excel ( xls , \"Sheet1\" ) df2 = pd . read_excel ( xls , \"Sheet2\" ) \u5bf9\u4e0d\u540c\u5de5\u4f5c\u8868\u4f20\u4e0d\u540c\u53c2\u6570 data = {} # For when Sheet1's format differs from Sheet2 with pd . ExcelFile ( \"path_to_file.xls\" ) as xls : data [ \"Sheet1\" ] = pd . read_excel ( xls , \"Sheet1\" , index_col = None , na_values = [ \"NA\" ]) data [ \"Sheet2\" ] = pd . read_excel ( xls , \"Sheet2\" , index_col = 1 ) \u5982\u679c\u4e0d\u540c\u5de5\u4f5c\u8868\u4f20\u7684\u53c2\u6570\u76f8\u540c\uff0cExcelFile\u65b9\u5f0f\u76f8\u5f53\u4e8eread_excel\u51fd\u6570 data = {} with pd . ExcelFile ( \"path_to_file.xls\" ) as xls : data [ \"Sheet1\" ] = pd . read_excel ( xls , \"Sheet1\" , index_col = None , na_values = [ \"NA\" ]) data [ \"Sheet2\" ] = pd . read_excel ( xls , \"Sheet2\" , index_col = None , na_values = [ \"NA\" ]) # equivalent using the read_excel function data = pd . read_excel ( \"path_to_file.xls\" , [ \"Sheet1\" , \"Sheet2\" ], index_col = None , na_values = [ \"NA\" ]) \u89e3\u6790\u65e5\u671f\uff1a pd . read_excel ( \"path_to_file.xls\" , \"Sheet1\" , parse_dates = [ \"date_strings\" ]) \u6307\u5b9a\u7d22\u5f15\uff1a pd . read_excel ( \"path_to_file.xls\" , \"Sheet1\" , index_col = '\u5217\u540d' ) # index_col\u9ed8\u8ba4\u503c\u662fNone \u4fdd\u5b58\u5230excel\u6587\u4ef6 to_excel() \u00b6 \u8981\u5c06 DataFrame \u5bf9\u8c61\u5199\u5165Excel\u6587\u4ef6\u7684\u5de5\u4f5c\u8868\uff0c\u53ef\u4ee5\u4f7f\u7528 to_excel \u5b9e\u4f8b\u65b9\u6cd5\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u662fexcel\u6587\u4ef6\u7684\u8def\u5f84\u540d\u79f0\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u5199\u5165excel\u7684\u5de5\u8d44\u8868\u540d\u79f0\u3002\u4f8b\u5982\uff1a df . to_excel ( 'path_to_file.xlsx' , sheet_name = 'Sheet1' ) \u66f4\u591a\u53c2\u6570\u4ecb\u7ecd\uff0c\u8bf7\u67e5\u9605 pandas.read_excel \u3002 \u8bfb\u53d6\u4e0e\u4fdd\u5b58-csv\u6587\u4ef6 \u00b6 \u8bfb\u53d6csv\u6587\u4ef6 read_csv() \u00b6 pandas . read_csv ( filepath_or_buffer , sep =< object object > , delimiter = None , header = 'infer' , names = None , index_col = None , usecols = None , squeeze = False , prefix = None , mangle_dupe_cols = True , dtype = None , engine = None , converters = None , true_values = None , false_values = None , skipinitialspace = False , skiprows = None , skipfooter = 0 , nrows = None , na_values = None , keep_default_na = True , na_filter = True , verbose = False , skip_blank_lines = True , parse_dates = False , infer_datetime_format = False , keep_date_col = False , date_parser = None , dayfirst = False , cache_dates = True , iterator = False , chunksize = None , compression = 'infer' , thousands = None , decimal = '.' , lineterminator = None , quotechar = '\"' , quoting = 0 , doublequote = True , escapechar = None , comment = None , encoding = None , dialect = None , error_bad_lines = True , warn_bad_lines = True , delim_whitespace = False , low_memory = True , memory_map = False , float_precision = None , storage_options = None ) \u53ef\u89c1 read_csv \u7684\u53c2\u6570\u8f83\u591a\uff0c\u4f7f\u7528\u65f6\u6839\u636e\u6587\u4ef6\u5185\u5bb9\u8fdb\u884c\u9009\u62e9\uff1b\u5e38\u7528\u7684\u6709\u4ee5\u4e0b\u51e0\u4e2a\u53c2\u6570\uff1a \u53c2\u6570 \u63cf\u8ff0 filepath_or_buffer str, path object or file-like object sep str, default \u2018,\u2019\u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u662f\u9017\u53f7 header int, list of int, default \u2018infer\u2019 \u8868\u5934 index_col int, str, sequence of int / str, or False, default None \u7d22\u5f15 encoding str, optional \u89e3\u7801 parse_dates bool or list of int or names or list of lists or dict, default False \u57fa\u7840\u7528\u6cd5\uff1a pd . read_csv ( '\u6587\u4ef6\u8def\u5f84' , sep = '\u5206\u9694\u7b26' , encoding = '\u89e3\u7801\u65b9\u5f0f' ) \u4fdd\u5b58\u5230csv\u6587\u4ef6 to_csv() \u00b6 to_csv() \u7684\u53ef\u9009\u53c2\u6570\u4e5f\u8f83\u591a\uff0c\u5e38\u7528\u7684\u53c2\u6570\u6709\uff1a \u53c2\u6570 \u63cf\u8ff0 path_or_buf \u4fdd\u5b58\u8def\u5f84 sep \u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u662f\u2018,\u2019 na_rep \u7f3a\u5931\u503c\uff0c\u9ed8\u8ba4\u662f\u7a7a\u683c header \u662f\u5426\u5e26\u8868\u5934\uff0c\u9ed8\u8ba4\u662fTrue encoding \u89e3\u7801\u65b9\u5f0f \u66f4\u591a\u53c2\u6570\u4ecb\u7ecd\uff0c\u8bf7\u67e5\u9605 pandas.read_csv \u6848\u4f8b \u00b6 \u8bfb\u53d6excel\u6570\u636e \u00b6 \u6570\u636e\u4e3a2016\u5e74\u4e16\u754c\u5404\u56fd\u4e8c\u6c27\u5316\u78b3\u6392\u653e\u91cf\uff082016world-co2.xls\uff09\uff0c\u6570\u636e\u6e90\u4e8e \u4e16\u754c\u94f6\u884c \u6587\u4ef6\u5b58\u653e\u5728 C:\\Users\\Administrator\\Desktop\\2016world-co2.xls ,\u5185\u5bb9\u5982\u4e0b\uff1a \u53ef\u4ee5\u53d1\u73b0Excel\u6587\u4ef6\u67093\u4e2a\u5de5\u4f5c\u8868\uff0c\u6211\u4eec\u9700\u8981\u7684\u6570\u636e\u5728Data\u5de5\u4f5c\u8868\u4e2d\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e0d\u4f20 sheet_name \u53c2\u6570\uff0c\u56e0\u4e3a\u9700\u8981\u7684\u6570\u636e\u5c31\u5728\u7b2c0\u4e2a\u5de5\u4f5c\u8868\u4e2d\uff09\uff0c\u53e6\u5916\u8868\u5934\u4e3a\u7b2c\u4e09\u884c\uff08\u4ece0\u5f00\u59cb\u7b97\uff09\uff1b\u4e3a\u6b64\u53ef\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8bfb\u53d6\u6570\u636e\uff1a import pandas as pd # \u8bfb\u53d62016\u5e74\u7684\u6570\u636e data = pd . read_excel ( r 'C:\\Users\\Administrator\\Desktop\\2016world-co2.xls' , sheet_name = 'Data' , header = 3 ) \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a \u4fdd\u5b58\u6570\u636e \u00b6 data . to_excel ( 'data.xlsx' , sheet_name = 'co2' ) # \u4fdd\u5b58\u5230\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e0b\uff0c\u6587\u4ef6\u540d\u4e3adata.xlsx\uff0c\u5de5\u4f5c\u8868\u540d\u4e3aco2","title":"\u6570\u636e\u8bfb\u53d6\u4e0e\u4fdd\u5b58"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#_1","text":"\u4e3b\u8981\u7528\u5230\u7684\u662f pandas\u5e93 \uff0c\u53ef\u4ee5\u901a\u8fc7 pip install pandas \u8fdb\u884c\u5b89\u88c5\uff1b\u4f7f\u7528\u65f6\u901a\u8fc7 import pandas as pd \u5bfc\u5165\uff08\u4ee5pd\u4f5c\u4e3a\u522b\u540d\uff09\uff1b pandas \u80fd\u8bfb\u53d6\u7684\u6587\u4ef6\u7c7b\u578b\u5f88\u591a\uff0c\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u5bf9 csv\u3001excel \u6587\u4ef6\u7684\u8bfb\u53d6\u548c\u4fdd\u5b58\uff1b\u66f4\u591a\u529f\u80fd\u53ef\u67e5\u9605 \u5b98\u65b9\u6587\u6863 \u3002","title":"\u6570\u636e\u8bfb\u53d6\u4e0e\u4fdd\u5b58"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#-excel","text":"\u9700\u8981\u901a\u8fc7pip\u547d\u4ee4\u5b89\u88c5 openpyxl \u4e0e xlrd \uff1a pip install openpyxl pip install xlrd","title":"\u8bfb\u53d6\u4e0e\u4fdd\u5b58-excel\u6587\u4ef6"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#excel-read_excel","text":"pandas . read_excel ( io , sheet_name = 0 , header = 0 , names = None , index_col = None , usecols = None , squeeze = False , dtype = None , engine = None , converters = None , true_values = None , false_values = None , skiprows = None , nrows = None , na_values = None , keep_default_na = True , na_filter = True , verbose = False , parse_dates = False , date_parser = None , thousands = None , comment = None , skipfooter = 0 , convert_float = True , mangle_dupe_cols = True , storage_options = None ) \u5e38\u7528\u53c2\u6570\u4ecb\u7ecd\uff1a \u53c2\u6570 \u63cf\u8ff0 io str, bytes, ExcelFile, xlrd.Book, path object, or file-like object \u4e00\u822c\u4e3a\u6587\u4ef6\u8def\u5f84\u6216ExcelFile\u7c7b sheet_name str\uff08\u8868\u540d\uff09, int\uff08\u4ece0\u5f00\u59cb\u7b2c\u51e0\u4e2a\u8868\uff09, list\uff08\u591a\u4e2a\u5de5\u4f5c\u8868\uff09, or None\uff08\u6240\u6709\u5de5\u4f5c\u8868\uff09, default 0 header int, list of int, default 0 \u662f\u5426\u5c06\u7b2c\u4e00\u884c\u5f53\u4f5c\u5217\u540d index_col int, list of int, default None \u7d22\u5f15 na_values scalar, str, list-like, or dict, default None parse_dates bool, list-like, or dict, default False \u89e3\u6790\u4e3a\u65f6\u95f4\uff1aparse_dates=['\u5217\u540d'] \u57fa\u7840\u7528\u6cd5\uff1a import pandas as pd data = pd . read_excel ( 'path_to_file.xls\u6216.xlsx' , sheet_name = 'Sheet1' ) # \u6587\u4ef6\u8def\u5f84\u548csheet_name\u6839\u636e\u81ea\u5df1\u6587\u4ef6\u5185\u5bb9\u4fee\u6539\uff08\u4e0b\u540c\uff09 Excelfile\u7c7b\uff1a \u8bfb\u53d6\u4e00\u4e2aexcel\u6587\u4ef6\u7684\u591a\u5f20\u5de5\u4f5c\u8868\u65f6\uff0c\u5229\u7528\u8be5\u7c7b\u80fd\u591f\u4e00\u6b21\u8bfb\u53d6\u5230\u5185\u5b58\u3002 xlsx = pd . ExcelFile ( \"path_to_file.xls\u6216.xlsx\" ) df = pd . read_excel ( xlsx , \"Sheet1\" ) \u6216\u8005 with pd . ExcelFile ( \"path_to_file.xls\" ) as xls : df1 = pd . read_excel ( xls , \"Sheet1\" ) df2 = pd . read_excel ( xls , \"Sheet2\" ) \u5bf9\u4e0d\u540c\u5de5\u4f5c\u8868\u4f20\u4e0d\u540c\u53c2\u6570 data = {} # For when Sheet1's format differs from Sheet2 with pd . ExcelFile ( \"path_to_file.xls\" ) as xls : data [ \"Sheet1\" ] = pd . read_excel ( xls , \"Sheet1\" , index_col = None , na_values = [ \"NA\" ]) data [ \"Sheet2\" ] = pd . read_excel ( xls , \"Sheet2\" , index_col = 1 ) \u5982\u679c\u4e0d\u540c\u5de5\u4f5c\u8868\u4f20\u7684\u53c2\u6570\u76f8\u540c\uff0cExcelFile\u65b9\u5f0f\u76f8\u5f53\u4e8eread_excel\u51fd\u6570 data = {} with pd . ExcelFile ( \"path_to_file.xls\" ) as xls : data [ \"Sheet1\" ] = pd . read_excel ( xls , \"Sheet1\" , index_col = None , na_values = [ \"NA\" ]) data [ \"Sheet2\" ] = pd . read_excel ( xls , \"Sheet2\" , index_col = None , na_values = [ \"NA\" ]) # equivalent using the read_excel function data = pd . read_excel ( \"path_to_file.xls\" , [ \"Sheet1\" , \"Sheet2\" ], index_col = None , na_values = [ \"NA\" ]) \u89e3\u6790\u65e5\u671f\uff1a pd . read_excel ( \"path_to_file.xls\" , \"Sheet1\" , parse_dates = [ \"date_strings\" ]) \u6307\u5b9a\u7d22\u5f15\uff1a pd . read_excel ( \"path_to_file.xls\" , \"Sheet1\" , index_col = '\u5217\u540d' ) # index_col\u9ed8\u8ba4\u503c\u662fNone","title":"\u8bfb\u53d6excel\u6587\u4ef6 read_excel()"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#excel-to_excel","text":"\u8981\u5c06 DataFrame \u5bf9\u8c61\u5199\u5165Excel\u6587\u4ef6\u7684\u5de5\u4f5c\u8868\uff0c\u53ef\u4ee5\u4f7f\u7528 to_excel \u5b9e\u4f8b\u65b9\u6cd5\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u662fexcel\u6587\u4ef6\u7684\u8def\u5f84\u540d\u79f0\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u5199\u5165excel\u7684\u5de5\u8d44\u8868\u540d\u79f0\u3002\u4f8b\u5982\uff1a df . to_excel ( 'path_to_file.xlsx' , sheet_name = 'Sheet1' ) \u66f4\u591a\u53c2\u6570\u4ecb\u7ecd\uff0c\u8bf7\u67e5\u9605 pandas.read_excel \u3002","title":"\u4fdd\u5b58\u5230excel\u6587\u4ef6 to_excel()"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#-csv","text":"","title":"\u8bfb\u53d6\u4e0e\u4fdd\u5b58-csv\u6587\u4ef6"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#csv-read_csv","text":"pandas . read_csv ( filepath_or_buffer , sep =< object object > , delimiter = None , header = 'infer' , names = None , index_col = None , usecols = None , squeeze = False , prefix = None , mangle_dupe_cols = True , dtype = None , engine = None , converters = None , true_values = None , false_values = None , skipinitialspace = False , skiprows = None , skipfooter = 0 , nrows = None , na_values = None , keep_default_na = True , na_filter = True , verbose = False , skip_blank_lines = True , parse_dates = False , infer_datetime_format = False , keep_date_col = False , date_parser = None , dayfirst = False , cache_dates = True , iterator = False , chunksize = None , compression = 'infer' , thousands = None , decimal = '.' , lineterminator = None , quotechar = '\"' , quoting = 0 , doublequote = True , escapechar = None , comment = None , encoding = None , dialect = None , error_bad_lines = True , warn_bad_lines = True , delim_whitespace = False , low_memory = True , memory_map = False , float_precision = None , storage_options = None ) \u53ef\u89c1 read_csv \u7684\u53c2\u6570\u8f83\u591a\uff0c\u4f7f\u7528\u65f6\u6839\u636e\u6587\u4ef6\u5185\u5bb9\u8fdb\u884c\u9009\u62e9\uff1b\u5e38\u7528\u7684\u6709\u4ee5\u4e0b\u51e0\u4e2a\u53c2\u6570\uff1a \u53c2\u6570 \u63cf\u8ff0 filepath_or_buffer str, path object or file-like object sep str, default \u2018,\u2019\u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u662f\u9017\u53f7 header int, list of int, default \u2018infer\u2019 \u8868\u5934 index_col int, str, sequence of int / str, or False, default None \u7d22\u5f15 encoding str, optional \u89e3\u7801 parse_dates bool or list of int or names or list of lists or dict, default False \u57fa\u7840\u7528\u6cd5\uff1a pd . read_csv ( '\u6587\u4ef6\u8def\u5f84' , sep = '\u5206\u9694\u7b26' , encoding = '\u89e3\u7801\u65b9\u5f0f' )","title":"\u8bfb\u53d6csv\u6587\u4ef6 read_csv()"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#csv-to_csv","text":"to_csv() \u7684\u53ef\u9009\u53c2\u6570\u4e5f\u8f83\u591a\uff0c\u5e38\u7528\u7684\u53c2\u6570\u6709\uff1a \u53c2\u6570 \u63cf\u8ff0 path_or_buf \u4fdd\u5b58\u8def\u5f84 sep \u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u662f\u2018,\u2019 na_rep \u7f3a\u5931\u503c\uff0c\u9ed8\u8ba4\u662f\u7a7a\u683c header \u662f\u5426\u5e26\u8868\u5934\uff0c\u9ed8\u8ba4\u662fTrue encoding \u89e3\u7801\u65b9\u5f0f \u66f4\u591a\u53c2\u6570\u4ecb\u7ecd\uff0c\u8bf7\u67e5\u9605 pandas.read_csv","title":"\u4fdd\u5b58\u5230csv\u6587\u4ef6 to_csv()"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#_2","text":"","title":"\u6848\u4f8b"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#excel","text":"\u6570\u636e\u4e3a2016\u5e74\u4e16\u754c\u5404\u56fd\u4e8c\u6c27\u5316\u78b3\u6392\u653e\u91cf\uff082016world-co2.xls\uff09\uff0c\u6570\u636e\u6e90\u4e8e \u4e16\u754c\u94f6\u884c \u6587\u4ef6\u5b58\u653e\u5728 C:\\Users\\Administrator\\Desktop\\2016world-co2.xls ,\u5185\u5bb9\u5982\u4e0b\uff1a \u53ef\u4ee5\u53d1\u73b0Excel\u6587\u4ef6\u67093\u4e2a\u5de5\u4f5c\u8868\uff0c\u6211\u4eec\u9700\u8981\u7684\u6570\u636e\u5728Data\u5de5\u4f5c\u8868\u4e2d\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e0d\u4f20 sheet_name \u53c2\u6570\uff0c\u56e0\u4e3a\u9700\u8981\u7684\u6570\u636e\u5c31\u5728\u7b2c0\u4e2a\u5de5\u4f5c\u8868\u4e2d\uff09\uff0c\u53e6\u5916\u8868\u5934\u4e3a\u7b2c\u4e09\u884c\uff08\u4ece0\u5f00\u59cb\u7b97\uff09\uff1b\u4e3a\u6b64\u53ef\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8bfb\u53d6\u6570\u636e\uff1a import pandas as pd # \u8bfb\u53d62016\u5e74\u7684\u6570\u636e data = pd . read_excel ( r 'C:\\Users\\Administrator\\Desktop\\2016world-co2.xls' , sheet_name = 'Data' , header = 3 ) \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a","title":"\u8bfb\u53d6excel\u6570\u636e"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#_3","text":"data . to_excel ( 'data.xlsx' , sheet_name = 'co2' ) # \u4fdd\u5b58\u5230\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e0b\uff0c\u6587\u4ef6\u540d\u4e3adata.xlsx\uff0c\u5de5\u4f5c\u8868\u540d\u4e3aco2","title":"\u4fdd\u5b58\u6570\u636e"}]}