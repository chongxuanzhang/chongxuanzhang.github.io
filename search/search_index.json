{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230\u6211\u7684Python\u5b66\u4e60\u7a7a\u95f4 \u00b6 \u672c\u7f51\u7ad9\u4e3b\u8981\u7528\u6765\u8bb0\u5f55\u4e2a\u4eba\u5bf9python\u7684\u5b66\u4e60\uff0c\u65b9\u4fbf\u5728\u4ee5\u540e\u7684\u5de5\u4f5c\u3001\u5b66\u4e60\u4e2d\u67e5\u8be2\u3002","title":"\u7b80\u4ecb"},{"location":"#python","text":"\u672c\u7f51\u7ad9\u4e3b\u8981\u7528\u6765\u8bb0\u5f55\u4e2a\u4eba\u5bf9python\u7684\u5b66\u4e60\uff0c\u65b9\u4fbf\u5728\u4ee5\u540e\u7684\u5de5\u4f5c\u3001\u5b66\u4e60\u4e2d\u67e5\u8be2\u3002","title":"\u6b22\u8fce\u6765\u5230\u6211\u7684Python\u5b66\u4e60\u7a7a\u95f4"},{"location":"python/","text":"\u6574\u7406\u4e2d \u00b6","title":"Python \u57fa\u7840"},{"location":"python/#_1","text":"","title":"\u6574\u7406\u4e2d"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/","text":"\u6570\u636e\u6574\u7406 \u00b6 \u6570\u636e\u6574\u7406\u662f\u5728\u6570\u636e\u6e05\u6d17\u7684\u57fa\u7840\u4e0a\uff0c\u8fdb\u4e00\u6b65\u5c06\u6570\u636e\u5904\u7406\u6210\u53ef\u4ee5\u5206\u6790\u6216\u53ef\u89c6\u5316\u7684\u6570\u636e\uff0c\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u4ee5\u4e0b\u53ea\u7b80\u5355\u7f57\u5217\u4e86\u4e00\u4e9b\u51fd\u6570\uff0c\u5e76\u5bf9\u5e38\u7528\u7684 groupby() \u548c to_datetime() \u51fd\u6570\u8fdb\u884c\u4e86\u4ecb\u7ecd\uff1b\u66f4\u591a\u51fd\u6570\u53ca\u4ecb\u7ecd\uff0c\u8bf7\u53c2\u9605 pandas\u5b98\u65b9\u6587\u6863 \u3002 \u6570\u636e\u5408\u5e76 concat() append() merge() join() compare() \u91cd\u5851\u548c\u900f\u89c6\u8868 pivot() stack() unstack() melt() pivot_table() crosstab() cut() get_dummies() factorize() \u65e5\u671f\u529f\u80fd to_datetime() \u5206\u7ec4 groupby() groupby() \u51fd\u6570 \u00b6 DataFrame DataFrame . groupby ( by = None , axis = 0 , level = None , as_index = True , sort = True , group_keys = True , squeeze =< object object > , observed = False , dropna = True ) # by: mapping, function, label, or list of labels # axis: {0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0 # level: int, level name, or sequence of such, default None # sort: bool, default True # group_keys: bool, default True # squeeze: bool, default False # observed: bool, default False # dropna: bool, default True Series Series . groupby ( by = None , axis = 0 , level = None , as_index = True , sort = True , group_keys = True , squeeze =< object object > , observed = False , dropna = True ) \u6570\u636e\u5206\u7ec4 \u00b6 pandas \u5bf9\u8c61\u53ef\u4ee5\u5728\u4efb\u4f55\u8f74\u4e0a\u62c6\u5206,\u5206\u7ec4\u7684\u62bd\u8c61\u5b9a\u4e49\u662f\u63d0\u4f9b\u6807\u7b7e\u5230\u5206\u7ec4\u540d\u79f0\u7684\u6620\u5c04\u3002 import pandas as pd import numpy as np df = pd . DataFrame ( [( \"bird\" , \"Falconiformes\" , 389.0 ), ( \"bird\" , \"Psittaciformes\" , 24.0 ), ( \"mammal\" , \"Carnivora\" , 80.2 ), ( \"mammal\" , \"Primates\" , np . nan ), ( \"mammal\" , \"Carnivora\" , 58 ),], index = [ \"falcon\" , \"parrot\" , \"lion\" , \"monkey\" , \"leopard\" ], columns = ( \"class\" , \"order\" , \"max_speed\" ),) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } class order max_speed falcon bird Falconiformes 389.0 parrot bird Psittaciformes 24.0 lion mammal Carnivora 80.2 monkey mammal Primates NaN leopard mammal Carnivora 58.0 grouped = df . groupby ( \"class\" ) # \u9ed8\u8ba4 axis = 0 ; df.groupby('A')\u53ea\u662f\u8bed\u6cd5\u7cd6df.groupby(df['A']) grouped = df . groupby ( \"order\" , axis = \"columns\" ) # axis = 1 \u6309\u5217 grouped = df . groupby ([ \"class\" , \"order\" ]) # \u6309\u591a\u5217\u5206\u7ec4 \u6392\u5e8f \u00b6 \u5728 groupby() \u8fc7\u7a0b\u4e2d\u662f\u9ed8\u8ba4\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u53c2\u6570 sort = False \u6765\u53d6\u6d88\u81ea\u52a8\u6392\u5e8f\u3002 df2 = pd . DataFrame ({ \"X\" : [ \"B\" , \"B\" , \"A\" , \"A\" ], \"Y\" : [ 1 , 2 , 3 , 4 ]}) df2 . groupby ([ \"X\" ]) . sum () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Y X A 7 B 3 df2 . groupby ([ \"X\" ], sort = False ) . sum () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Y X B 3 A 7 \u7f3a\u5931\u503c \u00b6 \u5728 groupby() \u8fc7\u7a0b\u4e2d\u662f\u9ed8\u8ba4\u5bf9NA\u8fdb\u884c\u5220\u9664\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u53c2\u6570 dropna = False \u6765\u53d6\u6d88\u3002 df_list = [[ 1 , 2 , 3 ], [ 1 , None , 4 ], [ 2 , 1 , 3 ], [ 1 , 2 , 2 ]] df_dropna = pd . DataFrame ( df_list , columns = [ \"a\" , \"b\" , \"c\" ]) df_dropna .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c 0 1 2.0 3 1 1 NaN 4 2 2 1.0 3 3 1 2.0 2 df_dropna . groupby ( by = [ \"b\" ], dropna = True ) . sum () # \u9ed8\u8ba4 dropna = True .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a c b 1.0 2 3 2.0 2 5 df_dropna . groupby ( by = [ \"b\" ], dropna = False ) . sum () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a c b 1.0 2 3 2.0 2 5 NaN 1 4 groupby\u5bf9\u8c61\u5c5e\u6027 \u00b6 groups\u662f\u4e2a\u5b57\u5178\u3002The groups attribute is a dict whose keys are the computed unique groups and corresponding values being the axis labels belonging to each group. df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } class order max_speed falcon bird Falconiformes 389.0 parrot bird Psittaciformes 24.0 lion mammal Carnivora 80.2 monkey mammal Primates NaN leopard mammal Carnivora 58.0 df . groupby ( 'class' ) . groups {'bird': ['falcon', 'parrot'], 'mammal': ['lion', 'monkey', 'leopard']} \u53ef\u4ee5\u904d\u5386\u5404\u7ec4\u6570\u636e grouped = df . groupby ( \"class\" ) for name , group in grouped : print ( name ) print ( group ) bird class order max_speed falcon bird Falconiformes 389.0 parrot bird Psittaciformes 24.0 mammal class order max_speed lion mammal Carnivora 80.2 monkey mammal Primates NaN leopard mammal Carnivora 58.0 \u9009\u62e9\u4e00\u7ec4\u6570\u636e get_group() grouped . get_group ( 'bird' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } class order max_speed falcon bird Falconiformes 389.0 parrot bird Psittaciformes 24.0 \u6570\u636e\u805a\u5408 \u00b6 \u521b\u5efagroupBy\u5bf9\u8c61\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u65b9\u6cd5\u5bf9\u5206\u7ec4\u6570\u636e\u8fdb\u884c\u8ba1\u7b97, aggregate() \u6216\u7b49\u6548 agg() \u662f\u4e00\u79cd\u65b9\u6cd5\u3002 df . groupby ( 'class' ) . agg ( sum ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } max_speed class bird 413.0 mammal 138.2 df . groupby ([ 'class' , 'order' ]) . sum () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } max_speed class order bird Falconiformes 389.0 Psittaciformes 24.0 mammal Carnivora 138.2 Primates 0.0 \u8fd0\u7528\u591a\u4e2a\u51fd\u6570 df . groupby ( 'class' )[ 'max_speed' ] . agg ([ np . sum , np . mean , np . std ]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } sum mean std class bird 413.0 206.5 258.093975 mammal 138.2 69.1 15.697771 \u547d\u540d\u805a\u5408 animals = pd . DataFrame ( { \"kind\" : [ \"cat\" , \"dog\" , \"cat\" , \"dog\" ], \"height\" : [ 9.1 , 6.0 , 9.5 , 34.0 ], \"weight\" : [ 7.9 , 7.5 , 9.9 , 198.0 ], } ) animals .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } kind height weight 0 cat 9.1 7.9 1 dog 6.0 7.5 2 cat 9.5 9.9 3 dog 34.0 198.0 animals . groupby ( \"kind\" ) . agg ( min_height = ( \"height\" , \"min\" ), max_height = ( \"height\" , \"max\" ), average_weight = ( \"weight\" , np . mean ),) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } min_height max_height average_weight kind cat 9.1 9.5 8.90 dog 6.0 34.0 102.75 animals . groupby ( \"kind\" ) . agg ( min_height = pd . NamedAgg ( column = \"height\" , aggfunc = \"min\" ), max_height = pd . NamedAgg ( column = \"height\" , aggfunc = \"max\" ), average_weight = pd . NamedAgg ( column = \"weight\" , aggfunc = np . mean ),) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } min_height max_height average_weight kind cat 9.1 9.5 8.90 dog 6.0 34.0 102.75 animals . groupby ( \"kind\" ) . agg ( ** { \"total weight\" : pd . NamedAgg ( column = \"weight\" , aggfunc = sum )} ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } total weight kind cat 17.8 dog 205.5 # \u5bf9\u5e8f\u5217\u540c\u6837\u6709\u6548 animals . groupby ( \"kind\" ) . height . agg ( min_height = \"min\" , max_height = \"max\" , ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } min_height max_height kind cat 9.1 9.5 dog 6.0 34.0 \u5c06\u4e0d\u540c\u51fd\u6570\u8fd0\u7528\u5230\u4e0d\u540c\u5217 animals . groupby ( 'kind' ) . agg ({ 'height' : 'min' , 'weight' : 'max' }) # \u53ea\u4f20\u5165\u51fd\u6570\u540d\uff0c\u4e0d\u5e26\u62ec\u53f7\uff1b\u4e5f\u53ef\u4ee5\u4f20\u5165lambda\u51fd\u6570 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } height weight kind cat 9.1 9.9 dog 6.0 198.0 apply() \u00b6 \u5bf9\u5206\u7ec4\u6570\u636e\u8fdb\u884c\u7684\u67d0\u4e9b\u64cd\u4f5c\u53ef\u80fd\u65e2\u4e0d\u9002\u5408\u805a\u5408\u7c7b\u522b\uff0c\u4e5f\u4e0d\u9002\u5408\u8f6c\u6362\u7c7b\u522b\uff1b\u6216\u8005\uff0c\u60a8\u53ef\u80fd\u53ea\u662f\u5e0c\u671bgroupBy\u63a8\u65ad\u5982\u4f55\u5408\u5e76\u7ed3\u679c\u3002\u5bf9\u4e8e\u8fd9\u4e9b\uff0c\u53ef\u4ee5\u4f7f\u7528apply\u7684\u529f\u80fd\uff1bapply\u53ef\u4ee5\u5904\u7406\u4e00\u4e9b\u7279\u6b8a\u7684\u7528\u4f8b\u3002 data = pd . DataFrame ( { \"A\" : [ \"foo\" , \"bar\" , \"foo\" , \"bar\" , \"foo\" , \"bar\" , \"foo\" , \"foo\" ], \"B\" : [ \"one\" , \"one\" , \"two\" , \"three\" , \"two\" , \"two\" , \"one\" , \"three\" ], \"C\" : np . random . randn ( 8 ), \"D\" : np . random . randn ( 8 ), } ) data .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 foo one -0.170393 0.347397 1 bar one 0.733136 -0.304196 2 foo two 0.576483 -3.176851 3 bar three 0.192013 1.323317 4 foo two 1.443719 1.287474 5 bar two -0.182249 1.171232 6 foo one 1.658044 -1.198488 7 foo three 0.454383 1.242889 grouped = data . groupby ( \"A\" ) # could also just call .describe() grouped [ \"C\" ] . apply ( lambda x : x . describe ()) A bar count 3.000000 mean 0.247633 std 0.460220 min -0.182249 25% 0.004882 50% 0.192013 75% 0.462574 max 0.733136 foo count 5.000000 mean 0.792447 std 0.751898 min -0.170393 25% 0.454383 50% 0.576483 75% 1.443719 max 1.658044 Name: C, dtype: float64 grouped = data . groupby ( 'A' )[ 'C' ] def f ( group ): return pd . DataFrame ({ 'original' : group , 'demeaned' : group - group . mean ()}) grouped . apply ( f ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } original demeaned 0 -0.170393 -0.962840 1 0.733136 0.485502 2 0.576483 -0.215964 3 0.192013 -0.055620 4 1.443719 0.651272 5 -0.182249 -0.429882 6 1.658044 0.865597 7 0.454383 -0.338064 = \u8f6c\u6362\u65b9\u6cd5-transform()\u6ca1\u600e\u4e48\u7528\u5230\u8fc7\uff0c\u611f\u5174\u8da3\u7684\u53ef\u67e5\u9605 groupby() to_datetime() \u00b6 pandas . to_datetime ( arg , errors = 'raise' , dayfirst = False , yearfirst = False , utc = None , format = None , exact = True , unit = None , infer_datetime_format = False , origin = 'unix' , cache = True ) \u57fa\u672c\u7528\u6cd5 df = pd . DataFrame ({ 'year' : [ 2015 , 2016 ], 'month' : [ 2 , 3 ], 'day' : [ 4 , 5 ]}) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } year month day 0 2015 2 4 1 2016 3 5 pd . to_datetime ( df ) 0 2015 - 02 - 04 1 2016 - 03 - 05 dtype : datetime64 [ ns ] \u8f6c\u6362\u65e5\u671f\uff0c\u63d0\u53d6\u5e74\u6708\u65e5 data = pd . DataFrame ({ 'date' : [ 20210107 , 20210406 ], 'weight' : [ 140 , 130 ]}) data .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } date weight 0 20210107 140 1 20210406 130 # \u8f6c\u6362\u6210\u65e5\u671f data [ 'date' ] = pd . to_datetime ( data [ 'date' ], format = '%Y%m %d ' ) data .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } date weight 0 2021-01-07 140 1 2021-04-06 130 # \u63d0\u53d6\u5e74\u3001\u6708\u3001\u65e5 year = data [ 'date' ] . dt . year year 0 2021 1 2021 Name : date , dtype : int 64 month = data [ 'date' ] . dt . month month 0 1 1 4 Name : date , dtype : int 64 day = data [ 'date' ] . dt . day day 0 7 1 6 Name : date , dtype : int 64","title":"\u6570\u636e\u6574\u7406"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/#_1","text":"\u6570\u636e\u6574\u7406\u662f\u5728\u6570\u636e\u6e05\u6d17\u7684\u57fa\u7840\u4e0a\uff0c\u8fdb\u4e00\u6b65\u5c06\u6570\u636e\u5904\u7406\u6210\u53ef\u4ee5\u5206\u6790\u6216\u53ef\u89c6\u5316\u7684\u6570\u636e\uff0c\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u4ee5\u4e0b\u53ea\u7b80\u5355\u7f57\u5217\u4e86\u4e00\u4e9b\u51fd\u6570\uff0c\u5e76\u5bf9\u5e38\u7528\u7684 groupby() \u548c to_datetime() \u51fd\u6570\u8fdb\u884c\u4e86\u4ecb\u7ecd\uff1b\u66f4\u591a\u51fd\u6570\u53ca\u4ecb\u7ecd\uff0c\u8bf7\u53c2\u9605 pandas\u5b98\u65b9\u6587\u6863 \u3002 \u6570\u636e\u5408\u5e76 concat() append() merge() join() compare() \u91cd\u5851\u548c\u900f\u89c6\u8868 pivot() stack() unstack() melt() pivot_table() crosstab() cut() get_dummies() factorize() \u65e5\u671f\u529f\u80fd to_datetime() \u5206\u7ec4 groupby()","title":"\u6570\u636e\u6574\u7406"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/#groupby","text":"DataFrame DataFrame . groupby ( by = None , axis = 0 , level = None , as_index = True , sort = True , group_keys = True , squeeze =< object object > , observed = False , dropna = True ) # by: mapping, function, label, or list of labels # axis: {0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0 # level: int, level name, or sequence of such, default None # sort: bool, default True # group_keys: bool, default True # squeeze: bool, default False # observed: bool, default False # dropna: bool, default True Series Series . groupby ( by = None , axis = 0 , level = None , as_index = True , sort = True , group_keys = True , squeeze =< object object > , observed = False , dropna = True )","title":"groupby()\u51fd\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/#_2","text":"pandas \u5bf9\u8c61\u53ef\u4ee5\u5728\u4efb\u4f55\u8f74\u4e0a\u62c6\u5206,\u5206\u7ec4\u7684\u62bd\u8c61\u5b9a\u4e49\u662f\u63d0\u4f9b\u6807\u7b7e\u5230\u5206\u7ec4\u540d\u79f0\u7684\u6620\u5c04\u3002 import pandas as pd import numpy as np df = pd . DataFrame ( [( \"bird\" , \"Falconiformes\" , 389.0 ), ( \"bird\" , \"Psittaciformes\" , 24.0 ), ( \"mammal\" , \"Carnivora\" , 80.2 ), ( \"mammal\" , \"Primates\" , np . nan ), ( \"mammal\" , \"Carnivora\" , 58 ),], index = [ \"falcon\" , \"parrot\" , \"lion\" , \"monkey\" , \"leopard\" ], columns = ( \"class\" , \"order\" , \"max_speed\" ),) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } class order max_speed falcon bird Falconiformes 389.0 parrot bird Psittaciformes 24.0 lion mammal Carnivora 80.2 monkey mammal Primates NaN leopard mammal Carnivora 58.0 grouped = df . groupby ( \"class\" ) # \u9ed8\u8ba4 axis = 0 ; df.groupby('A')\u53ea\u662f\u8bed\u6cd5\u7cd6df.groupby(df['A']) grouped = df . groupby ( \"order\" , axis = \"columns\" ) # axis = 1 \u6309\u5217 grouped = df . groupby ([ \"class\" , \"order\" ]) # \u6309\u591a\u5217\u5206\u7ec4","title":"\u6570\u636e\u5206\u7ec4"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/#_3","text":"\u5728 groupby() \u8fc7\u7a0b\u4e2d\u662f\u9ed8\u8ba4\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u53c2\u6570 sort = False \u6765\u53d6\u6d88\u81ea\u52a8\u6392\u5e8f\u3002 df2 = pd . DataFrame ({ \"X\" : [ \"B\" , \"B\" , \"A\" , \"A\" ], \"Y\" : [ 1 , 2 , 3 , 4 ]}) df2 . groupby ([ \"X\" ]) . sum () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Y X A 7 B 3 df2 . groupby ([ \"X\" ], sort = False ) . sum () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Y X B 3 A 7","title":"\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/#_4","text":"\u5728 groupby() \u8fc7\u7a0b\u4e2d\u662f\u9ed8\u8ba4\u5bf9NA\u8fdb\u884c\u5220\u9664\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u53c2\u6570 dropna = False \u6765\u53d6\u6d88\u3002 df_list = [[ 1 , 2 , 3 ], [ 1 , None , 4 ], [ 2 , 1 , 3 ], [ 1 , 2 , 2 ]] df_dropna = pd . DataFrame ( df_list , columns = [ \"a\" , \"b\" , \"c\" ]) df_dropna .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c 0 1 2.0 3 1 1 NaN 4 2 2 1.0 3 3 1 2.0 2 df_dropna . groupby ( by = [ \"b\" ], dropna = True ) . sum () # \u9ed8\u8ba4 dropna = True .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a c b 1.0 2 3 2.0 2 5 df_dropna . groupby ( by = [ \"b\" ], dropna = False ) . sum () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a c b 1.0 2 3 2.0 2 5 NaN 1 4","title":"\u7f3a\u5931\u503c"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/#groupby_1","text":"groups\u662f\u4e2a\u5b57\u5178\u3002The groups attribute is a dict whose keys are the computed unique groups and corresponding values being the axis labels belonging to each group. df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } class order max_speed falcon bird Falconiformes 389.0 parrot bird Psittaciformes 24.0 lion mammal Carnivora 80.2 monkey mammal Primates NaN leopard mammal Carnivora 58.0 df . groupby ( 'class' ) . groups {'bird': ['falcon', 'parrot'], 'mammal': ['lion', 'monkey', 'leopard']} \u53ef\u4ee5\u904d\u5386\u5404\u7ec4\u6570\u636e grouped = df . groupby ( \"class\" ) for name , group in grouped : print ( name ) print ( group ) bird class order max_speed falcon bird Falconiformes 389.0 parrot bird Psittaciformes 24.0 mammal class order max_speed lion mammal Carnivora 80.2 monkey mammal Primates NaN leopard mammal Carnivora 58.0 \u9009\u62e9\u4e00\u7ec4\u6570\u636e get_group() grouped . get_group ( 'bird' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } class order max_speed falcon bird Falconiformes 389.0 parrot bird Psittaciformes 24.0","title":"groupby\u5bf9\u8c61\u5c5e\u6027"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/#_5","text":"\u521b\u5efagroupBy\u5bf9\u8c61\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u65b9\u6cd5\u5bf9\u5206\u7ec4\u6570\u636e\u8fdb\u884c\u8ba1\u7b97, aggregate() \u6216\u7b49\u6548 agg() \u662f\u4e00\u79cd\u65b9\u6cd5\u3002 df . groupby ( 'class' ) . agg ( sum ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } max_speed class bird 413.0 mammal 138.2 df . groupby ([ 'class' , 'order' ]) . sum () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } max_speed class order bird Falconiformes 389.0 Psittaciformes 24.0 mammal Carnivora 138.2 Primates 0.0 \u8fd0\u7528\u591a\u4e2a\u51fd\u6570 df . groupby ( 'class' )[ 'max_speed' ] . agg ([ np . sum , np . mean , np . std ]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } sum mean std class bird 413.0 206.5 258.093975 mammal 138.2 69.1 15.697771 \u547d\u540d\u805a\u5408 animals = pd . DataFrame ( { \"kind\" : [ \"cat\" , \"dog\" , \"cat\" , \"dog\" ], \"height\" : [ 9.1 , 6.0 , 9.5 , 34.0 ], \"weight\" : [ 7.9 , 7.5 , 9.9 , 198.0 ], } ) animals .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } kind height weight 0 cat 9.1 7.9 1 dog 6.0 7.5 2 cat 9.5 9.9 3 dog 34.0 198.0 animals . groupby ( \"kind\" ) . agg ( min_height = ( \"height\" , \"min\" ), max_height = ( \"height\" , \"max\" ), average_weight = ( \"weight\" , np . mean ),) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } min_height max_height average_weight kind cat 9.1 9.5 8.90 dog 6.0 34.0 102.75 animals . groupby ( \"kind\" ) . agg ( min_height = pd . NamedAgg ( column = \"height\" , aggfunc = \"min\" ), max_height = pd . NamedAgg ( column = \"height\" , aggfunc = \"max\" ), average_weight = pd . NamedAgg ( column = \"weight\" , aggfunc = np . mean ),) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } min_height max_height average_weight kind cat 9.1 9.5 8.90 dog 6.0 34.0 102.75 animals . groupby ( \"kind\" ) . agg ( ** { \"total weight\" : pd . NamedAgg ( column = \"weight\" , aggfunc = sum )} ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } total weight kind cat 17.8 dog 205.5 # \u5bf9\u5e8f\u5217\u540c\u6837\u6709\u6548 animals . groupby ( \"kind\" ) . height . agg ( min_height = \"min\" , max_height = \"max\" , ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } min_height max_height kind cat 9.1 9.5 dog 6.0 34.0 \u5c06\u4e0d\u540c\u51fd\u6570\u8fd0\u7528\u5230\u4e0d\u540c\u5217 animals . groupby ( 'kind' ) . agg ({ 'height' : 'min' , 'weight' : 'max' }) # \u53ea\u4f20\u5165\u51fd\u6570\u540d\uff0c\u4e0d\u5e26\u62ec\u53f7\uff1b\u4e5f\u53ef\u4ee5\u4f20\u5165lambda\u51fd\u6570 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } height weight kind cat 9.1 9.9 dog 6.0 198.0","title":"\u6570\u636e\u805a\u5408"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/#apply","text":"\u5bf9\u5206\u7ec4\u6570\u636e\u8fdb\u884c\u7684\u67d0\u4e9b\u64cd\u4f5c\u53ef\u80fd\u65e2\u4e0d\u9002\u5408\u805a\u5408\u7c7b\u522b\uff0c\u4e5f\u4e0d\u9002\u5408\u8f6c\u6362\u7c7b\u522b\uff1b\u6216\u8005\uff0c\u60a8\u53ef\u80fd\u53ea\u662f\u5e0c\u671bgroupBy\u63a8\u65ad\u5982\u4f55\u5408\u5e76\u7ed3\u679c\u3002\u5bf9\u4e8e\u8fd9\u4e9b\uff0c\u53ef\u4ee5\u4f7f\u7528apply\u7684\u529f\u80fd\uff1bapply\u53ef\u4ee5\u5904\u7406\u4e00\u4e9b\u7279\u6b8a\u7684\u7528\u4f8b\u3002 data = pd . DataFrame ( { \"A\" : [ \"foo\" , \"bar\" , \"foo\" , \"bar\" , \"foo\" , \"bar\" , \"foo\" , \"foo\" ], \"B\" : [ \"one\" , \"one\" , \"two\" , \"three\" , \"two\" , \"two\" , \"one\" , \"three\" ], \"C\" : np . random . randn ( 8 ), \"D\" : np . random . randn ( 8 ), } ) data .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 foo one -0.170393 0.347397 1 bar one 0.733136 -0.304196 2 foo two 0.576483 -3.176851 3 bar three 0.192013 1.323317 4 foo two 1.443719 1.287474 5 bar two -0.182249 1.171232 6 foo one 1.658044 -1.198488 7 foo three 0.454383 1.242889 grouped = data . groupby ( \"A\" ) # could also just call .describe() grouped [ \"C\" ] . apply ( lambda x : x . describe ()) A bar count 3.000000 mean 0.247633 std 0.460220 min -0.182249 25% 0.004882 50% 0.192013 75% 0.462574 max 0.733136 foo count 5.000000 mean 0.792447 std 0.751898 min -0.170393 25% 0.454383 50% 0.576483 75% 1.443719 max 1.658044 Name: C, dtype: float64 grouped = data . groupby ( 'A' )[ 'C' ] def f ( group ): return pd . DataFrame ({ 'original' : group , 'demeaned' : group - group . mean ()}) grouped . apply ( f ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } original demeaned 0 -0.170393 -0.962840 1 0.733136 0.485502 2 0.576483 -0.215964 3 0.192013 -0.055620 4 1.443719 0.651272 5 -0.182249 -0.429882 6 1.658044 0.865597 7 0.454383 -0.338064 = \u8f6c\u6362\u65b9\u6cd5-transform()\u6ca1\u600e\u4e48\u7528\u5230\u8fc7\uff0c\u611f\u5174\u8da3\u7684\u53ef\u67e5\u9605 groupby()","title":"apply()"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/#to_datetime","text":"pandas . to_datetime ( arg , errors = 'raise' , dayfirst = False , yearfirst = False , utc = None , format = None , exact = True , unit = None , infer_datetime_format = False , origin = 'unix' , cache = True ) \u57fa\u672c\u7528\u6cd5 df = pd . DataFrame ({ 'year' : [ 2015 , 2016 ], 'month' : [ 2 , 3 ], 'day' : [ 4 , 5 ]}) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } year month day 0 2015 2 4 1 2016 3 5 pd . to_datetime ( df ) 0 2015 - 02 - 04 1 2016 - 03 - 05 dtype : datetime64 [ ns ] \u8f6c\u6362\u65e5\u671f\uff0c\u63d0\u53d6\u5e74\u6708\u65e5 data = pd . DataFrame ({ 'date' : [ 20210107 , 20210406 ], 'weight' : [ 140 , 130 ]}) data .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } date weight 0 20210107 140 1 20210406 130 # \u8f6c\u6362\u6210\u65e5\u671f data [ 'date' ] = pd . to_datetime ( data [ 'date' ], format = '%Y%m %d ' ) data .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } date weight 0 2021-01-07 140 1 2021-04-06 130 # \u63d0\u53d6\u5e74\u3001\u6708\u3001\u65e5 year = data [ 'date' ] . dt . year year 0 2021 1 2021 Name : date , dtype : int 64 month = data [ 'date' ] . dt . month month 0 1 1 4 Name : date , dtype : int 64 day = data [ 'date' ] . dt . day day 0 7 1 6 Name : date , dtype : int 64","title":"to_datetime()"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/","text":"\u6570\u636e\u6e05\u6d17 \u00b6 \u6570\u636e\u5904\u7406\u662f\u6307\u5c06\u6536\u96c6\u5230\u7684\u6570\u636e\u8fdb\u884c\u52a0\u5de5\u3001\u6574\u7406\uff0c\u5f62\u6210\u9002\u5408\u6570\u636e\u5206\u6790\u7684\u6837\u5f0f\uff1b\u53ef\u4ee5\u5c06\u6570\u636e\u5904\u7406\u7b80\u5355\u7684\u5206\u4e3a\u6570\u636e\u7684\u6e05\u6d17\u3001\u6570\u636e\u7684\u6574\u7406\uff1b\u6570\u636e\u6e05\u6d17\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u4e09\u4e2a\u8fc7\u7a0b\uff1a \u5904\u7406\u7f3a\u5931\u503c \u5904\u7406\u91cd\u590d\u503c \u5904\u7406\u5f02\u5e38\u503c \u4e3b\u8981\u7528\u5230\u7684\u662f pandas \u5e93\u3002 \u5904\u7406\u7f3a\u5931\u503c \u00b6 \u67e5\u770b\u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f import pandas as pd data = pd . read_excel ( 'path_to_file.xls\u6216.xlsx' , sheet_name = 'Sheet1' ) # \u4ee5\u8bfb\u53d6\u7684excel\u6587\u4ef6\u4e3a\u4f8b data . info () # \u5176\u4e2d\u4e3b\u8981\u5305\u62ec\uff1a\u6574\u4f53\u6570\u636e\u7684\u603b\u884c\u6570\u3001\u5404\u5217\u6570\u636e\u7c7b\u578b\u7edf\u8ba1\u3001\u5404\u5217\u7684\u5217\u540d\u3001\u5404\u5217\u603b\u5171\u6709\u591a\u5c11\u975e\u7a7a\u6570\u636e\u3001\u8868\u683c\u5360\u7528\u7684\u7cfb\u7edf\u7a7a\u95f4\u7b49 \u67e5\u770b\u524d\u51e0\u884c\u53ef\u4ee5\u4f7f\u7528 df.head(\u6570\u5b57) ,\u67e5\u770b\u540e\u51e0\u884c\u4f7f\u7528 df.tail(\u6570\u5b57) \u67e5\u627e\u7f3a\u5931\u503c \u5728 pandas \u91cc\uff0c\u53ef\u4ee5\u4f7f\u7528 isna() \u548c notna() \u65b9\u6cd5\u6765\u67e5\u627e DataFrame\u5bf9\u8c61 \u4ee5\u53ca Series\u5bf9\u8c61 \u4e2d\u7684\u7f3a\u5931\u503c\u3002 df.isna() \u8fd4\u56de\u7684\u662fDATa Frame\u5bf9\u8c61\uff0c Series.isna() \u8fd4\u56de\u7684\u662fSeries\u5bf9\u8c61\u3002\u8fd4\u56de\u5bf9\u8c61\u7684\u5185\u5bb9\u662f\u5e03\u5c14\u503c\uff0c\u7f3a\u5931\u6570\u636e\u4f1a\u7528 True \u6765\u8868\u793a\uff0c False \u4ee3\u8868\u6570\u636e\u4e0d\u7f3a\u5931\u3002 \u5220\u9664\u7f3a\u5931\u503c \u53ef\u4ee5\u4f7f\u7528 dropna() \u65b9\u6cd5\u76f4\u63a5\u5220\u9664 DataFrame \u5bf9\u8c61\u548c Series \u5bf9\u8c61\u4e2d\u542b\u6709\u7f3a\u5931\u503c\u7684\u6570\u636e\uff1b\u53ea\u8981\u6267\u884c df.dropna() \u8fd9\u4e00\u4ee3\u7801\u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5c06 DataFrame \u5bf9\u8c61\u4e2d\u5305\u542b\u7f3a\u5931\u503c\u7684\u6bcf\u4e00\u884c\u5168\u90e8\u5220\u6389\u3002 DataFrame . dropna ( axis = 0 , how = 'any' , thresh = None , subset = None , inplace = False ) # axis: 0/'index'\uff1a\u5220\u9664\u5305\u542b\u7f3a\u5931\u503c\u7684\u884c, 1/'columns'\uff1a\u5220\u9664\u5305\u542b\u7f3a\u5931\u503c\u7684\u5217 ;\u9ed8\u8ba4\u503c\u4e3a 0 # how: 'any': \u5982\u679c\u5b58\u5728\u4efb\u4f55NA\u503c\uff0c\u5219\u5220\u9664\u8be5\u884c\u6216\u5217; 'all': \u5982\u679c\u6240\u6709\u503c\u5747\u4e3aNA\uff0c\u5219\u5220\u9664\u8be5\u884c\u6216\u5217;\u9ed8\u8ba4\u503c\u662f'any' # thresh: int, optional Require that many non-NA values\u3002\u8981\u4fdd\u7559\u7684\u975eNA\u4e2a\u6570 # subset: \u5220\u9664\u6307\u5b9a\u5217\u7684\u7f3a\u5931\u6570\u636e['\u5217\u540d'] # inplace: \u662f\u5426\u5c31\u5730\u4fee\u6539 Series . dropna ( axis = 0 , inplace = False , how = None ) # axis: \u53ea\u6709\u4e00\u4e2a\u503c0\u6216\u8005'index' # inplace: \u662f\u5426\u5c31\u5730\u4fee\u6539 # how: str, optional,Not in use. Kept for compatibility. \u586b\u5145\u7f3a\u5931\u6570\u636e DataFrame . fillna ( value = None , method = None , axis = None , inplace = False , limit = None , downcast = None ) Series . fillna ( value = None , method = None , axis = None , inplace = False , limit = None , downcast = None ) # value: scalar, dict, Series, or DataFrame # method: {\u2018backfill\u2019, \u2018bfill\u2019, \u2018pad\u2019, \u2018ffill\u2019, None}, default None # axis: DataFrame-{0 or \u2018index\u2019, 1 or \u2018columns\u2019};Series-0 or \u2018index\u2019 # inplace: bool, default False # limit: int, default None\u586b\u5145\u6570\u91cf # downcast: dict, default is None \u5904\u7406\u91cd\u590d\u503c \u00b6 \u67e5\u627e\u91cd\u590d\u503c \u53ef\u4ee5\u4f7f\u7528 df.duplicated() \u67e5\u770bDataFrame\u5bf9\u8c61\u7684\u91cd\u590d\u6570\u636e\uff0c\u8fd4\u56de\u4e00\u4e2aSeries\u5bf9\u8c61\uff0c\u91cd\u590d\u4e3aTrue\uff0c\u4e0d\u91cd\u590d\u4e3aFalse\uff1b\u4f7f\u7528 Series.duplicated() \u67e5\u770bSeries\u7684\u91cd\u590d\u6570\u636e\uff0c\u8fd4\u56de\u4e00\u4e2aSeries\u5bf9\u8c61\uff0c\u91cd\u590d\u4e3aTrue\uff0c\u4e0d\u91cd\u590d\u4e3aFalse\u3002 \u4e5f\u53ef\u4ee5\u901a\u8fc7 df[df.duplicated()] \u67e5\u770b\u91cd\u590d\u884c\u7684\u6570\u636e\u3002 DataFrame . duplicated ( subset = None , keep = 'first' ) # subset: \u6307\u5b9a\u5217\uff0c\u9ed8\u8ba4\u6240\u6709\u5217 # keep: {\u2018first\u2019, \u2018last\u2019, False}, default \u2018first\u2019,\u4fdd\u7559\u7b2c\u4e00\u4e2a\u8fd8\u662f\u6700\u540e\u4e00\u4e2a Series . duplicated ( keep = 'first' ) \u5220\u9664\u91cd\u590d\u503c \u53ef\u4ee5\u4f7f\u7528 df.drop_duplicates() \u5220\u9664DataFrame \u5bf9\u8c61\u4e2d\u91cd\u590d\u51fa\u73b0\u7684\u6574\u884c\u6570\u636e\uff1b\u4f7f\u7528 Series.drop_duplicates() \u5220\u9664Series \u5bf9\u8c61\u4e2d\u91cd\u590d\u51fa\u73b0\u7684\u6574\u884c\u6570\u636e\u3002 DataFrame . drop_duplicates ( subset = None , keep = 'first' , inplace = False , ignore_index = False ) # ignore_index: bool, default False,If True, the resulting axis will be labeled 0, 1, \u2026, n - 1 Series . drop_duplicates ( keep = 'first' , inplace = False ) \u5904\u7406\u5f02\u5e38\u503c \u00b6 \u68c0\u67e5\u3001\u7b5b\u9664\u5f02\u5e38\u503c \u4f7f\u7528 df.describe() \u53ef\u4ee5\u67e5\u770bDataFrame\u5bf9\u8c61\u7684\u63cf\u8ff0\u6027\u7edf\u8ba1\u4fe1\u606f\uff0c\u7136\u540e\u6839\u636e\u6700\u5927\u3001\u6700\u5c0f\u503c\u3001\u5e73\u5747\u6570\u3001\u4e2d\u4f4d\u6570\u7b49\u4fe1\u606f\uff0c\u5229\u7528\u5e03\u5c14\u7d22\u5f15\u7684\u65b9\u5f0f\u7b5b\u9664\u5f02\u5e38\u503c\u3002\u6bd4\u5982\u6709\u4e2a\u8bb0\u5f55\u852c\u83dc\u4ef7\u683c\u548c\u9500\u91cf\u7684\u6570\u636edata\uff0c\u8981\u7b5b\u9664\u6570\u636e\u4e2d\u4ef7\u683c\u5c0f\u4e8e0\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\uff1a data = data [ data [ '\u5355\u4ef7' ] > 0 ] \u6848\u4f8b \u00b6 \u8fd8\u662f\u4ee52016\u5e74\u4e16\u754c\u5404\u56fd\u4e8c\u6c27\u5316\u78b3\u6392\u653e\u91cf\uff082016world-co2.xls\uff09\u7684\u6570\u636e\u4e3a\u4f8b\u3002 \u6570\u636e\u7684\u8bfb\u53d6 import pandas as pd # \u8bfb\u53d62016\u5e74\u7684\u6570\u636e data = pd . read_excel ( r 'C:\\Users\\Administrator\\Desktop\\2016world-co2.xls' , sheet_name = 'Data' , header = 3 ) \u7f3a\u5931\u503c\u5904\u7406 \u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f data.info() \u53ef\u4ee5\u770b\u51fa\u5171\u6709264\u884c\u6570\u636e\uff0c\u9664\u5217'2016'\u5916\uff0c\u5176\u4ed6\u6570\u636e\u4e0d\u5b58\u5728\u7f3a\u5931\u3002 \u5220\u9664\u7f3a\u5931\u503c\uff08\u73b0\u5b9e\u4e2d\uff0c\u8981\u6839\u636e\u4e1a\u52a1\u6216\u5176\u4ed6\u8981\u6c42\u6765\u51b3\u5b9a\u662f\u5220\u9664\uff0c\u8fd8\u662f\u586b\u5145\u6570\u636e\uff09 data.dropna(inplace=True) \u5e76\u67e5\u770b\u3002 \u91cd\u590d\u6570\u636e\u5904\u7406 data.duplicated() \u53d1\u73b0\u5e76\u65e0\u91cd\u590d\u6570\u636e\u3002 \u5f02\u5e38\u6570\u636e\u5904\u7406 data.describe() \u73b0\u5b9e\u4e2d\uff0c\u8981\u6839\u636e\u4e1a\u52a1\u6216\u5176\u4ed6\u8981\u6c42\u6765\u51b3\u5b9a\u662f\u5426\u662f\u5f02\u5e38\u503c\u3002","title":"\u6570\u636e\u6e05\u6d17"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/#_1","text":"\u6570\u636e\u5904\u7406\u662f\u6307\u5c06\u6536\u96c6\u5230\u7684\u6570\u636e\u8fdb\u884c\u52a0\u5de5\u3001\u6574\u7406\uff0c\u5f62\u6210\u9002\u5408\u6570\u636e\u5206\u6790\u7684\u6837\u5f0f\uff1b\u53ef\u4ee5\u5c06\u6570\u636e\u5904\u7406\u7b80\u5355\u7684\u5206\u4e3a\u6570\u636e\u7684\u6e05\u6d17\u3001\u6570\u636e\u7684\u6574\u7406\uff1b\u6570\u636e\u6e05\u6d17\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u4e09\u4e2a\u8fc7\u7a0b\uff1a \u5904\u7406\u7f3a\u5931\u503c \u5904\u7406\u91cd\u590d\u503c \u5904\u7406\u5f02\u5e38\u503c \u4e3b\u8981\u7528\u5230\u7684\u662f pandas \u5e93\u3002","title":"\u6570\u636e\u6e05\u6d17"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/#_2","text":"\u67e5\u770b\u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f import pandas as pd data = pd . read_excel ( 'path_to_file.xls\u6216.xlsx' , sheet_name = 'Sheet1' ) # \u4ee5\u8bfb\u53d6\u7684excel\u6587\u4ef6\u4e3a\u4f8b data . info () # \u5176\u4e2d\u4e3b\u8981\u5305\u62ec\uff1a\u6574\u4f53\u6570\u636e\u7684\u603b\u884c\u6570\u3001\u5404\u5217\u6570\u636e\u7c7b\u578b\u7edf\u8ba1\u3001\u5404\u5217\u7684\u5217\u540d\u3001\u5404\u5217\u603b\u5171\u6709\u591a\u5c11\u975e\u7a7a\u6570\u636e\u3001\u8868\u683c\u5360\u7528\u7684\u7cfb\u7edf\u7a7a\u95f4\u7b49 \u67e5\u770b\u524d\u51e0\u884c\u53ef\u4ee5\u4f7f\u7528 df.head(\u6570\u5b57) ,\u67e5\u770b\u540e\u51e0\u884c\u4f7f\u7528 df.tail(\u6570\u5b57) \u67e5\u627e\u7f3a\u5931\u503c \u5728 pandas \u91cc\uff0c\u53ef\u4ee5\u4f7f\u7528 isna() \u548c notna() \u65b9\u6cd5\u6765\u67e5\u627e DataFrame\u5bf9\u8c61 \u4ee5\u53ca Series\u5bf9\u8c61 \u4e2d\u7684\u7f3a\u5931\u503c\u3002 df.isna() \u8fd4\u56de\u7684\u662fDATa Frame\u5bf9\u8c61\uff0c Series.isna() \u8fd4\u56de\u7684\u662fSeries\u5bf9\u8c61\u3002\u8fd4\u56de\u5bf9\u8c61\u7684\u5185\u5bb9\u662f\u5e03\u5c14\u503c\uff0c\u7f3a\u5931\u6570\u636e\u4f1a\u7528 True \u6765\u8868\u793a\uff0c False \u4ee3\u8868\u6570\u636e\u4e0d\u7f3a\u5931\u3002 \u5220\u9664\u7f3a\u5931\u503c \u53ef\u4ee5\u4f7f\u7528 dropna() \u65b9\u6cd5\u76f4\u63a5\u5220\u9664 DataFrame \u5bf9\u8c61\u548c Series \u5bf9\u8c61\u4e2d\u542b\u6709\u7f3a\u5931\u503c\u7684\u6570\u636e\uff1b\u53ea\u8981\u6267\u884c df.dropna() \u8fd9\u4e00\u4ee3\u7801\u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5c06 DataFrame \u5bf9\u8c61\u4e2d\u5305\u542b\u7f3a\u5931\u503c\u7684\u6bcf\u4e00\u884c\u5168\u90e8\u5220\u6389\u3002 DataFrame . dropna ( axis = 0 , how = 'any' , thresh = None , subset = None , inplace = False ) # axis: 0/'index'\uff1a\u5220\u9664\u5305\u542b\u7f3a\u5931\u503c\u7684\u884c, 1/'columns'\uff1a\u5220\u9664\u5305\u542b\u7f3a\u5931\u503c\u7684\u5217 ;\u9ed8\u8ba4\u503c\u4e3a 0 # how: 'any': \u5982\u679c\u5b58\u5728\u4efb\u4f55NA\u503c\uff0c\u5219\u5220\u9664\u8be5\u884c\u6216\u5217; 'all': \u5982\u679c\u6240\u6709\u503c\u5747\u4e3aNA\uff0c\u5219\u5220\u9664\u8be5\u884c\u6216\u5217;\u9ed8\u8ba4\u503c\u662f'any' # thresh: int, optional Require that many non-NA values\u3002\u8981\u4fdd\u7559\u7684\u975eNA\u4e2a\u6570 # subset: \u5220\u9664\u6307\u5b9a\u5217\u7684\u7f3a\u5931\u6570\u636e['\u5217\u540d'] # inplace: \u662f\u5426\u5c31\u5730\u4fee\u6539 Series . dropna ( axis = 0 , inplace = False , how = None ) # axis: \u53ea\u6709\u4e00\u4e2a\u503c0\u6216\u8005'index' # inplace: \u662f\u5426\u5c31\u5730\u4fee\u6539 # how: str, optional,Not in use. Kept for compatibility. \u586b\u5145\u7f3a\u5931\u6570\u636e DataFrame . fillna ( value = None , method = None , axis = None , inplace = False , limit = None , downcast = None ) Series . fillna ( value = None , method = None , axis = None , inplace = False , limit = None , downcast = None ) # value: scalar, dict, Series, or DataFrame # method: {\u2018backfill\u2019, \u2018bfill\u2019, \u2018pad\u2019, \u2018ffill\u2019, None}, default None # axis: DataFrame-{0 or \u2018index\u2019, 1 or \u2018columns\u2019};Series-0 or \u2018index\u2019 # inplace: bool, default False # limit: int, default None\u586b\u5145\u6570\u91cf # downcast: dict, default is None","title":"\u5904\u7406\u7f3a\u5931\u503c"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/#_3","text":"\u67e5\u627e\u91cd\u590d\u503c \u53ef\u4ee5\u4f7f\u7528 df.duplicated() \u67e5\u770bDataFrame\u5bf9\u8c61\u7684\u91cd\u590d\u6570\u636e\uff0c\u8fd4\u56de\u4e00\u4e2aSeries\u5bf9\u8c61\uff0c\u91cd\u590d\u4e3aTrue\uff0c\u4e0d\u91cd\u590d\u4e3aFalse\uff1b\u4f7f\u7528 Series.duplicated() \u67e5\u770bSeries\u7684\u91cd\u590d\u6570\u636e\uff0c\u8fd4\u56de\u4e00\u4e2aSeries\u5bf9\u8c61\uff0c\u91cd\u590d\u4e3aTrue\uff0c\u4e0d\u91cd\u590d\u4e3aFalse\u3002 \u4e5f\u53ef\u4ee5\u901a\u8fc7 df[df.duplicated()] \u67e5\u770b\u91cd\u590d\u884c\u7684\u6570\u636e\u3002 DataFrame . duplicated ( subset = None , keep = 'first' ) # subset: \u6307\u5b9a\u5217\uff0c\u9ed8\u8ba4\u6240\u6709\u5217 # keep: {\u2018first\u2019, \u2018last\u2019, False}, default \u2018first\u2019,\u4fdd\u7559\u7b2c\u4e00\u4e2a\u8fd8\u662f\u6700\u540e\u4e00\u4e2a Series . duplicated ( keep = 'first' ) \u5220\u9664\u91cd\u590d\u503c \u53ef\u4ee5\u4f7f\u7528 df.drop_duplicates() \u5220\u9664DataFrame \u5bf9\u8c61\u4e2d\u91cd\u590d\u51fa\u73b0\u7684\u6574\u884c\u6570\u636e\uff1b\u4f7f\u7528 Series.drop_duplicates() \u5220\u9664Series \u5bf9\u8c61\u4e2d\u91cd\u590d\u51fa\u73b0\u7684\u6574\u884c\u6570\u636e\u3002 DataFrame . drop_duplicates ( subset = None , keep = 'first' , inplace = False , ignore_index = False ) # ignore_index: bool, default False,If True, the resulting axis will be labeled 0, 1, \u2026, n - 1 Series . drop_duplicates ( keep = 'first' , inplace = False )","title":"\u5904\u7406\u91cd\u590d\u503c"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/#_4","text":"\u68c0\u67e5\u3001\u7b5b\u9664\u5f02\u5e38\u503c \u4f7f\u7528 df.describe() \u53ef\u4ee5\u67e5\u770bDataFrame\u5bf9\u8c61\u7684\u63cf\u8ff0\u6027\u7edf\u8ba1\u4fe1\u606f\uff0c\u7136\u540e\u6839\u636e\u6700\u5927\u3001\u6700\u5c0f\u503c\u3001\u5e73\u5747\u6570\u3001\u4e2d\u4f4d\u6570\u7b49\u4fe1\u606f\uff0c\u5229\u7528\u5e03\u5c14\u7d22\u5f15\u7684\u65b9\u5f0f\u7b5b\u9664\u5f02\u5e38\u503c\u3002\u6bd4\u5982\u6709\u4e2a\u8bb0\u5f55\u852c\u83dc\u4ef7\u683c\u548c\u9500\u91cf\u7684\u6570\u636edata\uff0c\u8981\u7b5b\u9664\u6570\u636e\u4e2d\u4ef7\u683c\u5c0f\u4e8e0\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\uff1a data = data [ data [ '\u5355\u4ef7' ] > 0 ]","title":"\u5904\u7406\u5f02\u5e38\u503c"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/#_5","text":"\u8fd8\u662f\u4ee52016\u5e74\u4e16\u754c\u5404\u56fd\u4e8c\u6c27\u5316\u78b3\u6392\u653e\u91cf\uff082016world-co2.xls\uff09\u7684\u6570\u636e\u4e3a\u4f8b\u3002 \u6570\u636e\u7684\u8bfb\u53d6 import pandas as pd # \u8bfb\u53d62016\u5e74\u7684\u6570\u636e data = pd . read_excel ( r 'C:\\Users\\Administrator\\Desktop\\2016world-co2.xls' , sheet_name = 'Data' , header = 3 ) \u7f3a\u5931\u503c\u5904\u7406 \u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f data.info() \u53ef\u4ee5\u770b\u51fa\u5171\u6709264\u884c\u6570\u636e\uff0c\u9664\u5217'2016'\u5916\uff0c\u5176\u4ed6\u6570\u636e\u4e0d\u5b58\u5728\u7f3a\u5931\u3002 \u5220\u9664\u7f3a\u5931\u503c\uff08\u73b0\u5b9e\u4e2d\uff0c\u8981\u6839\u636e\u4e1a\u52a1\u6216\u5176\u4ed6\u8981\u6c42\u6765\u51b3\u5b9a\u662f\u5220\u9664\uff0c\u8fd8\u662f\u586b\u5145\u6570\u636e\uff09 data.dropna(inplace=True) \u5e76\u67e5\u770b\u3002 \u91cd\u590d\u6570\u636e\u5904\u7406 data.duplicated() \u53d1\u73b0\u5e76\u65e0\u91cd\u590d\u6570\u636e\u3002 \u5f02\u5e38\u6570\u636e\u5904\u7406 data.describe() \u73b0\u5b9e\u4e2d\uff0c\u8981\u6839\u636e\u4e1a\u52a1\u6216\u5176\u4ed6\u8981\u6c42\u6765\u51b3\u5b9a\u662f\u5426\u662f\u5f02\u5e38\u503c\u3002","title":"\u6848\u4f8b"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/","text":"\u6570\u636e\u8bfb\u53d6\u4e0e\u4fdd\u5b58 \u00b6 \u4e3b\u8981\u7528\u5230\u7684\u662f pandas\u5e93 \uff0c\u53ef\u4ee5\u901a\u8fc7 pip install pandas \u8fdb\u884c\u5b89\u88c5\uff1b\u4f7f\u7528\u65f6\u901a\u8fc7 import pandas as pd \u5bfc\u5165\uff08\u4ee5pd\u4f5c\u4e3a\u522b\u540d\uff09\uff1b pandas \u80fd\u8bfb\u53d6\u7684\u6587\u4ef6\u7c7b\u578b\u5f88\u591a\uff0c\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u5bf9 csv\u3001excel \u6587\u4ef6\u7684\u8bfb\u53d6\u548c\u4fdd\u5b58\uff1b\u66f4\u591a\u529f\u80fd\u53ef\u67e5\u9605 \u5b98\u65b9\u6587\u6863 \u3002 \u8bfb\u53d6\u4e0e\u4fdd\u5b58-excel\u6587\u4ef6 \u00b6 \u9700\u8981\u901a\u8fc7pip\u547d\u4ee4\u5b89\u88c5 openpyxl \u4e0e xlrd \uff1a pip install openpyxl pip install xlrd \u8bfb\u53d6excel\u6587\u4ef6 read_excel() \u00b6 pandas . read_excel ( io , sheet_name = 0 , header = 0 , names = None , index_col = None , usecols = None , squeeze = False , dtype = None , engine = None , converters = None , true_values = None , false_values = None , skiprows = None , nrows = None , na_values = None , keep_default_na = True , na_filter = True , verbose = False , parse_dates = False , date_parser = None , thousands = None , comment = None , skipfooter = 0 , convert_float = True , mangle_dupe_cols = True , storage_options = None ) \u5e38\u7528\u53c2\u6570\u4ecb\u7ecd\uff1a \u53c2\u6570 \u63cf\u8ff0 io str, bytes, ExcelFile, xlrd.Book, path object, or file-like object \u4e00\u822c\u4e3a\u6587\u4ef6\u8def\u5f84\u6216ExcelFile\u7c7b sheet_name str\uff08\u8868\u540d\uff09, int\uff08\u4ece0\u5f00\u59cb\u7b2c\u51e0\u4e2a\u8868\uff09, list\uff08\u591a\u4e2a\u5de5\u4f5c\u8868\uff09, or None\uff08\u6240\u6709\u5de5\u4f5c\u8868\uff09, default 0 header int, list of int, default 0 \u662f\u5426\u5c06\u7b2c\u4e00\u884c\u5f53\u4f5c\u5217\u540d index_col int, list of int, default None \u7d22\u5f15 na_values scalar, str, list-like, or dict, default None parse_dates bool, list-like, or dict, default False \u89e3\u6790\u4e3a\u65f6\u95f4\uff1aparse_dates=['\u5217\u540d'] \u57fa\u7840\u7528\u6cd5\uff1a import pandas as pd data = pd . read_excel ( 'path_to_file.xls\u6216.xlsx' , sheet_name = 'Sheet1' ) # \u6587\u4ef6\u8def\u5f84\u548csheet_name\u6839\u636e\u81ea\u5df1\u6587\u4ef6\u5185\u5bb9\u4fee\u6539\uff08\u4e0b\u540c\uff09 Excelfile\u7c7b\uff1a \u8bfb\u53d6\u4e00\u4e2aexcel\u6587\u4ef6\u7684\u591a\u5f20\u5de5\u4f5c\u8868\u65f6\uff0c\u5229\u7528\u8be5\u7c7b\u80fd\u591f\u4e00\u6b21\u8bfb\u53d6\u5230\u5185\u5b58\u3002 xlsx = pd . ExcelFile ( \"path_to_file.xls\u6216.xlsx\" ) df = pd . read_excel ( xlsx , \"Sheet1\" ) \u6216\u8005 with pd . ExcelFile ( \"path_to_file.xls\" ) as xls : df1 = pd . read_excel ( xls , \"Sheet1\" ) df2 = pd . read_excel ( xls , \"Sheet2\" ) \u5bf9\u4e0d\u540c\u5de5\u4f5c\u8868\u4f20\u4e0d\u540c\u53c2\u6570 data = {} # For when Sheet1's format differs from Sheet2 with pd . ExcelFile ( \"path_to_file.xls\" ) as xls : data [ \"Sheet1\" ] = pd . read_excel ( xls , \"Sheet1\" , index_col = None , na_values = [ \"NA\" ]) data [ \"Sheet2\" ] = pd . read_excel ( xls , \"Sheet2\" , index_col = 1 ) \u5982\u679c\u4e0d\u540c\u5de5\u4f5c\u8868\u4f20\u7684\u53c2\u6570\u76f8\u540c\uff0cExcelFile\u65b9\u5f0f\u76f8\u5f53\u4e8eread_excel\u51fd\u6570 data = {} with pd . ExcelFile ( \"path_to_file.xls\" ) as xls : data [ \"Sheet1\" ] = pd . read_excel ( xls , \"Sheet1\" , index_col = None , na_values = [ \"NA\" ]) data [ \"Sheet2\" ] = pd . read_excel ( xls , \"Sheet2\" , index_col = None , na_values = [ \"NA\" ]) # equivalent using the read_excel function data = pd . read_excel ( \"path_to_file.xls\" , [ \"Sheet1\" , \"Sheet2\" ], index_col = None , na_values = [ \"NA\" ]) \u89e3\u6790\u65e5\u671f\uff1a pd . read_excel ( \"path_to_file.xls\" , \"Sheet1\" , parse_dates = [ \"date_strings\" ]) \u6307\u5b9a\u7d22\u5f15\uff1a pd . read_excel ( \"path_to_file.xls\" , \"Sheet1\" , index_col = '\u5217\u540d' ) # index_col\u9ed8\u8ba4\u503c\u662fNone \u4fdd\u5b58\u5230excel\u6587\u4ef6 to_excel() \u00b6 \u8981\u5c06 DataFrame \u5bf9\u8c61\u5199\u5165Excel\u6587\u4ef6\u7684\u5de5\u4f5c\u8868\uff0c\u53ef\u4ee5\u4f7f\u7528 to_excel \u5b9e\u4f8b\u65b9\u6cd5\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u662fexcel\u6587\u4ef6\u7684\u8def\u5f84\u540d\u79f0\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u5199\u5165excel\u7684\u5de5\u8d44\u8868\u540d\u79f0\u3002\u4f8b\u5982\uff1a df . to_excel ( 'path_to_file.xlsx' , sheet_name = 'Sheet1' ) \u66f4\u591a\u53c2\u6570\u4ecb\u7ecd\uff0c\u8bf7\u67e5\u9605 pandas.read_excel \u3002 \u8bfb\u53d6\u4e0e\u4fdd\u5b58-csv\u6587\u4ef6 \u00b6 \u8bfb\u53d6csv\u6587\u4ef6 read_csv() \u00b6 pandas . read_csv ( filepath_or_buffer , sep =< object object > , delimiter = None , header = 'infer' , names = None , index_col = None , usecols = None , squeeze = False , prefix = None , mangle_dupe_cols = True , dtype = None , engine = None , converters = None , true_values = None , false_values = None , skipinitialspace = False , skiprows = None , skipfooter = 0 , nrows = None , na_values = None , keep_default_na = True , na_filter = True , verbose = False , skip_blank_lines = True , parse_dates = False , infer_datetime_format = False , keep_date_col = False , date_parser = None , dayfirst = False , cache_dates = True , iterator = False , chunksize = None , compression = 'infer' , thousands = None , decimal = '.' , lineterminator = None , quotechar = '\"' , quoting = 0 , doublequote = True , escapechar = None , comment = None , encoding = None , dialect = None , error_bad_lines = True , warn_bad_lines = True , delim_whitespace = False , low_memory = True , memory_map = False , float_precision = None , storage_options = None ) \u53ef\u89c1 read_csv \u7684\u53c2\u6570\u8f83\u591a\uff0c\u4f7f\u7528\u65f6\u6839\u636e\u6587\u4ef6\u5185\u5bb9\u8fdb\u884c\u9009\u62e9\uff1b\u5e38\u7528\u7684\u6709\u4ee5\u4e0b\u51e0\u4e2a\u53c2\u6570\uff1a \u53c2\u6570 \u63cf\u8ff0 filepath_or_buffer str, path object or file-like object sep str, default \u2018,\u2019\u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u662f\u9017\u53f7 header int, list of int, default \u2018infer\u2019 \u8868\u5934 index_col int, str, sequence of int / str, or False, default None \u7d22\u5f15 encoding str, optional \u89e3\u7801 parse_dates bool or list of int or names or list of lists or dict, default False \u57fa\u7840\u7528\u6cd5\uff1a pd . read_csv ( '\u6587\u4ef6\u8def\u5f84' , sep = '\u5206\u9694\u7b26' , encoding = '\u89e3\u7801\u65b9\u5f0f' ) \u4fdd\u5b58\u5230csv\u6587\u4ef6 to_csv() \u00b6 to_csv() \u7684\u53ef\u9009\u53c2\u6570\u4e5f\u8f83\u591a\uff0c\u5e38\u7528\u7684\u53c2\u6570\u6709\uff1a \u53c2\u6570 \u63cf\u8ff0 path_or_buf \u4fdd\u5b58\u8def\u5f84 sep \u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u662f\u2018,\u2019 na_rep \u7f3a\u5931\u503c\uff0c\u9ed8\u8ba4\u662f\u7a7a\u683c header \u662f\u5426\u5e26\u8868\u5934\uff0c\u9ed8\u8ba4\u662fTrue encoding \u89e3\u7801\u65b9\u5f0f \u66f4\u591a\u53c2\u6570\u4ecb\u7ecd\uff0c\u8bf7\u67e5\u9605 pandas.read_csv \u6848\u4f8b \u00b6 \u8bfb\u53d6excel\u6570\u636e \u00b6 \u6570\u636e\u4e3a2016\u5e74\u4e16\u754c\u5404\u56fd\u4e8c\u6c27\u5316\u78b3\u6392\u653e\u91cf\uff082016world-co2.xls\uff09\uff0c\u6570\u636e\u6e90\u4e8e \u4e16\u754c\u94f6\u884c \u6587\u4ef6\u5b58\u653e\u5728 C:\\Users\\Administrator\\Desktop\\2016world-co2.xls ,\u5185\u5bb9\u5982\u4e0b\uff1a \u53ef\u4ee5\u53d1\u73b0Excel\u6587\u4ef6\u67093\u4e2a\u5de5\u4f5c\u8868\uff0c\u6211\u4eec\u9700\u8981\u7684\u6570\u636e\u5728Data\u5de5\u4f5c\u8868\u4e2d\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e0d\u4f20 sheet_name \u53c2\u6570\uff0c\u56e0\u4e3a\u9700\u8981\u7684\u6570\u636e\u5c31\u5728\u7b2c0\u4e2a\u5de5\u4f5c\u8868\u4e2d\uff09\uff0c\u53e6\u5916\u8868\u5934\u4e3a\u7b2c\u4e09\u884c\uff08\u4ece0\u5f00\u59cb\u7b97\uff09\uff1b\u4e3a\u6b64\u53ef\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8bfb\u53d6\u6570\u636e\uff1a import pandas as pd # \u8bfb\u53d62016\u5e74\u7684\u6570\u636e data = pd . read_excel ( r 'C:\\Users\\Administrator\\Desktop\\2016world-co2.xls' , sheet_name = 'Data' , header = 3 ) \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a \u4fdd\u5b58\u6570\u636e \u00b6 data . to_excel ( 'data.xlsx' , sheet_name = 'co2' ) # \u4fdd\u5b58\u5230\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e0b\uff0c\u6587\u4ef6\u540d\u4e3adata.xlsx\uff0c\u5de5\u4f5c\u8868\u540d\u4e3aco2","title":"\u6570\u636e\u8bfb\u53d6\u4e0e\u4fdd\u5b58"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#_1","text":"\u4e3b\u8981\u7528\u5230\u7684\u662f pandas\u5e93 \uff0c\u53ef\u4ee5\u901a\u8fc7 pip install pandas \u8fdb\u884c\u5b89\u88c5\uff1b\u4f7f\u7528\u65f6\u901a\u8fc7 import pandas as pd \u5bfc\u5165\uff08\u4ee5pd\u4f5c\u4e3a\u522b\u540d\uff09\uff1b pandas \u80fd\u8bfb\u53d6\u7684\u6587\u4ef6\u7c7b\u578b\u5f88\u591a\uff0c\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u5bf9 csv\u3001excel \u6587\u4ef6\u7684\u8bfb\u53d6\u548c\u4fdd\u5b58\uff1b\u66f4\u591a\u529f\u80fd\u53ef\u67e5\u9605 \u5b98\u65b9\u6587\u6863 \u3002","title":"\u6570\u636e\u8bfb\u53d6\u4e0e\u4fdd\u5b58"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#-excel","text":"\u9700\u8981\u901a\u8fc7pip\u547d\u4ee4\u5b89\u88c5 openpyxl \u4e0e xlrd \uff1a pip install openpyxl pip install xlrd","title":"\u8bfb\u53d6\u4e0e\u4fdd\u5b58-excel\u6587\u4ef6"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#excel-read_excel","text":"pandas . read_excel ( io , sheet_name = 0 , header = 0 , names = None , index_col = None , usecols = None , squeeze = False , dtype = None , engine = None , converters = None , true_values = None , false_values = None , skiprows = None , nrows = None , na_values = None , keep_default_na = True , na_filter = True , verbose = False , parse_dates = False , date_parser = None , thousands = None , comment = None , skipfooter = 0 , convert_float = True , mangle_dupe_cols = True , storage_options = None ) \u5e38\u7528\u53c2\u6570\u4ecb\u7ecd\uff1a \u53c2\u6570 \u63cf\u8ff0 io str, bytes, ExcelFile, xlrd.Book, path object, or file-like object \u4e00\u822c\u4e3a\u6587\u4ef6\u8def\u5f84\u6216ExcelFile\u7c7b sheet_name str\uff08\u8868\u540d\uff09, int\uff08\u4ece0\u5f00\u59cb\u7b2c\u51e0\u4e2a\u8868\uff09, list\uff08\u591a\u4e2a\u5de5\u4f5c\u8868\uff09, or None\uff08\u6240\u6709\u5de5\u4f5c\u8868\uff09, default 0 header int, list of int, default 0 \u662f\u5426\u5c06\u7b2c\u4e00\u884c\u5f53\u4f5c\u5217\u540d index_col int, list of int, default None \u7d22\u5f15 na_values scalar, str, list-like, or dict, default None parse_dates bool, list-like, or dict, default False \u89e3\u6790\u4e3a\u65f6\u95f4\uff1aparse_dates=['\u5217\u540d'] \u57fa\u7840\u7528\u6cd5\uff1a import pandas as pd data = pd . read_excel ( 'path_to_file.xls\u6216.xlsx' , sheet_name = 'Sheet1' ) # \u6587\u4ef6\u8def\u5f84\u548csheet_name\u6839\u636e\u81ea\u5df1\u6587\u4ef6\u5185\u5bb9\u4fee\u6539\uff08\u4e0b\u540c\uff09 Excelfile\u7c7b\uff1a \u8bfb\u53d6\u4e00\u4e2aexcel\u6587\u4ef6\u7684\u591a\u5f20\u5de5\u4f5c\u8868\u65f6\uff0c\u5229\u7528\u8be5\u7c7b\u80fd\u591f\u4e00\u6b21\u8bfb\u53d6\u5230\u5185\u5b58\u3002 xlsx = pd . ExcelFile ( \"path_to_file.xls\u6216.xlsx\" ) df = pd . read_excel ( xlsx , \"Sheet1\" ) \u6216\u8005 with pd . ExcelFile ( \"path_to_file.xls\" ) as xls : df1 = pd . read_excel ( xls , \"Sheet1\" ) df2 = pd . read_excel ( xls , \"Sheet2\" ) \u5bf9\u4e0d\u540c\u5de5\u4f5c\u8868\u4f20\u4e0d\u540c\u53c2\u6570 data = {} # For when Sheet1's format differs from Sheet2 with pd . ExcelFile ( \"path_to_file.xls\" ) as xls : data [ \"Sheet1\" ] = pd . read_excel ( xls , \"Sheet1\" , index_col = None , na_values = [ \"NA\" ]) data [ \"Sheet2\" ] = pd . read_excel ( xls , \"Sheet2\" , index_col = 1 ) \u5982\u679c\u4e0d\u540c\u5de5\u4f5c\u8868\u4f20\u7684\u53c2\u6570\u76f8\u540c\uff0cExcelFile\u65b9\u5f0f\u76f8\u5f53\u4e8eread_excel\u51fd\u6570 data = {} with pd . ExcelFile ( \"path_to_file.xls\" ) as xls : data [ \"Sheet1\" ] = pd . read_excel ( xls , \"Sheet1\" , index_col = None , na_values = [ \"NA\" ]) data [ \"Sheet2\" ] = pd . read_excel ( xls , \"Sheet2\" , index_col = None , na_values = [ \"NA\" ]) # equivalent using the read_excel function data = pd . read_excel ( \"path_to_file.xls\" , [ \"Sheet1\" , \"Sheet2\" ], index_col = None , na_values = [ \"NA\" ]) \u89e3\u6790\u65e5\u671f\uff1a pd . read_excel ( \"path_to_file.xls\" , \"Sheet1\" , parse_dates = [ \"date_strings\" ]) \u6307\u5b9a\u7d22\u5f15\uff1a pd . read_excel ( \"path_to_file.xls\" , \"Sheet1\" , index_col = '\u5217\u540d' ) # index_col\u9ed8\u8ba4\u503c\u662fNone","title":"\u8bfb\u53d6excel\u6587\u4ef6 read_excel()"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#excel-to_excel","text":"\u8981\u5c06 DataFrame \u5bf9\u8c61\u5199\u5165Excel\u6587\u4ef6\u7684\u5de5\u4f5c\u8868\uff0c\u53ef\u4ee5\u4f7f\u7528 to_excel \u5b9e\u4f8b\u65b9\u6cd5\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u662fexcel\u6587\u4ef6\u7684\u8def\u5f84\u540d\u79f0\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u5199\u5165excel\u7684\u5de5\u8d44\u8868\u540d\u79f0\u3002\u4f8b\u5982\uff1a df . to_excel ( 'path_to_file.xlsx' , sheet_name = 'Sheet1' ) \u66f4\u591a\u53c2\u6570\u4ecb\u7ecd\uff0c\u8bf7\u67e5\u9605 pandas.read_excel \u3002","title":"\u4fdd\u5b58\u5230excel\u6587\u4ef6 to_excel()"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#-csv","text":"","title":"\u8bfb\u53d6\u4e0e\u4fdd\u5b58-csv\u6587\u4ef6"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#csv-read_csv","text":"pandas . read_csv ( filepath_or_buffer , sep =< object object > , delimiter = None , header = 'infer' , names = None , index_col = None , usecols = None , squeeze = False , prefix = None , mangle_dupe_cols = True , dtype = None , engine = None , converters = None , true_values = None , false_values = None , skipinitialspace = False , skiprows = None , skipfooter = 0 , nrows = None , na_values = None , keep_default_na = True , na_filter = True , verbose = False , skip_blank_lines = True , parse_dates = False , infer_datetime_format = False , keep_date_col = False , date_parser = None , dayfirst = False , cache_dates = True , iterator = False , chunksize = None , compression = 'infer' , thousands = None , decimal = '.' , lineterminator = None , quotechar = '\"' , quoting = 0 , doublequote = True , escapechar = None , comment = None , encoding = None , dialect = None , error_bad_lines = True , warn_bad_lines = True , delim_whitespace = False , low_memory = True , memory_map = False , float_precision = None , storage_options = None ) \u53ef\u89c1 read_csv \u7684\u53c2\u6570\u8f83\u591a\uff0c\u4f7f\u7528\u65f6\u6839\u636e\u6587\u4ef6\u5185\u5bb9\u8fdb\u884c\u9009\u62e9\uff1b\u5e38\u7528\u7684\u6709\u4ee5\u4e0b\u51e0\u4e2a\u53c2\u6570\uff1a \u53c2\u6570 \u63cf\u8ff0 filepath_or_buffer str, path object or file-like object sep str, default \u2018,\u2019\u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u662f\u9017\u53f7 header int, list of int, default \u2018infer\u2019 \u8868\u5934 index_col int, str, sequence of int / str, or False, default None \u7d22\u5f15 encoding str, optional \u89e3\u7801 parse_dates bool or list of int or names or list of lists or dict, default False \u57fa\u7840\u7528\u6cd5\uff1a pd . read_csv ( '\u6587\u4ef6\u8def\u5f84' , sep = '\u5206\u9694\u7b26' , encoding = '\u89e3\u7801\u65b9\u5f0f' )","title":"\u8bfb\u53d6csv\u6587\u4ef6 read_csv()"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#csv-to_csv","text":"to_csv() \u7684\u53ef\u9009\u53c2\u6570\u4e5f\u8f83\u591a\uff0c\u5e38\u7528\u7684\u53c2\u6570\u6709\uff1a \u53c2\u6570 \u63cf\u8ff0 path_or_buf \u4fdd\u5b58\u8def\u5f84 sep \u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u662f\u2018,\u2019 na_rep \u7f3a\u5931\u503c\uff0c\u9ed8\u8ba4\u662f\u7a7a\u683c header \u662f\u5426\u5e26\u8868\u5934\uff0c\u9ed8\u8ba4\u662fTrue encoding \u89e3\u7801\u65b9\u5f0f \u66f4\u591a\u53c2\u6570\u4ecb\u7ecd\uff0c\u8bf7\u67e5\u9605 pandas.read_csv","title":"\u4fdd\u5b58\u5230csv\u6587\u4ef6 to_csv()"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#_2","text":"","title":"\u6848\u4f8b"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#excel","text":"\u6570\u636e\u4e3a2016\u5e74\u4e16\u754c\u5404\u56fd\u4e8c\u6c27\u5316\u78b3\u6392\u653e\u91cf\uff082016world-co2.xls\uff09\uff0c\u6570\u636e\u6e90\u4e8e \u4e16\u754c\u94f6\u884c \u6587\u4ef6\u5b58\u653e\u5728 C:\\Users\\Administrator\\Desktop\\2016world-co2.xls ,\u5185\u5bb9\u5982\u4e0b\uff1a \u53ef\u4ee5\u53d1\u73b0Excel\u6587\u4ef6\u67093\u4e2a\u5de5\u4f5c\u8868\uff0c\u6211\u4eec\u9700\u8981\u7684\u6570\u636e\u5728Data\u5de5\u4f5c\u8868\u4e2d\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e0d\u4f20 sheet_name \u53c2\u6570\uff0c\u56e0\u4e3a\u9700\u8981\u7684\u6570\u636e\u5c31\u5728\u7b2c0\u4e2a\u5de5\u4f5c\u8868\u4e2d\uff09\uff0c\u53e6\u5916\u8868\u5934\u4e3a\u7b2c\u4e09\u884c\uff08\u4ece0\u5f00\u59cb\u7b97\uff09\uff1b\u4e3a\u6b64\u53ef\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8bfb\u53d6\u6570\u636e\uff1a import pandas as pd # \u8bfb\u53d62016\u5e74\u7684\u6570\u636e data = pd . read_excel ( r 'C:\\Users\\Administrator\\Desktop\\2016world-co2.xls' , sheet_name = 'Data' , header = 3 ) \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a","title":"\u8bfb\u53d6excel\u6570\u636e"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/#_3","text":"data . to_excel ( 'data.xlsx' , sheet_name = 'co2' ) # \u4fdd\u5b58\u5230\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e0b\uff0c\u6587\u4ef6\u540d\u4e3adata.xlsx\uff0c\u5de5\u4f5c\u8868\u540d\u4e3aco2","title":"\u4fdd\u5b58\u6570\u636e"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/","text":"\u67f1\u72b6\u56fe \u00b6 \u7ed8\u56fe\u4e3b\u8981\u7528\u5230\u7684\u662f matplotlib \u5e93\uff08\u7248\u672c\u4e3a 3.4.1 \uff09\u3001 seaborn \u5e93\uff08\u7248\u672c\u4e3a 0.11.1 \uff09\uff1b matplotlib \u5e93\uff08\u7248\u672c\u4e3a 3.4.1 \uff09\u589e\u52a0\u4e9b\u65b0\u529f\u80fd\uff0c\u4f8b\u5982\uff1a bar_label() \u53ef\u4ee5\u5b9e\u73b0\u5bf9\u67f1\u72b6\u56fe\u3001\u6761\u5f62\u56fe\u81ea\u52a8\u6dfb\u52a0\u6807\u7b7e\u7b49\uff1b\u8981\u5347\u7ea7\u5230\u6b64\u7248\u672c\uff0c\u8bf7\u4f7f\u7528 pip install - -upgrade matplotlib \u8fdb\u884c\u5347\u7ea7\uff0c\u66f4\u591a\u529f\u80fd\u8bf7\u67e5\u9605 \u5b98\u65b9\u6587\u6863 \uff1b seaborn \u529f\u80fd\u53ca\u64cd\u4f5c\uff0c\u8be6\u89c1 \u5b98\u65b9\u6587\u6863 \u3002 import pandas as pd import matplotlib.pyplot as plt import matplotlib as mpl import seaborn as sns import numpy as np import warnings warnings . filterwarnings ( 'ignore' ) # \u5ffd\u7565\u9519\u8bef\u8f93\u51fa % matplotlib inline # jupyter note\u663e\u793a\u56fe\u7247 \u6570\u636e\u7b80\u4ecb \u00b6 \u8bfb\u53d6\u6570\u636e \u6570\u636e\u662f\u5173\u4e8e\u91d1\u7816\u56fd\u5bb6\u7684GDP\u548c\u4eba\u5747GDP\uff0c\u6570\u636e\u6e90\u4e8e \u4e16\u754c\u94f6\u884c \u3002 data = pd . read_excel ( 'BRICS.xlsx' ) data . head () Series Name Country Name Country Code 1990 2000 2011 2012 2013 2014 2015 2016 2017 2018 2019 0 GDP \u5df4\u897f BRA 1.189604e+12 1.538706e+12 2.296662e+12 2.340784e+12 2.411121e+12 2.423272e+12 2.337348e+12 2.260779e+12 2.290686e+12 2.320859e+12 2.347238e+12 1 \u4eba\u5747 GDP \u5df4\u897f BRA 7.983747e+03 8.803153e+03 1.162781e+04 1.174578e+04 1.199348e+04 1.195121e+04 1.143115e+04 1.096597e+04 1.102172e+04 1.107971e+04 1.112174e+04 2 GDP \u4fc4\u7f57\u65af\u8054\u90a6 RUS 1.416187e+12 9.515709e+11 1.590489e+12 1.654492e+12 1.683535e+12 1.695931e+12 1.662475e+12 1.665695e+12 1.696107e+12 1.739126e+12 1.762463e+12 3 \u4eba\u5747 GDP \u4fc4\u7f57\u65af\u8054\u90a6 RUS 9.570808e+03 6.491072e+03 1.112534e+04 1.155358e+04 1.173138e+04 1.160876e+04 1.135524e+04 1.135640e+04 1.155053e+04 1.184444e+04 1.201153e+04 4 GDP \u5370\u5ea6 IND 5.075650e+11 8.733574e+11 1.763440e+12 1.859660e+12 1.978420e+12 2.125025e+12 2.294947e+12 2.484425e+12 2.659424e+12 2.822169e+12 2.940157e+12 \u4e3a\u65b9\u4fbf\u663e\u793a\uff0c\u5bf9\u8f93\u51fa\u7ed3\u679c\u8fdb\u884c\u4e86\u8c03\u6574\u3002 \u6570\u636e\u6574\u7406 \u5c06\u5e74\u4efd\u3001\u6570\u503c\u5206\u522b\u6574\u7406\u6210\u4e00\u5217\uff0c\u7528\u5230\u7684\u662f melt() \u65b9\u6cd5\u3002 data_1 = data . melt ( id_vars = [ 'Series Name' , 'Country Name' ], value_vars = [ 1990 , 2000 , 2011 , 2012 , 2013 , 2014 , 2015 , 2016 , 2017 , 2018 , 2019 ], var_name = 'year' , value_name = 'constant 2010 US$' ) data_1 . head () Series Name Country Name year constant 2010 US$ 0 GDP \u5df4\u897f 1990 1.189604e+12 1 \u4eba\u5747 GDP \u5df4\u897f 1990 7.983747e+03 2 GDP \u4fc4\u7f57\u65af\u8054\u90a6 1990 1.416187e+12 3 \u4eba\u5747 GDP \u4fc4\u7f57\u65af\u8054\u90a6 1990 9.570808e+03 4 GDP \u5370\u5ea6 1990 5.075650e+11 \u63d0\u53d6\u6570\u636e \u6bd4\u5982\u8981\u5bf92019\u5e74\u91d1\u7816\u56fd\u5bb6\u7684GDP\u548c\u4eba\u5747GDP\u8fdb\u884c\u53ef\u89c6\u5316\uff0c\u53ef\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a data_2 = data_1 [ data_1 [ 'year' ] == 2019 ] gdp = data_2 [ data_2 [ 'Series Name' ] == 'GDP' ] def trans ( x ): return round ( x / 100000000 , 2 ) gdp [ 'constant 2010 US$' ] = gdp [ 'constant 2010 US$' ] . apply ( trans ) # \u8f6c\u5316\u6210\u4ebf\u7f8e\u5143\uff0c\u4fbf\u4e8e\u663e\u793a pergdp = data_2 [ data_2 [ 'Series Name' ] == '\u4eba\u5747 GDP' ] matplotlib\u65b9\u6cd5 \u00b6 \u67f1\u72b6\u56fe \u00b6 \u91d1\u7816\u56fd\u5bb6GDP\u67f1\u72b6\u56fe matplotlib . pyplot . bar \uff08 x \uff0c height \uff0c width = 0.8 \uff0c bottom = None \uff0c * \uff0c align = 'center' \uff0c data = None \uff0c ** kwargs \uff09 mpl . rcParams [ 'font.sans-serif' ] = [ 'Microsoft YaHei' ] # \u8981\u663e\u793a\u4e2d\u6587\uff0c\u9700\u8981\u5bf9\u5b57\u4f53\u8fdb\u884c\u8bbe\u7f6e\uff0c\u8fd9\u91cc\u9009\u62e9\u4f7f\u7528\u5fae\u8f6f\u96c5\u9ed1\u5b57\u4f53 mpl . rcParams [ 'figure.autolayout' ] = True # automatically adjust subplot plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) bar = ax . bar ( gdp [ 'Country Name' ], # x gdp [ 'constant 2010 US$' ], # height width = 0.8 , # \u5bbd\u5ea6 align = 'center' # \u5bf9\u9f50 ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6GDP' , fontsize = 12 , weight = 'bold' ) ax . set_yticks ([]) # \u4e0d\u663e\u793a\u7eb5\u5750\u6807\u523b\u5ea6 ax . bar_label ( bar , padding = 2 , fmt = ' %.2f \u4ebf\u7f8e\u5143' ) plt . show () # \u4fdd\u5b58\u56fe\u7247 fig . savefig ( 'bar-GDP.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\u67f1\u72b6\u56fe plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) bar = ax . bar ( pergdp [ 'Country Name' ], # x pergdp [ 'constant 2010 US$' ], # height width = 0.8 , # \u5bbd\u5ea6 align = 'center' # \u5bf9\u9f50 ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP' , fontsize = 12 , weight = 'bold' ) ax . set_yticks ([]) # \u4e0d\u663e\u793a\u7eb5\u5750\u6807\u523b\u5ea6 ax . bar_label ( bar , padding = 2 , fmt = ' %.2f \u7f8e\u5143' ) plt . show () # \u4fdd\u5b58\u56fe\u7247 fig . savefig ( 'bar-perGdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u5206\u7ec4\u67f1\u72b6\u56fe \u00b6 \u7531\u4e8e\u4e4b\u524d\u4f7f\u7528\u7684\u6570\u636e\u5dee\u5f02\u8f83\u5927\uff0c\u8003\u8651\u5230\u6570\u636e\u663e\u793a\u95ee\u9898\uff0c\u6240\u4ee5\u672c\u6848\u4f8b\u4f7f\u7528 matplotlib \u5b98\u65b9\u6587\u6863 \u7684\u6570\u636e\u3002 plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 labels = [ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ] men_means = [ 20 , 34 , 30 , 35 , 27 ] women_means = [ 25 , 32 , 34 , 20 , 25 ] x = np . arange ( len ( labels )) # the label locations width = 0.35 # the width of the bars fig , ax = plt . subplots ( figsize = ( 8 , 4 )) rects1 = ax . bar ( x - width / 2 , men_means , width , label = 'Men' ) rects2 = ax . bar ( x + width / 2 , women_means , width , label = 'Women' ) # Add some text for labels, title and custom x-axis tick labels, etc. ax . set_ylabel ( 'Scores' ) ax . set_title ( 'Scores by group and gender' ) ax . set_xticks ( x ) ax . set_xticklabels ( labels ) ax . legend () ax . bar_label ( rects1 , padding = 3 ) ax . bar_label ( rects2 , padding = 3 ) fig . tight_layout () plt . show () fig . savefig ( 'bar-grouped.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u5806\u79ef\u67f1\u72b6\u56fe \u00b6 \u6848\u4f8b\u6765\u6e90\u4e8ematplotlib \u5b98\u65b9\u6587\u6863 \uff0c\u7565\u6709\u4fee\u6539\uff1b\u7ed8\u5236\u5806\u79ef\u67f1\u72b6\u56fe\uff0c\u4e3b\u8981\u662f bottom \u53c2\u6570\u7684\u914d\u7f6e\u3002 labels = [ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ] men_means = [ 20 , 35 , 30 , 35 , 27 ] women_means = [ 25 , 32 , 34 , 20 , 25 ] width = 0.35 # the width of the bars: can also be len(x) sequence fig , ax = plt . subplots ( figsize = ( 8 , 4 )) bar1 = ax . bar ( labels , men_means , width , label = 'Men' ) bar2 = ax . bar ( labels , women_means , width , bottom = men_means , label = 'Women' ) ax . set_ylabel ( 'Scores' ) ax . set_title ( 'Scores by group and gender' ) ax . legend () ax . bar_label ( bar1 , label_type = 'center' ) ax . bar_label ( bar2 , label_type = 'center' ) plt . show () fig . savefig ( 'bar-stack.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b seaborn\u65b9\u6cd5 \u00b6 seaborn . barplot ( * , x = None , y = None , hue = None , data = None , order = None , hue_order = None , estimator =< function mean at 0x7fecadf1cee0 > , ci = 95 , n_boot = 1000 , units = None , seed = None , orient = None , color = None , palette = None , saturation = 0.75 , errcolor = '.26' , errwidth = None , capsize = None , dodge = True , ax = None , ** kwargs ) \u67f1\u72b6\u56fe \u00b6 \u5229\u7528 seaborn \u7ed8\u56fe\uff0c\u4f1a\u51fa\u73b0\u4e2d\u6587\u4e71\u7801\uff1b mpl.rcParams['font.sans-serif'] = ['Microsoft YaHei'] \u547d\u4ee4\u4e5f\u6ca1\u6709\u6548\u679c\uff0c\u5efa\u8bae\u5728\u6807\u9898\u3001\u523b\u5ea6\u6807\u7b7e\u91cc\u901a\u8fc7\u5b57\u5178\u6216\u5173\u952e\u5b57\u7684\u65b9\u5f0f\u8bbe\u7f6e\uff1b\u53e6\u5916\uff0c\u6dfb\u52a0\u6570\u636e\u6807\u7b7e\u7684\u65b9\u5f0f\u6709\u5f85\u63a2\u8ba8\u3002 \u91d1\u7816\u56fd\u5bb6GDP\u67f1\u72b6\u56fe sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( x = gdp [ 'Country Name' ], y = gdp [ 'constant 2010 US$' ], data = gdp ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6GDP\uff08\u4ebf\u7f8e\u5143\uff09' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) ax . set_xticklabels ( gdp [ 'Country Name' ], fontdict = { 'family' : 'Microsoft YaHei' }) fig . savefig ( 'seaborn-gdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\u67f1\u72b6\u56fe sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( x = pergdp [ 'Country Name' ], y = pergdp [ 'constant 2010 US$' ], data = pergdp ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\uff08\u7f8e\u5143\uff09' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) ax . set_xticklabels ( pergdp [ 'Country Name' ], fontdict = { 'family' : 'Microsoft YaHei' }) fig . savefig ( 'seaborn-pergdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u5206\u7ec4\u67f1\u72b6\u56fe \u00b6 \u7531\u4e8e\u52a0\u8f7d seaborn \u5b98\u7f51\u7684\u6570\u636e\u51fa\u73b0\u95ee\u9898\uff0c\u672c\u6848\u4f8b\u5c06 motplotlib \u5bf9\u5e94\u6848\u4f8b\u7684\u6570\u636e\u8fdb\u884c\u4e86\u7b80\u5355\u52a0\u5de5\uff1b\u4e3b\u8981\u53c2\u6570\u8bbe\u7f6e hue \u3002 df = pd . DataFrame ({ 'labels' :[ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ], 'men_means' :[ 20 , 34 , 30 , 35 , 27 ], 'women_means' : [ 25 , 32 , 34 , 20 , 25 ]}) df1 = df . melt ( id_vars = [ 'labels' ], value_vars = [ 'men_means' , 'women_means' ], var_name = 'sex' , value_name = 'value' ) sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( x = 'labels' , y = 'value' , hue = 'sex' , data = df1 ) ax . set_title ( 'Scores by group and gender' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) fig . savefig ( 'seaborn-grouped.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u5806\u79ef\u67f1\u72b6\u56fe \u00b6 \u5b98\u65b9\u6587\u6863\u5e76\u6ca1\u6d89\u53ca\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u53c2\u9605 \u6b64\u5904 \u3002","title":"\u67f1\u72b6\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/#_1","text":"\u7ed8\u56fe\u4e3b\u8981\u7528\u5230\u7684\u662f matplotlib \u5e93\uff08\u7248\u672c\u4e3a 3.4.1 \uff09\u3001 seaborn \u5e93\uff08\u7248\u672c\u4e3a 0.11.1 \uff09\uff1b matplotlib \u5e93\uff08\u7248\u672c\u4e3a 3.4.1 \uff09\u589e\u52a0\u4e9b\u65b0\u529f\u80fd\uff0c\u4f8b\u5982\uff1a bar_label() \u53ef\u4ee5\u5b9e\u73b0\u5bf9\u67f1\u72b6\u56fe\u3001\u6761\u5f62\u56fe\u81ea\u52a8\u6dfb\u52a0\u6807\u7b7e\u7b49\uff1b\u8981\u5347\u7ea7\u5230\u6b64\u7248\u672c\uff0c\u8bf7\u4f7f\u7528 pip install - -upgrade matplotlib \u8fdb\u884c\u5347\u7ea7\uff0c\u66f4\u591a\u529f\u80fd\u8bf7\u67e5\u9605 \u5b98\u65b9\u6587\u6863 \uff1b seaborn \u529f\u80fd\u53ca\u64cd\u4f5c\uff0c\u8be6\u89c1 \u5b98\u65b9\u6587\u6863 \u3002 import pandas as pd import matplotlib.pyplot as plt import matplotlib as mpl import seaborn as sns import numpy as np import warnings warnings . filterwarnings ( 'ignore' ) # \u5ffd\u7565\u9519\u8bef\u8f93\u51fa % matplotlib inline # jupyter note\u663e\u793a\u56fe\u7247","title":"\u67f1\u72b6\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/#_2","text":"\u8bfb\u53d6\u6570\u636e \u6570\u636e\u662f\u5173\u4e8e\u91d1\u7816\u56fd\u5bb6\u7684GDP\u548c\u4eba\u5747GDP\uff0c\u6570\u636e\u6e90\u4e8e \u4e16\u754c\u94f6\u884c \u3002 data = pd . read_excel ( 'BRICS.xlsx' ) data . head () Series Name Country Name Country Code 1990 2000 2011 2012 2013 2014 2015 2016 2017 2018 2019 0 GDP \u5df4\u897f BRA 1.189604e+12 1.538706e+12 2.296662e+12 2.340784e+12 2.411121e+12 2.423272e+12 2.337348e+12 2.260779e+12 2.290686e+12 2.320859e+12 2.347238e+12 1 \u4eba\u5747 GDP \u5df4\u897f BRA 7.983747e+03 8.803153e+03 1.162781e+04 1.174578e+04 1.199348e+04 1.195121e+04 1.143115e+04 1.096597e+04 1.102172e+04 1.107971e+04 1.112174e+04 2 GDP \u4fc4\u7f57\u65af\u8054\u90a6 RUS 1.416187e+12 9.515709e+11 1.590489e+12 1.654492e+12 1.683535e+12 1.695931e+12 1.662475e+12 1.665695e+12 1.696107e+12 1.739126e+12 1.762463e+12 3 \u4eba\u5747 GDP \u4fc4\u7f57\u65af\u8054\u90a6 RUS 9.570808e+03 6.491072e+03 1.112534e+04 1.155358e+04 1.173138e+04 1.160876e+04 1.135524e+04 1.135640e+04 1.155053e+04 1.184444e+04 1.201153e+04 4 GDP \u5370\u5ea6 IND 5.075650e+11 8.733574e+11 1.763440e+12 1.859660e+12 1.978420e+12 2.125025e+12 2.294947e+12 2.484425e+12 2.659424e+12 2.822169e+12 2.940157e+12 \u4e3a\u65b9\u4fbf\u663e\u793a\uff0c\u5bf9\u8f93\u51fa\u7ed3\u679c\u8fdb\u884c\u4e86\u8c03\u6574\u3002 \u6570\u636e\u6574\u7406 \u5c06\u5e74\u4efd\u3001\u6570\u503c\u5206\u522b\u6574\u7406\u6210\u4e00\u5217\uff0c\u7528\u5230\u7684\u662f melt() \u65b9\u6cd5\u3002 data_1 = data . melt ( id_vars = [ 'Series Name' , 'Country Name' ], value_vars = [ 1990 , 2000 , 2011 , 2012 , 2013 , 2014 , 2015 , 2016 , 2017 , 2018 , 2019 ], var_name = 'year' , value_name = 'constant 2010 US$' ) data_1 . head () Series Name Country Name year constant 2010 US$ 0 GDP \u5df4\u897f 1990 1.189604e+12 1 \u4eba\u5747 GDP \u5df4\u897f 1990 7.983747e+03 2 GDP \u4fc4\u7f57\u65af\u8054\u90a6 1990 1.416187e+12 3 \u4eba\u5747 GDP \u4fc4\u7f57\u65af\u8054\u90a6 1990 9.570808e+03 4 GDP \u5370\u5ea6 1990 5.075650e+11 \u63d0\u53d6\u6570\u636e \u6bd4\u5982\u8981\u5bf92019\u5e74\u91d1\u7816\u56fd\u5bb6\u7684GDP\u548c\u4eba\u5747GDP\u8fdb\u884c\u53ef\u89c6\u5316\uff0c\u53ef\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a data_2 = data_1 [ data_1 [ 'year' ] == 2019 ] gdp = data_2 [ data_2 [ 'Series Name' ] == 'GDP' ] def trans ( x ): return round ( x / 100000000 , 2 ) gdp [ 'constant 2010 US$' ] = gdp [ 'constant 2010 US$' ] . apply ( trans ) # \u8f6c\u5316\u6210\u4ebf\u7f8e\u5143\uff0c\u4fbf\u4e8e\u663e\u793a pergdp = data_2 [ data_2 [ 'Series Name' ] == '\u4eba\u5747 GDP' ]","title":"\u6570\u636e\u7b80\u4ecb"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/#matplotlib","text":"","title":"matplotlib\u65b9\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/#_3","text":"\u91d1\u7816\u56fd\u5bb6GDP\u67f1\u72b6\u56fe matplotlib . pyplot . bar \uff08 x \uff0c height \uff0c width = 0.8 \uff0c bottom = None \uff0c * \uff0c align = 'center' \uff0c data = None \uff0c ** kwargs \uff09 mpl . rcParams [ 'font.sans-serif' ] = [ 'Microsoft YaHei' ] # \u8981\u663e\u793a\u4e2d\u6587\uff0c\u9700\u8981\u5bf9\u5b57\u4f53\u8fdb\u884c\u8bbe\u7f6e\uff0c\u8fd9\u91cc\u9009\u62e9\u4f7f\u7528\u5fae\u8f6f\u96c5\u9ed1\u5b57\u4f53 mpl . rcParams [ 'figure.autolayout' ] = True # automatically adjust subplot plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) bar = ax . bar ( gdp [ 'Country Name' ], # x gdp [ 'constant 2010 US$' ], # height width = 0.8 , # \u5bbd\u5ea6 align = 'center' # \u5bf9\u9f50 ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6GDP' , fontsize = 12 , weight = 'bold' ) ax . set_yticks ([]) # \u4e0d\u663e\u793a\u7eb5\u5750\u6807\u523b\u5ea6 ax . bar_label ( bar , padding = 2 , fmt = ' %.2f \u4ebf\u7f8e\u5143' ) plt . show () # \u4fdd\u5b58\u56fe\u7247 fig . savefig ( 'bar-GDP.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\u67f1\u72b6\u56fe plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) bar = ax . bar ( pergdp [ 'Country Name' ], # x pergdp [ 'constant 2010 US$' ], # height width = 0.8 , # \u5bbd\u5ea6 align = 'center' # \u5bf9\u9f50 ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP' , fontsize = 12 , weight = 'bold' ) ax . set_yticks ([]) # \u4e0d\u663e\u793a\u7eb5\u5750\u6807\u523b\u5ea6 ax . bar_label ( bar , padding = 2 , fmt = ' %.2f \u7f8e\u5143' ) plt . show () # \u4fdd\u5b58\u56fe\u7247 fig . savefig ( 'bar-perGdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u67f1\u72b6\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/#_4","text":"\u7531\u4e8e\u4e4b\u524d\u4f7f\u7528\u7684\u6570\u636e\u5dee\u5f02\u8f83\u5927\uff0c\u8003\u8651\u5230\u6570\u636e\u663e\u793a\u95ee\u9898\uff0c\u6240\u4ee5\u672c\u6848\u4f8b\u4f7f\u7528 matplotlib \u5b98\u65b9\u6587\u6863 \u7684\u6570\u636e\u3002 plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 labels = [ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ] men_means = [ 20 , 34 , 30 , 35 , 27 ] women_means = [ 25 , 32 , 34 , 20 , 25 ] x = np . arange ( len ( labels )) # the label locations width = 0.35 # the width of the bars fig , ax = plt . subplots ( figsize = ( 8 , 4 )) rects1 = ax . bar ( x - width / 2 , men_means , width , label = 'Men' ) rects2 = ax . bar ( x + width / 2 , women_means , width , label = 'Women' ) # Add some text for labels, title and custom x-axis tick labels, etc. ax . set_ylabel ( 'Scores' ) ax . set_title ( 'Scores by group and gender' ) ax . set_xticks ( x ) ax . set_xticklabels ( labels ) ax . legend () ax . bar_label ( rects1 , padding = 3 ) ax . bar_label ( rects2 , padding = 3 ) fig . tight_layout () plt . show () fig . savefig ( 'bar-grouped.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u5206\u7ec4\u67f1\u72b6\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/#_5","text":"\u6848\u4f8b\u6765\u6e90\u4e8ematplotlib \u5b98\u65b9\u6587\u6863 \uff0c\u7565\u6709\u4fee\u6539\uff1b\u7ed8\u5236\u5806\u79ef\u67f1\u72b6\u56fe\uff0c\u4e3b\u8981\u662f bottom \u53c2\u6570\u7684\u914d\u7f6e\u3002 labels = [ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ] men_means = [ 20 , 35 , 30 , 35 , 27 ] women_means = [ 25 , 32 , 34 , 20 , 25 ] width = 0.35 # the width of the bars: can also be len(x) sequence fig , ax = plt . subplots ( figsize = ( 8 , 4 )) bar1 = ax . bar ( labels , men_means , width , label = 'Men' ) bar2 = ax . bar ( labels , women_means , width , bottom = men_means , label = 'Women' ) ax . set_ylabel ( 'Scores' ) ax . set_title ( 'Scores by group and gender' ) ax . legend () ax . bar_label ( bar1 , label_type = 'center' ) ax . bar_label ( bar2 , label_type = 'center' ) plt . show () fig . savefig ( 'bar-stack.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u5806\u79ef\u67f1\u72b6\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/#seaborn","text":"seaborn . barplot ( * , x = None , y = None , hue = None , data = None , order = None , hue_order = None , estimator =< function mean at 0x7fecadf1cee0 > , ci = 95 , n_boot = 1000 , units = None , seed = None , orient = None , color = None , palette = None , saturation = 0.75 , errcolor = '.26' , errwidth = None , capsize = None , dodge = True , ax = None , ** kwargs )","title":"seaborn\u65b9\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/#_6","text":"\u5229\u7528 seaborn \u7ed8\u56fe\uff0c\u4f1a\u51fa\u73b0\u4e2d\u6587\u4e71\u7801\uff1b mpl.rcParams['font.sans-serif'] = ['Microsoft YaHei'] \u547d\u4ee4\u4e5f\u6ca1\u6709\u6548\u679c\uff0c\u5efa\u8bae\u5728\u6807\u9898\u3001\u523b\u5ea6\u6807\u7b7e\u91cc\u901a\u8fc7\u5b57\u5178\u6216\u5173\u952e\u5b57\u7684\u65b9\u5f0f\u8bbe\u7f6e\uff1b\u53e6\u5916\uff0c\u6dfb\u52a0\u6570\u636e\u6807\u7b7e\u7684\u65b9\u5f0f\u6709\u5f85\u63a2\u8ba8\u3002 \u91d1\u7816\u56fd\u5bb6GDP\u67f1\u72b6\u56fe sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( x = gdp [ 'Country Name' ], y = gdp [ 'constant 2010 US$' ], data = gdp ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6GDP\uff08\u4ebf\u7f8e\u5143\uff09' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) ax . set_xticklabels ( gdp [ 'Country Name' ], fontdict = { 'family' : 'Microsoft YaHei' }) fig . savefig ( 'seaborn-gdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\u67f1\u72b6\u56fe sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( x = pergdp [ 'Country Name' ], y = pergdp [ 'constant 2010 US$' ], data = pergdp ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\uff08\u7f8e\u5143\uff09' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) ax . set_xticklabels ( pergdp [ 'Country Name' ], fontdict = { 'family' : 'Microsoft YaHei' }) fig . savefig ( 'seaborn-pergdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u67f1\u72b6\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/#_7","text":"\u7531\u4e8e\u52a0\u8f7d seaborn \u5b98\u7f51\u7684\u6570\u636e\u51fa\u73b0\u95ee\u9898\uff0c\u672c\u6848\u4f8b\u5c06 motplotlib \u5bf9\u5e94\u6848\u4f8b\u7684\u6570\u636e\u8fdb\u884c\u4e86\u7b80\u5355\u52a0\u5de5\uff1b\u4e3b\u8981\u53c2\u6570\u8bbe\u7f6e hue \u3002 df = pd . DataFrame ({ 'labels' :[ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ], 'men_means' :[ 20 , 34 , 30 , 35 , 27 ], 'women_means' : [ 25 , 32 , 34 , 20 , 25 ]}) df1 = df . melt ( id_vars = [ 'labels' ], value_vars = [ 'men_means' , 'women_means' ], var_name = 'sex' , value_name = 'value' ) sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( x = 'labels' , y = 'value' , hue = 'sex' , data = df1 ) ax . set_title ( 'Scores by group and gender' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) fig . savefig ( 'seaborn-grouped.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u5206\u7ec4\u67f1\u72b6\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar/#_8","text":"\u5b98\u65b9\u6587\u6863\u5e76\u6ca1\u6d89\u53ca\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u53c2\u9605 \u6b64\u5904 \u3002","title":"\u5806\u79ef\u67f1\u72b6\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar_chart_race/","text":"\u52a8\u6001\u6761\u5f62\u56fe\u6216\u67f1\u5f62\u56fe \u00b6 \u5728 python \u4e2d\u52a8\u6001\u6761\u5f62\u56fe\u6216\u67f1\u5f62\u56fe\u4e3b\u8981\u4f7f\u7528 matplotli b\u6216 plotly \u6765\u7ed8\u5236\uff1b\u4e0d\u8fc7\uff0c\u6709\u5927\u795e\u5c06\u7ed8\u5236\u8fc7\u7a0b\u8fdb\u884c\u4e86\u5c01\u88c5\uff1a\u501f\u52a9 bar_chart_race \u5c31\u53ef\u4ee5\u7b80\u5355\u3001\u8f7b\u677e\u7684\u7ed8\u5236\u3002\u8981\u4f7f\u7528\u6b64\u51fd\u6570\uff0c\u9700\u8981\u5b89\u88c5\uff1b\u4e0d\u8fc7\u4f7f\u7528 pip install bar_chart_race \u547d\u4ee4\u8fdb\u884c\u5b89\u88c5\u7684\u53ea\u662f 0.1 \u7248\u672c\uff0c\u8981\u4f7f\u7528\u66f4\u591a\u529f\u80fd\uff0c\u9700\u8981\u5728 \u4f5c\u8005\u7684GIthub \u4e0a\u4e0b\u8f7d\u6e90\u4ee3\u7801\uff0c\u8fdb\u884c\u5b89\u88c5 0.2 \u7248\u672c\u3002 \u5b89\u88c5\u65b9\u5f0f\uff1a\u89e3\u538bGithub\u4e0b\u8f7d\u7684\u6e90\u4ee3\u7801\uff0c\u627e\u5230 setup.py \u6240\u5728\u4f4d\u7f6e\uff0c\u5728 cmd \u91cc\u5b9a\u4f4d\u5230\u8be5\u6587\u4ef6\u5939\uff0c\u4f7f\u7528 python setup.py install \u8fdb\u884c\u5b89\u88c5\u3002 \u4e3a\u4e86\u5c06\u52a8\u753b\u4fdd\u5b58\u5230\u78c1\u76d8\uff0c\u8bf7\u4f7f\u7528\u60a8\u8981\u4fdd\u5b58\u7684\u6587\u4ef6\u540d\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002\u60a8\u9700\u8981\u5148\u5b89\u88c5 ffmpeg \u624d\u80fd\u4fdd\u5b58\u52a8\u753b\u3002\u5b89\u88c5\u540e\uff0c\u60a8\u5c06\u80fd\u591f\u5c06\u52a8\u753b\u4fdd\u5b58\u4e3a\u591a\u79cd\u683c\u5f0f\uff08mp4\uff0cm4v\uff0cmov\u7b49\uff09\u3002\u8981\u5c06\u52a8\u753b\u53e6\u5b58\u4e3agif\uff0c\u8bf7\u5b89\u88c5 ImageMagick \u3002 \u5982\u679c\u60a8\u5728Jupyter Notebook\u4e2d\u5de5\u4f5c\uff0c\u8bf7\u4fdd\u7559 filename as None \uff0c\u5b83\u5c06\u81ea\u52a8\u5d4c\u5165\u5230Jupyter Notebook\u4e2d\u3002 \u51fd\u6570\u7b80\u4ecb \u00b6 def bar_chart_race ( df , # pandas DataFrame filename = None , # None\u6216str\uff0c\u9ed8\u8ba4None orientation = 'h' , # 'h'\u6216'v'\uff0c\u9ed8\u8ba4'h' sort = 'desc' , # desc'\u6216'asc'\uff0c\u9ed8\u8ba4'desc' n_bars = None , # int\uff0c\u9ed8\u8ba4None\uff0c\u6700\u5927\u6761\u6570 fixed_order = False , # ool\u6216list\uff0c\u9ed8\u8ba4False\uff0c\u987a\u5e8f fixed_max = False , # bool\uff0c\u9ed8\u8ba4False\uff0c\u662f\u5426\u56fa\u5b9a\u5305\u542b\u8fd9\u4e9b\u503c\u7684\u8f74\u7684\u6700\u5927\u503c\u3002 steps_per_period = 10 , # int\uff0c\u9ed8\u8ba410\uff0cThe number of steps to go from one time period to the next. period_length = 500 , # int, default 500\uff0cNumber of milliseconds to animate each period (row) interpolate_period = False , # bool, default False label_bars = True , # bool, default True\uff0c\u662f\u5426\u5728\u53f3\u4fa7\u6807\u8bb0\u503c bar_size = 0.95 , # float, default .95 period_label = True , # bool or dict, default True period_fmt = None , # str, default None period_summary_func = None , # function, default None perpendicular_bar_func = None , # function or str, default None figsize = ( 6 , 3.5 ), # two-item tuple of numbers, default (6, 3.5) cmap = 'dark24' , # str, matplotlib colormap instance, or list of colors, default 'dark24' title = None , # str, default None\uff0c\u6807\u9898 title_size = None , # number or str, default plt.rcParams['axes.titlesize'] \uff0c\u6807\u9898\u5b57\u4f53\u5927\u5c0f bar_label_size = 7 , # number or str, default 7\uff0c\u6807\u7b7e\u5927\u5c0f tick_label_size = 7 , # number or str, default 7\uff0c\u523b\u5ea6\u5927\u5c0f shared_fontdict = None , # dict, default None\uff0c\u5b57\u4f53\u5171\u4eab\u8bbe\u7f6e scale = 'linear' , # 'linear' or 'log', default 'linear' writer = None , # str or matplotlib Writer instance fig = None , # matplotlib Figure, default None dpi = 144 , # int, default 144 bar_kwargs = None , # dict, default filter_column_colors = False ) # bool, default False # \u5bfc\u5165\u5e93 import bar_chart_race as bcr import pandas as pd import warnings warnings . filterwarnings ( 'ignore' ) # \u5ffd\u7565\u9519\u8bef\u8f93\u51fa \u6570\u636e\u8bf4\u660e \u00b6 bar_chart_race \u4f7f\u7528\u7684\u6570\u636e\u5fc5\u987b\u662f\u5904\u7406\u540e\u7684\u5bbd\u6570\u636e\uff1b\u5176\u4e2d\u6bcf\u4e00\u884c\u4ee3\u8868\u4e00\u4e2a\u65f6\u95f4\u6bb5\uff0c\u6bcf\u5217\u5305\u542b\u8be5\u7c7b\u522b\u7684\u6761\u5f62\u503c\uff0c\uff08\u53ef\u9009\uff09\u4f7f\u7528\u7d22\u5f15\u6807\u8bb0\u6bcf\u4e2a\u65f6\u95f4\u6bb5\uff0c\u7d22\u5f15\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\u3002 \u53ef\u4f7f\u7528 prepare_wide_data() \u6216 prepare_long_data() \u4e24\u4e2a\u51fd\u6570 \u5c06\u6570\u636e\u8f6c\u6362\u6210\u6b63\u786e\u7684\u683c\u5f0f\uff1b\u4e5f\u53ef\u4ee5\u8fd0\u7528 melt() \u6216 pivot() \u51fd\u6570\u5c06\u6570\u636e\u5904\u7406\u6210\u6b63\u786e\u7684\u683c\u5f0f\u3002 \u672c\u6587\u6570\u636e\u4f7f\u7528\u4f5c\u8005GIThub\u4e0a\u7684\u5171\u4eab\u6570\u636e\uff0c\u4e0b\u8f7d\u6e90\u4ee3\u7801\u65f6\uff0c\u91cc\u9762\u9644\u5e26\u3002\u7531\u4e8e\u901a\u8fc7 bcr.load_dataset() \u65f6\u9047\u5230\u95ee\u9898\uff0c\u6240\u4ee5\u4ece\u672c\u5730\u8bfb\u53d6\u6570\u636e\u3002 data = pd . read_csv ( 'covid19_tutorial.csv' , parse_dates = [ 'date' ], # \u5c06'date'\u89e3\u6790\u4e3a\u65e5\u671f index_col = 'date' # \u5c06'date'\u4f5c\u4e3a\u7d22\u5f15 ) data \u7ed8\u56fe \u00b6 # \u8981\u4f20\u9012\u7ed9period_summary_func\u7684\u51fd\u6570 def summary ( values , ranks ): total_deaths = int ( round ( values . sum (), - 2 )) s = f 'Total Deaths - { total_deaths : ,.0f } ' return { 'x' : . 99 , 'y' : . 05 , 's' : s , 'ha' : 'right' , 'size' : 8 } # \u7ed8\u56fe bcr . bar_chart_race ( data , # \u6570\u636e filename = 'covid.gif' , # \u4fdd\u5b58\u4e3a.gif steps_per_period = 30 , # \u589e\u5927\u5e73\u6ed1\u5ea6 period_length = 1000 , # \u589e\u5927\u65f6\u95f4\u91cf period_label = { 'x' : . 99 , 'y' : . 1 , 'ha' : 'right' , 'color' : 'black' }, # \u65e5\u671f\u6807\u7b7e title = '\u5404\u56fdCOVID-19\u6b7b\u4ea1\u4eba\u6570' , shared_fontdict = { 'family' : 'LiSu' , 'weight' : 'bold' }, # \u5171\u4eab\u5b57\u4f53 period_summary_func = summary , # \u6dfb\u52a0\u6b7b\u4ea1\u603b\u4eba\u6570 ) \u66f4\u591a\u529f\u80fd\u4ecb\u7ecd\u53ef\u67e5\u9605 \u5b98\u65b9\u6587\u6863 \u3002","title":"\u52a8\u6001\u6761\u5f62\u56fe/\u67f1\u5f62\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar_chart_race/#_1","text":"\u5728 python \u4e2d\u52a8\u6001\u6761\u5f62\u56fe\u6216\u67f1\u5f62\u56fe\u4e3b\u8981\u4f7f\u7528 matplotli b\u6216 plotly \u6765\u7ed8\u5236\uff1b\u4e0d\u8fc7\uff0c\u6709\u5927\u795e\u5c06\u7ed8\u5236\u8fc7\u7a0b\u8fdb\u884c\u4e86\u5c01\u88c5\uff1a\u501f\u52a9 bar_chart_race \u5c31\u53ef\u4ee5\u7b80\u5355\u3001\u8f7b\u677e\u7684\u7ed8\u5236\u3002\u8981\u4f7f\u7528\u6b64\u51fd\u6570\uff0c\u9700\u8981\u5b89\u88c5\uff1b\u4e0d\u8fc7\u4f7f\u7528 pip install bar_chart_race \u547d\u4ee4\u8fdb\u884c\u5b89\u88c5\u7684\u53ea\u662f 0.1 \u7248\u672c\uff0c\u8981\u4f7f\u7528\u66f4\u591a\u529f\u80fd\uff0c\u9700\u8981\u5728 \u4f5c\u8005\u7684GIthub \u4e0a\u4e0b\u8f7d\u6e90\u4ee3\u7801\uff0c\u8fdb\u884c\u5b89\u88c5 0.2 \u7248\u672c\u3002 \u5b89\u88c5\u65b9\u5f0f\uff1a\u89e3\u538bGithub\u4e0b\u8f7d\u7684\u6e90\u4ee3\u7801\uff0c\u627e\u5230 setup.py \u6240\u5728\u4f4d\u7f6e\uff0c\u5728 cmd \u91cc\u5b9a\u4f4d\u5230\u8be5\u6587\u4ef6\u5939\uff0c\u4f7f\u7528 python setup.py install \u8fdb\u884c\u5b89\u88c5\u3002 \u4e3a\u4e86\u5c06\u52a8\u753b\u4fdd\u5b58\u5230\u78c1\u76d8\uff0c\u8bf7\u4f7f\u7528\u60a8\u8981\u4fdd\u5b58\u7684\u6587\u4ef6\u540d\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002\u60a8\u9700\u8981\u5148\u5b89\u88c5 ffmpeg \u624d\u80fd\u4fdd\u5b58\u52a8\u753b\u3002\u5b89\u88c5\u540e\uff0c\u60a8\u5c06\u80fd\u591f\u5c06\u52a8\u753b\u4fdd\u5b58\u4e3a\u591a\u79cd\u683c\u5f0f\uff08mp4\uff0cm4v\uff0cmov\u7b49\uff09\u3002\u8981\u5c06\u52a8\u753b\u53e6\u5b58\u4e3agif\uff0c\u8bf7\u5b89\u88c5 ImageMagick \u3002 \u5982\u679c\u60a8\u5728Jupyter Notebook\u4e2d\u5de5\u4f5c\uff0c\u8bf7\u4fdd\u7559 filename as None \uff0c\u5b83\u5c06\u81ea\u52a8\u5d4c\u5165\u5230Jupyter Notebook\u4e2d\u3002","title":"\u52a8\u6001\u6761\u5f62\u56fe\u6216\u67f1\u5f62\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar_chart_race/#_2","text":"def bar_chart_race ( df , # pandas DataFrame filename = None , # None\u6216str\uff0c\u9ed8\u8ba4None orientation = 'h' , # 'h'\u6216'v'\uff0c\u9ed8\u8ba4'h' sort = 'desc' , # desc'\u6216'asc'\uff0c\u9ed8\u8ba4'desc' n_bars = None , # int\uff0c\u9ed8\u8ba4None\uff0c\u6700\u5927\u6761\u6570 fixed_order = False , # ool\u6216list\uff0c\u9ed8\u8ba4False\uff0c\u987a\u5e8f fixed_max = False , # bool\uff0c\u9ed8\u8ba4False\uff0c\u662f\u5426\u56fa\u5b9a\u5305\u542b\u8fd9\u4e9b\u503c\u7684\u8f74\u7684\u6700\u5927\u503c\u3002 steps_per_period = 10 , # int\uff0c\u9ed8\u8ba410\uff0cThe number of steps to go from one time period to the next. period_length = 500 , # int, default 500\uff0cNumber of milliseconds to animate each period (row) interpolate_period = False , # bool, default False label_bars = True , # bool, default True\uff0c\u662f\u5426\u5728\u53f3\u4fa7\u6807\u8bb0\u503c bar_size = 0.95 , # float, default .95 period_label = True , # bool or dict, default True period_fmt = None , # str, default None period_summary_func = None , # function, default None perpendicular_bar_func = None , # function or str, default None figsize = ( 6 , 3.5 ), # two-item tuple of numbers, default (6, 3.5) cmap = 'dark24' , # str, matplotlib colormap instance, or list of colors, default 'dark24' title = None , # str, default None\uff0c\u6807\u9898 title_size = None , # number or str, default plt.rcParams['axes.titlesize'] \uff0c\u6807\u9898\u5b57\u4f53\u5927\u5c0f bar_label_size = 7 , # number or str, default 7\uff0c\u6807\u7b7e\u5927\u5c0f tick_label_size = 7 , # number or str, default 7\uff0c\u523b\u5ea6\u5927\u5c0f shared_fontdict = None , # dict, default None\uff0c\u5b57\u4f53\u5171\u4eab\u8bbe\u7f6e scale = 'linear' , # 'linear' or 'log', default 'linear' writer = None , # str or matplotlib Writer instance fig = None , # matplotlib Figure, default None dpi = 144 , # int, default 144 bar_kwargs = None , # dict, default filter_column_colors = False ) # bool, default False # \u5bfc\u5165\u5e93 import bar_chart_race as bcr import pandas as pd import warnings warnings . filterwarnings ( 'ignore' ) # \u5ffd\u7565\u9519\u8bef\u8f93\u51fa","title":"\u51fd\u6570\u7b80\u4ecb"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar_chart_race/#_3","text":"bar_chart_race \u4f7f\u7528\u7684\u6570\u636e\u5fc5\u987b\u662f\u5904\u7406\u540e\u7684\u5bbd\u6570\u636e\uff1b\u5176\u4e2d\u6bcf\u4e00\u884c\u4ee3\u8868\u4e00\u4e2a\u65f6\u95f4\u6bb5\uff0c\u6bcf\u5217\u5305\u542b\u8be5\u7c7b\u522b\u7684\u6761\u5f62\u503c\uff0c\uff08\u53ef\u9009\uff09\u4f7f\u7528\u7d22\u5f15\u6807\u8bb0\u6bcf\u4e2a\u65f6\u95f4\u6bb5\uff0c\u7d22\u5f15\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\u3002 \u53ef\u4f7f\u7528 prepare_wide_data() \u6216 prepare_long_data() \u4e24\u4e2a\u51fd\u6570 \u5c06\u6570\u636e\u8f6c\u6362\u6210\u6b63\u786e\u7684\u683c\u5f0f\uff1b\u4e5f\u53ef\u4ee5\u8fd0\u7528 melt() \u6216 pivot() \u51fd\u6570\u5c06\u6570\u636e\u5904\u7406\u6210\u6b63\u786e\u7684\u683c\u5f0f\u3002 \u672c\u6587\u6570\u636e\u4f7f\u7528\u4f5c\u8005GIThub\u4e0a\u7684\u5171\u4eab\u6570\u636e\uff0c\u4e0b\u8f7d\u6e90\u4ee3\u7801\u65f6\uff0c\u91cc\u9762\u9644\u5e26\u3002\u7531\u4e8e\u901a\u8fc7 bcr.load_dataset() \u65f6\u9047\u5230\u95ee\u9898\uff0c\u6240\u4ee5\u4ece\u672c\u5730\u8bfb\u53d6\u6570\u636e\u3002 data = pd . read_csv ( 'covid19_tutorial.csv' , parse_dates = [ 'date' ], # \u5c06'date'\u89e3\u6790\u4e3a\u65e5\u671f index_col = 'date' # \u5c06'date'\u4f5c\u4e3a\u7d22\u5f15 ) data","title":"\u6570\u636e\u8bf4\u660e"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/bar_chart_race/#_4","text":"# \u8981\u4f20\u9012\u7ed9period_summary_func\u7684\u51fd\u6570 def summary ( values , ranks ): total_deaths = int ( round ( values . sum (), - 2 )) s = f 'Total Deaths - { total_deaths : ,.0f } ' return { 'x' : . 99 , 'y' : . 05 , 's' : s , 'ha' : 'right' , 'size' : 8 } # \u7ed8\u56fe bcr . bar_chart_race ( data , # \u6570\u636e filename = 'covid.gif' , # \u4fdd\u5b58\u4e3a.gif steps_per_period = 30 , # \u589e\u5927\u5e73\u6ed1\u5ea6 period_length = 1000 , # \u589e\u5927\u65f6\u95f4\u91cf period_label = { 'x' : . 99 , 'y' : . 1 , 'ha' : 'right' , 'color' : 'black' }, # \u65e5\u671f\u6807\u7b7e title = '\u5404\u56fdCOVID-19\u6b7b\u4ea1\u4eba\u6570' , shared_fontdict = { 'family' : 'LiSu' , 'weight' : 'bold' }, # \u5171\u4eab\u5b57\u4f53 period_summary_func = summary , # \u6dfb\u52a0\u6b7b\u4ea1\u603b\u4eba\u6570 ) \u66f4\u591a\u529f\u80fd\u4ecb\u7ecd\u53ef\u67e5\u9605 \u5b98\u65b9\u6587\u6863 \u3002","title":"\u7ed8\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/barh/","text":"\u6761\u5f62\u56fe \u00b6 import pandas as pd import matplotlib.pyplot as plt import matplotlib as mpl import seaborn as sns import numpy as np import warnings warnings . filterwarnings ( 'ignore' ) # \u5ffd\u7565\u9519\u8bef\u8f93\u51fa % matplotlib inline matplotlib\u65b9\u6cd5 \u00b6 \u6570\u636e\u4ecd\u4f7f\u7528\u7ed8\u5236\u67f1\u72b6\u56fe\u6240\u7528\u6570\u636e\u3002 Axes . barh ( self , y , width , height = 0.8 , left = None , * , align = 'center' , ** kwargs ) data = pd . read_excel ( 'BRICS.xlsx' ) data_1 = data . melt ( id_vars = [ 'Series Name' , 'Country Name' ], value_vars = [ 1990 , 2000 , 2011 , 2012 , 2013 , 2014 , 2015 , 2016 , 2017 , 2018 , 2019 ], var_name = 'year' , value_name = 'constant 2010 US$' ) data_2 = data_1 [ data_1 [ 'year' ] == 2019 ] gdp = data_2 [ data_2 [ 'Series Name' ] == 'GDP' ] def trans ( x ): return round ( x / 100000000 , 2 ) gdp [ 'constant 2010 US$' ] = gdp [ 'constant 2010 US$' ] . apply ( trans ) # \u8f6c\u5316\u6210\u4ebf\u7f8e\u5143\uff0c\u4fbf\u4e8e\u663e\u793a pergdp = data_2 [ data_2 [ 'Series Name' ] == '\u4eba\u5747 GDP' ] \u6761\u5f62\u56fe \u00b6 \u91d1\u7816\u56fd\u5bb6GDP\u6761\u5f62\u56fe mpl . rcParams [ 'font.sans-serif' ] = [ 'Microsoft YaHei' ] # \u8981\u663e\u793a\u4e2d\u6587\uff0c\u9700\u8981\u5bf9\u5b57\u4f53\u8fdb\u884c\u8bbe\u7f6e\uff0c\u8fd9\u91cc\u9009\u62e9\u4f7f\u7528\u5fae\u8f6f\u96c5\u9ed1\u5b57\u4f53 mpl . rcParams [ 'figure.autolayout' ] = True # automatically adjust subplot plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) barh = ax . barh ( gdp [ 'Country Name' ], # x gdp [ 'constant 2010 US$' ], # height height = 0.8 , # \u9ad8\u5ea6 align = 'center' # \u5bf9\u9f50 ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6GDP' , fontsize = 12 , weight = 'bold' ) ax . set_xticks ([]) # \u4e0d\u663e\u793a\u6a2a\u5750\u6807\u523b\u5ea6 ax . bar_label ( barh , padding = 2 , fmt = ' %.2f \u4ebf\u7f8e\u5143' ) plt . show () # \u4fdd\u5b58\u56fe\u7247 fig . savefig ( 'barh-GDP.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\u6761\u5f62\u56fe plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) barh = ax . barh ( pergdp [ 'Country Name' ], # x pergdp [ 'constant 2010 US$' ], # height height = 0.8 , # \u9ad8\u5ea6 align = 'center' , # \u5bf9\u9f50 color = 'b' , # \u989c\u8272 alpha = 0.6 # \u900f\u660e\u5ea6 ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP' , fontsize = 12 , weight = 'bold' ) ax . set_xticks ([]) # \u4e0d\u663e\u793a\u6a2a\u5750\u6807\u523b\u5ea6 ax . bar_label ( barh , padding = 2 , fmt = ' %.2f \u7f8e\u5143' ) plt . show () # \u4fdd\u5b58\u56fe\u7247 fig . savefig ( 'barh-perGdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u5206\u7ec4\u6761\u5f62\u56fe \u00b6 \u6ce8\u610f\uff1a\u6761\u5f62\u56fe\u91cc\u7684 width \u53c2\u6570\u542b\u4e49\u4e0d\u540c\u4e8e\u67f1\u72b6\u56fe\u91cc\u7684 width ,\u6761\u5f62\u56fe\u91cc\u7684 height \u8868\u793a\u9ad8\u5ea6\uff0c\u4e0e\u67f1\u72b6\u56fe\u91cc\u7684 width \uff08\u5bbd\u5ea6\uff09\u542b\u4e49\u5dee\u4e0d\u591a\u3002 plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 labels = [ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ] men_means = [ 20 , 34 , 30 , 35 , 27 ] women_means = [ 25 , 32 , 34 , 20 , 25 ] x = np . arange ( len ( labels )) # the label locations height = 0.35 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) rects1 = ax . barh ( x - height / 2 , men_means , height , label = 'Men' , align = 'center' ) rects2 = ax . barh ( x + height / 2 , women_means , height , label = 'Women' , align = 'center' ) ax . set_xlabel ( 'Scores' ) ax . set_title ( 'Scores by group and gender' ) ax . set_yticks ( x ) ax . set_yticklabels ( labels ) ax . set_xticks ([]) ax . legend () ax . bar_label ( rects1 , padding = 3 ) ax . bar_label ( rects2 , padding = 3 ) fig . tight_layout () plt . show () fig . savefig ( 'barh-grouped.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u5806\u79ef\u6761\u5f62\u56fe \u00b6 \u4e3b\u8981\u662f left \u53c2\u6570\u7684\u914d\u7f6e\u3002 labels = [ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ] men_means = [ 20 , 35 , 30 , 35 , 27 ] women_means = [ 25 , 32 , 34 , 20 , 25 ] fig , ax = plt . subplots ( figsize = ( 8 , 4 )) bar1 = ax . barh ( labels , men_means , height = 0.8 , label = 'Men' ) bar2 = ax . barh ( labels , women_means , height = 0.8 , left = men_means , label = 'Women' ) ax . set_xlabel ( 'Scores' ) ax . set_title ( 'Scores by group and gender' , fontsize = 12 , weight = 'bold' ) ax . set_xticks ([]) ax . legend () ax . bar_label ( bar1 , label_type = 'center' ) ax . bar_label ( bar2 , label_type = 'center' ) plt . show () fig . savefig ( 'barh-stack.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b seaborn\u65b9\u6cd5 \u00b6 seaborn . barplot ( * , x = None , y = None , hue = None , data = None , order = None , hue_order = None , estimator =< function mean at 0x7fecadf1cee0 > , ci = 95 , n_boot = 1000 , units = None , seed = None , orient = None , color = None , palette = None , saturation = 0.75 , errcolor = '.26' , errwidth = None , capsize = None , dodge = True , ax = None , ** kwargs ) \u6761\u5f62\u56fe \u00b6 \u91d1\u7816\u56fd\u5bb6GDP\u6761\u5f62\u56fe sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( y = gdp [ 'Country Name' ], x = gdp [ 'constant 2010 US$' ], data = gdp ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6GDP\uff08\u4ebf\u7f8e\u5143\uff09' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) ax . set_yticklabels ( gdp [ 'Country Name' ], fontdict = { 'family' : 'Microsoft YaHei' }) fig . savefig ( 'seaborn-gdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\u6761\u5f62\u56fe sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( y = pergdp [ 'Country Name' ], x = pergdp [ 'constant 2010 US$' ], data = pergdp ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\uff08\u7f8e\u5143\uff09' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) ax . set_yticklabels ( pergdp [ 'Country Name' ], fontdict = { 'family' : 'Microsoft YaHei' }) fig . savefig ( 'seaborn-pergdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u5206\u7ec4\u6761\u5f62\u56fe \u00b6 df = pd . DataFrame ({ 'labels' :[ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ], 'men_means' :[ 20 , 34 , 30 , 35 , 27 ], 'women_means' : [ 25 , 32 , 34 , 20 , 25 ]}) df1 = df . melt ( id_vars = [ 'labels' ], value_vars = [ 'men_means' , 'women_means' ], var_name = 'sex' , value_name = 'value' ) sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( y = 'labels' , x = 'value' , hue = 'sex' , data = df1 ) ax . set_title ( 'Scores by group and gender' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) fig . savefig ( 'seaborn-grouped.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u6761\u5f62\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/barh/#_1","text":"import pandas as pd import matplotlib.pyplot as plt import matplotlib as mpl import seaborn as sns import numpy as np import warnings warnings . filterwarnings ( 'ignore' ) # \u5ffd\u7565\u9519\u8bef\u8f93\u51fa % matplotlib inline","title":"\u6761\u5f62\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/barh/#matplotlib","text":"\u6570\u636e\u4ecd\u4f7f\u7528\u7ed8\u5236\u67f1\u72b6\u56fe\u6240\u7528\u6570\u636e\u3002 Axes . barh ( self , y , width , height = 0.8 , left = None , * , align = 'center' , ** kwargs ) data = pd . read_excel ( 'BRICS.xlsx' ) data_1 = data . melt ( id_vars = [ 'Series Name' , 'Country Name' ], value_vars = [ 1990 , 2000 , 2011 , 2012 , 2013 , 2014 , 2015 , 2016 , 2017 , 2018 , 2019 ], var_name = 'year' , value_name = 'constant 2010 US$' ) data_2 = data_1 [ data_1 [ 'year' ] == 2019 ] gdp = data_2 [ data_2 [ 'Series Name' ] == 'GDP' ] def trans ( x ): return round ( x / 100000000 , 2 ) gdp [ 'constant 2010 US$' ] = gdp [ 'constant 2010 US$' ] . apply ( trans ) # \u8f6c\u5316\u6210\u4ebf\u7f8e\u5143\uff0c\u4fbf\u4e8e\u663e\u793a pergdp = data_2 [ data_2 [ 'Series Name' ] == '\u4eba\u5747 GDP' ]","title":"matplotlib\u65b9\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/barh/#_2","text":"\u91d1\u7816\u56fd\u5bb6GDP\u6761\u5f62\u56fe mpl . rcParams [ 'font.sans-serif' ] = [ 'Microsoft YaHei' ] # \u8981\u663e\u793a\u4e2d\u6587\uff0c\u9700\u8981\u5bf9\u5b57\u4f53\u8fdb\u884c\u8bbe\u7f6e\uff0c\u8fd9\u91cc\u9009\u62e9\u4f7f\u7528\u5fae\u8f6f\u96c5\u9ed1\u5b57\u4f53 mpl . rcParams [ 'figure.autolayout' ] = True # automatically adjust subplot plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) barh = ax . barh ( gdp [ 'Country Name' ], # x gdp [ 'constant 2010 US$' ], # height height = 0.8 , # \u9ad8\u5ea6 align = 'center' # \u5bf9\u9f50 ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6GDP' , fontsize = 12 , weight = 'bold' ) ax . set_xticks ([]) # \u4e0d\u663e\u793a\u6a2a\u5750\u6807\u523b\u5ea6 ax . bar_label ( barh , padding = 2 , fmt = ' %.2f \u4ebf\u7f8e\u5143' ) plt . show () # \u4fdd\u5b58\u56fe\u7247 fig . savefig ( 'barh-GDP.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\u6761\u5f62\u56fe plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) barh = ax . barh ( pergdp [ 'Country Name' ], # x pergdp [ 'constant 2010 US$' ], # height height = 0.8 , # \u9ad8\u5ea6 align = 'center' , # \u5bf9\u9f50 color = 'b' , # \u989c\u8272 alpha = 0.6 # \u900f\u660e\u5ea6 ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP' , fontsize = 12 , weight = 'bold' ) ax . set_xticks ([]) # \u4e0d\u663e\u793a\u6a2a\u5750\u6807\u523b\u5ea6 ax . bar_label ( barh , padding = 2 , fmt = ' %.2f \u7f8e\u5143' ) plt . show () # \u4fdd\u5b58\u56fe\u7247 fig . savefig ( 'barh-perGdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u6761\u5f62\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/barh/#_3","text":"\u6ce8\u610f\uff1a\u6761\u5f62\u56fe\u91cc\u7684 width \u53c2\u6570\u542b\u4e49\u4e0d\u540c\u4e8e\u67f1\u72b6\u56fe\u91cc\u7684 width ,\u6761\u5f62\u56fe\u91cc\u7684 height \u8868\u793a\u9ad8\u5ea6\uff0c\u4e0e\u67f1\u72b6\u56fe\u91cc\u7684 width \uff08\u5bbd\u5ea6\uff09\u542b\u4e49\u5dee\u4e0d\u591a\u3002 plt . style . use ( 'ggplot' ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u53ef\u901a\u8fc7plt.style.availablel\u6765\u67e5\u770b\u66f4\u591a\u4e3b\u9898 labels = [ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ] men_means = [ 20 , 34 , 30 , 35 , 27 ] women_means = [ 25 , 32 , 34 , 20 , 25 ] x = np . arange ( len ( labels )) # the label locations height = 0.35 fig , ax = plt . subplots ( figsize = ( 8 , 4 )) rects1 = ax . barh ( x - height / 2 , men_means , height , label = 'Men' , align = 'center' ) rects2 = ax . barh ( x + height / 2 , women_means , height , label = 'Women' , align = 'center' ) ax . set_xlabel ( 'Scores' ) ax . set_title ( 'Scores by group and gender' ) ax . set_yticks ( x ) ax . set_yticklabels ( labels ) ax . set_xticks ([]) ax . legend () ax . bar_label ( rects1 , padding = 3 ) ax . bar_label ( rects2 , padding = 3 ) fig . tight_layout () plt . show () fig . savefig ( 'barh-grouped.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u5206\u7ec4\u6761\u5f62\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/barh/#_4","text":"\u4e3b\u8981\u662f left \u53c2\u6570\u7684\u914d\u7f6e\u3002 labels = [ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ] men_means = [ 20 , 35 , 30 , 35 , 27 ] women_means = [ 25 , 32 , 34 , 20 , 25 ] fig , ax = plt . subplots ( figsize = ( 8 , 4 )) bar1 = ax . barh ( labels , men_means , height = 0.8 , label = 'Men' ) bar2 = ax . barh ( labels , women_means , height = 0.8 , left = men_means , label = 'Women' ) ax . set_xlabel ( 'Scores' ) ax . set_title ( 'Scores by group and gender' , fontsize = 12 , weight = 'bold' ) ax . set_xticks ([]) ax . legend () ax . bar_label ( bar1 , label_type = 'center' ) ax . bar_label ( bar2 , label_type = 'center' ) plt . show () fig . savefig ( 'barh-stack.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u5806\u79ef\u6761\u5f62\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/barh/#seaborn","text":"seaborn . barplot ( * , x = None , y = None , hue = None , data = None , order = None , hue_order = None , estimator =< function mean at 0x7fecadf1cee0 > , ci = 95 , n_boot = 1000 , units = None , seed = None , orient = None , color = None , palette = None , saturation = 0.75 , errcolor = '.26' , errwidth = None , capsize = None , dodge = True , ax = None , ** kwargs )","title":"seaborn\u65b9\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/barh/#_5","text":"\u91d1\u7816\u56fd\u5bb6GDP\u6761\u5f62\u56fe sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( y = gdp [ 'Country Name' ], x = gdp [ 'constant 2010 US$' ], data = gdp ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6GDP\uff08\u4ebf\u7f8e\u5143\uff09' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) ax . set_yticklabels ( gdp [ 'Country Name' ], fontdict = { 'family' : 'Microsoft YaHei' }) fig . savefig ( 'seaborn-gdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b \u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\u6761\u5f62\u56fe sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( y = pergdp [ 'Country Name' ], x = pergdp [ 'constant 2010 US$' ], data = pergdp ) ax . set_title ( '2019\u5e74\u91d1\u7816\u56fd\u5bb6\u4eba\u5747GDP\uff08\u7f8e\u5143\uff09' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) ax . set_yticklabels ( pergdp [ 'Country Name' ], fontdict = { 'family' : 'Microsoft YaHei' }) fig . savefig ( 'seaborn-pergdp.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u6761\u5f62\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/barh/#_6","text":"df = pd . DataFrame ({ 'labels' :[ 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ], 'men_means' :[ 20 , 34 , 30 , 35 , 27 ], 'women_means' : [ 25 , 32 , 34 , 20 , 25 ]}) df1 = df . melt ( id_vars = [ 'labels' ], value_vars = [ 'men_means' , 'women_means' ], var_name = 'sex' , value_name = 'value' ) sns . set_theme ( style = \"whitegrid\" ) # \u8bbe\u7f6e\u4e3b\u9898\uff0c\u51715\u79cd\uff1adarkgrid\u3001whitegrid\u3001dark\u3001white\u3001ticks fig , ax = plt . subplots ( figsize = ( 8 , 4 )) sns . barplot ( y = 'labels' , x = 'value' , hue = 'sex' , data = df1 ) ax . set_title ( 'Scores by group and gender' , fontdict = { 'family' : 'Microsoft YaHei' , 'fontsize' : 12 , 'weight' : 'bold' }) fig . savefig ( 'seaborn-grouped.png' , transparent = False , # transparent=True \u5982\u679c\u683c\u5f0f\u652f\u6301\uff0c\u5219\u4f7f\u4fdd\u5b58\u7684\u56fe\u5f62\u7684\u80cc\u666f\u900f\u660e dpi = 80 , # dpi=80 \u63a7\u5236\u8f93\u51fa\u7684\u5206\u8fa8\u7387\uff08\u6bcf\u5e73\u65b9\u82f1\u5bf8\u7684\u70b9\u6570\uff09 bbox_inches = \"tight\" #bbox_inches=\"tight\" \u4f7f\u56fe\u5f62\u7684\u8fb9\u754c\u9002\u5408\u6211\u4eec\u7684\u7ed8\u56fe ) \u200b \u200b","title":"\u5206\u7ec4\u6761\u5f62\u56fe"}]}